// Copyright (c) 2022 Bry Onyoni
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
const { expect } = require("chai");
const hre = require("hardhat");
const bigInt = require("big-integer");

/* bgN */
function bgN(number, power) {
  return ethers.utils.parseUnits(number.toString(), power);
}

/* numberWithCommas */
function nWC(x) {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

let e;
let e2;

/* CONTRACTS */
let e5; let e52;   
let f5;    
let g5; let g52;   
let h5; let h52;

/* LIBRARIES */
let e3; let e32; let e33; let e34;    
let f3; let f32; let f33; 
let g3; let g32; let g33;    
let h3; let h32;


before(async () => {
  var seconds = new Date().getTime() / 1000;
  // await console.log(hre);



  const E3 = await hre.ethers.getContractFactory("E3");
  e3 = await E3.deploy();

  const E32 = await hre.ethers.getContractFactory("E32");
  e32 = await E32.deploy();

  const E33 = await hre.ethers.getContractFactory("E33");
  e33 = await E33.deploy();

  const E34 = await hre.ethers.getContractFactory("E34");
  e34 = await E34.deploy();


  ////////////////////////////////////////
  const F3 = await hre.ethers.getContractFactory("F3");
  f3 = await F3.deploy();

  const F32 = await hre.ethers.getContractFactory("F32");
  f32 = await F32.deploy();

  const F33 = await hre.ethers.getContractFactory("F33");
  f33 = await F33.deploy();


  ////////////////////////////////////////
  const G3 = await hre.ethers.getContractFactory("G3");
  g3 = await G3.deploy();

  const G32 = await hre.ethers.getContractFactory("G32");
  g32 = await G32.deploy();

  const G33 = await hre.ethers.getContractFactory("G33");
  g33 = await G33.deploy();


  ////////////////////////////////////////
  const H3 = await hre.ethers.getContractFactory("H3");
  h3 = await H3.deploy();

  const H32 = await hre.ethers.getContractFactory("H32");
  h32 = await H32.deploy();




  const E2 = await hre.ethers.getContractFactory("E2", {
    libraries: {
      E3: e3.address,
      E32: e32.address,
      E33: e33.address,
      E34: e34.address,

      F3: f3.address,
      F32: f32.address,
      F33: f33.address,

      G3: g3.address,
      G32: g32.address,
      G33: g33.address,

      H3: h3.address,
      H32: h32.address,
    },
  });
  e = await E2.deploy();
  await e.deployed();

  // const E52 = await hre.ethers.getContractFactory("E52", {
  //   libraries: {
  //     E3: e3.address,
  //     E34: e34.address
  //   },
  // });
  // e = await E52.deploy(e3.address);
  // await e.deployed();


  // const F5 = await hre.ethers.getContractFactory("F5", {
  //   libraries: {
  //     E3: e3.address,
  //     E32: e32.address,
  //     F3: f3.address
  //   },
  // });
  // e = await F5.deploy(e3.address);
  // await e.deployed();



  // const eH52 = await hre.ethers.getContractFactory("H52", {
  //   libraries: {
  //     E3: e3.address,
  //     // H3: h3.address,
  //     H32: h32.address
  //   },
  // });
  // e = await eH52.deploy(h3.address);
  // await e.deployed();


  // const E5 = await hre.ethers.getContractFactory("E5", {
  //   libraries: {
  //     E3: e3.address,
  //     E32: e32.address,
  //     E33: e33.address
  //   },
  // });
  // e = await E5.deploy();
  // await e.deployed();


  // const H5 = await hre.ethers.getContractFactory("H5", {
  //   libraries: {
  //     // E3: e3.address,
  //     E32: e32.address,
  //     E33: e33.address,
  //     H3: h3.address,
  //     H32: h32.address
  //   },
  // });
  // e = await H5.deploy(h3.address);
  // await e.deployed();


  // const H52 = await hre.ethers.getContractFactory("H52", {
  //   libraries: {
  //     E3: e3.address,
  //     // H3: h3.address,
  //     H32: h32.address
  //   },
  // });
  // e2 = await H52.deploy(h3.address);
  // await e2.deployed();




  // ///////////////////////////////////////////////////////////////////////////////////////////////




  const [signer, addr1, addr2] = await ethers.getSigners();
  const E5 = await hre.ethers.getContractFactory("E5", {
    libraries: {
      E3: e3.address,
      E32: e32.address,
      E33: e33.address
    },
  });
  e5 = await E5.connect(signer).deploy();
  await e5.deployed();




  // ////////////////////////////////////////
  const F5 = await hre.ethers.getContractFactory("F5", {
    libraries: {
      F3: f3.address,
      F33: f33.address,
      E3: e3.address,
      E32: e32.address,
      E33: e33.address
    },
  });
  f5 = await F5.connect(signer).deploy(e5.address);
  await f5.deployed();


  const E52 = await hre.ethers.getContractFactory("E52", {
    libraries: {
      E3: e3.address,
      E34: e34.address
    },
  });
  e52 = await E52.connect(signer).deploy(f5.address);
  await e52.deployed();




  // ////////////////////////////////////////
  const G5 = await hre.ethers.getContractFactory("G5", {
    libraries: {
      E3: e3.address,
      G3: g3.address,
      // G32: g32.address,
      G33: g33.address,
      E32: e32.address,
      E33: e33.address,
      // F3: f3.address,
      F32: f32.address,
      // F33: f33.address
    },
  });
  g5 = await G5.connect(signer).deploy(f5.address);
  await g5.deployed();


  const G52 = await hre.ethers.getContractFactory("G52", {
    libraries: {
      G32: g32.address,
      G33: g33.address,
      E3: e3.address,
      E32: e32.address,
      F32: f32.address,
    },
  });
  g52 = await G52.connect(signer).deploy(f5.address);
  await g52.deployed();




  // ////////////////////////////////////////
  const H5 = await hre.ethers.getContractFactory("H5", {
    libraries: {
      E3: e3.address,
      E32: e32.address,
      E33: e33.address,
      // E34: e34.address,
      H3: h3.address,
      // H32: h32.address,
      F33: f33.address,
    },
  });
  h5 = await H5.connect(signer).deploy(f5.address);
  await h5.deployed();

  const H52 = await hre.ethers.getContractFactory("H52", {
    libraries: {
      E3: e3.address,
      H32: h32.address
    },
  });
  h52 = await H52.connect(signer).deploy(f5.address);
  await h52.deployed();

});

/* run each test one by one, not all at once. Enjoy the scroll! */
describe("E3's", function () {

  xit("0. can run e", async () => {
    var num = await e.get_test_num();
    console.log("0a " + num);

    expect(num).to.equal("40");

  });

  //
  //
  //
  //
  //
  //
  //-----------------------~~~~~~CALCULATE-FUNCTIONS~~~~~~-------------------
  /* price(): can calculate the right price given exchange ratios */
  xit("1. can run f1", async function () {

    //small amount, small ratioX and small ratioY ; capped
    var v1 = await e.f1(50, 1000, 1000, 3);
    console.log("1a");
    expect(await v1).to.equal(47);

    //large amount, large ratioX and large ratioY ; capped
    v1 = "" + (await e.f1(bgN(1, 54), bgN(2, 60), bgN(1, 60), 3));
    console.log("1b");
    expect(await v1).to.equal("499999750000124999000000000000000000000000000000000000");
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(1, 60), bgN(1, 72), bgN(2, 72), 3);
    console.log("" + bgN(1, 60));
    console.log("" + v1);
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(1, 54), bgN(2, 72), bgN(1, 72), 3);
    console.log("" + bgN(1, 54));
    console.log("" + v1);
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(5, 54), bgN(5, 72), bgN(1, 72), 3);
    console.log("" + bgN(1, 54));
    console.log("" + v1);



    //large amount, small ratioX and small ratioY ; capped
    // price = await e.price(5*(10**54), 2*(10**10), 1*(10**11), 3);
    // price = ""+(await e.price(bgN(5, 54), bgN(2, 10),bgN(1, 11), 3));
    console.log("1c");
    await expect(e.f1(bgN(5, 54), bgN(2, 10), bgN(1, 11), 3)).to.be.reverted;
    // expect(await price).to.equal("100000000000");
    // price = await e.price(bgN(5, 54), bgN(5, 10), bgN(1, 10), 3);
    // console.log(""+bgN(1, 10));
    // console.log(""+price);

    //large amount, small ratioX and large ratioY ; capped
    // price = await e.price(5*(10**54), 2*(10**10), 1*(10**60), 3);
    // price = ""+(await e.price(bgN(5, 54), bgN(2, 10),bgN(1, 60), 3));
    console.log("1d");
    await expect(e.f1(bgN(5, 54), bgN(2, 10), bgN(1, 60), 3)).to.be.reverted;
    // expect(await price).to.equal("1000000000000000000000000000000000000000000000000000000000000");

    //large amounk, large ratioX and small ratioY ; capped
    // price = await e.price(3*(10**51), 2*(10**68), 6*(10**20), 3);
    v1 = "" + (await e.f1(bgN(3, 51), bgN(2, 68), bgN(6, 20), 3));
    console.log("1e");
    expect(await v1).to.equal("8999");
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(1, 50), bgN(2, 50), bgN(1, 20), 3);
    console.log("" + bgN(1, 20));
    console.log("" + v1);
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(1, 50), bgN(4, 50), bgN(1, 20), 3);
    console.log("" + bgN(1, 20));
    console.log("" + v1);



    //small amount, large ratioX and large ratioY ; capped
    // price = await e.price(3*(10**5), 2*(10**68), 6*(10**70), 3);
    v1 = "" + (await e.f1(bgN(3, 5), bgN(2, 68), bgN(6, 70), 3));
    console.log("1f");
    expect(await v1).to.equal("90000000");
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(1, 5), bgN(2, 55), bgN(1, 55), 3);
    console.log("" + bgN(1, 5));
    console.log("" + v1);
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(1, 5), bgN(7, 55), bgN(1, 55), 3);
    console.log("" + bgN(1, 5));
    console.log("" + v1);
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(1, 5), bgN(8, 55), bgN(1, 55), 3);
    console.log("" + bgN(1, 5));
    console.log("" + v1);

    //small amount, large ratioX and small ratioY ; capped
    // price = await e.price(7*(10**4), 2*(10**68), 9*(10**13), 3);
    v1 = "" + (await e.f1(bgN(7, 4), bgN(2, 68), bgN(9, 13), 3));
    console.log("1g");
    expect(await v1).to.equal("0");

    //small amount, small ratioX and large ratioY ; capped
    // price = await e.price(2*(10**3), 1*(10**3), 6*(10**63), 3);
    // price = ""+(await e.price(bgN(2, 3), bgN(1, 3),bgN(6, 63), 3));
    console.log("1h");
    // expect(await price).to.equal("4000000000000000000000000000000000000000000000000000000000000000");

    //  UN-CAPPED
    //small amount, small ratioX and small ratioY ; uncapped
    // price = await e.price(51, 233*(10**14), 14*(10**18), 5);
    v1 = "" + (await e.f1(51, bgN(233, 14), bgN(14, 18), 5));
    console.log("1i");
    expect(await v1).to.equal("30643");
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(1, 5), bgN(2, 5), bgN(1, 5), 5);
    console.log("" + bgN(1, 5));
    console.log("" + v1);
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(1, 4), bgN(1, 5), bgN(3, 5), 5);
    console.log("" + bgN(1, 4));
    console.log("" + v1);

    //large amount, large ratioX and large ratioY ; uncapped
    // price = await e.price(32*(10**53), 2*(10**60), 1*(10**60), 5);
    v1 = "" + (await e.f1(bgN(32, 53), bgN(2, 60), bgN(1, 60), 5));
    console.log("1j");
    expect(await v1).to.equal("1600000000000000000000000000000000000000000000000000000");

    v1 = "" + (await e.f1(bgN(32, 54), bgN(2, 60), bgN(1, 60), 5));
    console.log("1j2");
    expect(await v1).to.equal("16000000000000000000000000000000000000000000000000000000");
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(1, 50), bgN(2, 50), bgN(1, 50), 5);
    console.log("" + bgN(1, 50));
    console.log("" + v1);

    //large amount, small ratioX and small ratioY ; uncapped
    // price = await e.price(5*(10**37), 2*(10**13), 1*(10**15), 5);
    // price = ""+(await e.price(bgN(5, 37), bgN(2, 13),bgN(1, 15), 5));
    // console.log("1k");
    // expect(await price).to.equal("2500000000000000000000000000000000000000");
    // assert.equal(price, "2500000000000000000000000000000000000000", "1k failing, value received: " + price);

    //large amount, small ratioX and large ratioY ; uncapped
    // price = await e.price(5*(10**37), 2*(10**20), 1*(10**56), 5);
    // price = ""+(await e.price(bgN(5, 37), bgN(2, 20),bgN(1, 56), 5));
    // console.log("1l");
    // expect(await price).to.equal("25000000000000000000000000000000000000000000000000000000000000000000000000");
    // assert.equal(price, "25000000000000000000000000000000000000000000000000000000000000000000000000", "1l failing, value received: " + price);

    //large amount, large ratioX and small ratioY ; uncapped
    v1 = "" + (await e.f1(bgN(3, 51), bgN(2, 68), bgN(6, 20), 5));
    console.log("1m");
    expect(await v1).to.equal("9000");
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(1, 40), bgN(2, 40), bgN(1, 5), 5);
    console.log("" + bgN(1, 5));
    console.log("" + v1);
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(1, 40), bgN(2, 40), bgN(3, 5), 5);
    console.log("" + bgN(3, 5));
    console.log("" + v1);

    //small amount, large ratioX and large ratioY ; uncapped
    // price = await e.price(3*(10**5), 2*(10**68), 6*(10**70), 5);
    v1 = "" + (await e.f1(bgN(3, 5), bgN(2, 68), bgN(6, 70), 5));
    console.log("1n");
    expect(await v1).to.equal("90000000");
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(1, 4), bgN(2, 40), bgN(1, 40), 5);
    console.log("" + bgN(1, 4));
    console.log("" + v1);
    console.log("--------------e-------------");
    v1 = await e.f1(bgN(1, 4), bgN(2, 40), bgN(1, 40), 5);
    console.log("" + bgN(1, 4));
    console.log("" + v1);

    //small amount, large ratioX and small ratioY ; uncapped
    // price = await e.price(7*(10**4), 2*(10**68), 9*(10**13), 5);
    v1 = "" + (await e.f1(bgN(7, 4), bgN(2, 68), bgN(9, 13), 5));
    console.log("1o");
    expect(await v1).to.equal("0");
    // assert.equal(price, "0", "1o failing, value received: " + price);

    //small amount, small ratioX and large ratioY ; uncapped
    // price = await e.price(2*(10**3), 1*(10**3), 6*(10**63), 5);
    // price = ""+(await e.price(bgN(2, 3), bgN(1, 3),bgN(6, 63), 5));
    console.log("1p");
    // expect(await price).to.equal("12000000000000000000000000000000000000000000000000000000000000000");

    //no amount, small ratioX and small ratioY ; capped
    var v1 = await e.f1(0, 400345, 10004300, 3);
    console.log("1q");
    expect(await v1).to.equal(0);

  });

  /* compound(): can compound proportions correctly */
  xit("2. can run f2/f3", async () => {
    //proportion = 90%, small steps
    var v1 = "" + await e.f2(bgN(90, 16), 1);
    console.log("2a");
    expect(await v1).to.equal("900000000000000000");
    console.log("--------------e-------------");
    expect(await e.f2(bgN(90, 16), 2)).to.equal(bgN(81, 16));

    //proportion = 90%, no steps
    v1 = "" + await e.f2(bgN(90, 16), 0);
    console.log("2b");
    expect(await v1).to.equal("900000000000000000");

    //proportion = 90%, small steps
    v1 = "" + await e.f2(bgN(90, 16), 4);
    console.log("2c");
    expect(await v1).to.equal("656100000000000000");

    //proportion = 85%, moderate steps
    v1 = "" + await e.f2(bgN(85, 16), 7);
    console.log("2d");
    expect(await v1).to.equal("320577088281250000");

    //proportion = 44%, large steps
    v1 = "" + await e.f2(bgN(44, 16), 10);
    console.log("2e");
    expect(await v1).to.equal("271973609384181");

    //proportion = 63%, very large steps
    v1 = "" + await e.f2(bgN(63, 16), 17);
    console.log("2f");
    expect(await v1).to.equal("387962135065146");

    //proportion = 57%, max large steps
    v1 = "" + await e.f2(bgN(57, 16), 100);
    console.log("2g");
    expect(await v1).to.equal("1");

    //proportion = 0%, small steps
    v1 = "" + await e.f2(0, 30);
    console.log("2h");
    expect(await v1).to.equal("0");

    //proportion = 33%, no steps
    v1 = "" + await e.f2(bgN(33, 16), 0);
    console.log("2i");
    expect(await v1).to.equal("330000000000000000");
  });

  /* calculate_share_of_total(): can calculate proportion of a given amount(denominator -> 10**18) */
  xit("3. can run f4/f5/f6/f7", async () => {
    //small amount, target = 50%
    var v1 = "" + await e.f4(1000, bgN(5, 17));
    console.log("3a");
    expect(await v1).to.equal("500");

    //small amount, target = 0.1%
    v1 = "" + await e.f4(410000, bgN(1, 16));
    console.log("3b");
    expect(await v1).to.equal("4100");

    //large amount, target = 3%
    v1 = "" + await e.f4(bgN(1, 59), bgN(3, 16));
    console.log("3c");
    expect(await v1).to.equal("3000000000000000000000000000000000000000000000000000000000");


    //large amount, target = .0000000007%
    v1 = "" + await e.f4(bgN(9, 60), bgN(7, 6));
    console.log("3d");
    expect(await v1).to.equal("63000000000000000000000000000000000000000000000000");
    expect(await e.f4(bgN(9, 60), bgN(10, 16))).to.equal(bgN(9, 59));

    //large amount, target = .0000000000003%
    v1 = "" + await e.f4(bgN(5, 18), bgN(3, 3));
    console.log("3e");
    expect(await v1).to.equal("15000");

    //large amount, target = 0%
    v1 = "" + await e.f4(bgN(5, 3), bgN(3, 3));
    console.log("3f");
    expect(await v1).to.equal("0");

    //large amount, target = 100%
    v1 = "" + await e.f4(bgN(5, 3), bgN(1, 18));
    console.log("3g");
    expect(await v1).to.equal("5000");

    //no amount, target = 50%
    var v1 = "" + await e.f4(0, bgN(5, 17));
    console.log("3h");
    expect(await v1).to.equal("0");

  });






  /* calculate_min_end_or_spend(): can calculate minimum amount of end or spend for contract entry */
  xit("4. can run f8", async () => {
    // 20000000000, 2: from gas price, 1: from block_reduction_proportion_ratios

    //target = 1000END gas = 20Gwei, anchor = 20Gwei
    var v1 = "" + await e.f8([2, 1000, 20000000000, 20000000000, 1000, bgN(1, 18), 3]);
    console.log("4a");
    expect(await v1).to.equal("1000");

    //target = 500END gas = 10Gwei, anchor = 20Gwei
    v1 = "" + await e.f8([2, 1000, 10000000000, 20000000000, 1000, bgN(1, 18), 3]);
    console.log("4b");
    expect(await v1).to.equal("500");

    //target = 1END gas = .002Gwei, anchor = 20Gwei
    v1 = "" + await e.f8([2, 1000, 2000000, 20000000000, 1000, bgN(1, 18), 3]);
    console.log("4c");
    expect(await v1).to.equal("1");

    //target = 10000END gas = 200Gwei, anchor = 20Gwei
    v1 = "" + await e.f8([2, 1000, 200000000000, 20000000000, 1000, bgN(1, 18), 3]);
    console.log("4d");
    expect(await v1).to.equal("10000");


    //target = 1000SPEND rp = 100%
    v1 = "" + await e.f8([1, 1000, 200000000000, 20000000000, 1000, bgN(1, 18), 5]);
    console.log("4e");
    expect(await v1).to.equal("1000");

    //target = 500SPEND rp = 50%
    v1 = "" + await e.f8([1, 1000, 200000000000, 20000000000, 1000, bgN(5, 17), 5]);
    console.log("4f");k
    expect(await v1).to.equal("500");

    //target = 10SPEND rp = 0.1%
    v1 = "" + await e.f8([1, 1000, 200000000000, 20000000000, 10000, bgN(1, 15), 5]);
    console.log("4g");
    expect(await v1).to.equal("10");

    //target = 400SPEND rp = 40%
    v1 = "" + await e.f8([1, 1000, 200000000000, 20000000000, 1000, bgN(4, 17), 5]);
    console.log("4h");
    expect(await v1).to.equal("400");

    //target = 1SPEND rp = 0.1%
    v1 = "" + await e.f8([1, 1000, 200000000000, 20000000000, 1000, bgN(1, 15), 5]);
    console.log("4i");
    expect(await v1).to.equal("1");

  });

  /* calculate_max_consumable_gas(): can calculate the maximum amount of consumable gas at paid gas price */
  xit("5. can run f9", async () => {
    // gas_reduction_proportion: 50%; tx_gas_limit: 1,000,000; tx_gas_anchor_price: 100,000; tx_gas_price: 100,000; tx_gas_lower_limit: 1
    var v1 = "" + await e.f9(bgN(50, 16), 1000000, 100000, 100000, 1);
    console.log("5a");
    expect(await v1).to.equal("500000");

    // gas_reduction_proportion: 50%; tx_gas_limit: 1,000,000; tx_gas_anchor_price: 100,000; tx_gas_price: 50,000; tx_gas_lower_limit: 1
    v1 = "" + await e.f9(bgN(50, 16), 1000000, 100000, 50000, 1);
    console.log("5b");
    expect(await v1).to.equal("750000");

    // gas_reduction_proportion: 50%; tx_gas_limit: 1,000,000; tx_gas_anchor_price: 100,000; tx_gas_price: 200,000; tx_gas_lower_limit: 1
    v1 = "" + await e.f9(bgN(50, 16), 1000000, 100000, 200000, 1);
    console.log("5c");
    expect(await v1).to.equal("250000");

    // gas_reduction_proportion: 50%; tx_gas_limit: 1,000,000; tx_gas_anchor_price: 100,000; tx_gas_price: 400,000; tx_gas_lower_limit: 1
    v1 = "" + await e.f9(bgN(50, 16), 1000000, 100000, 400000, 1);
    console.log("5d");
    expect(await v1).to.equal("62500");

    // gas_reduction_proportion: 50%; tx_gas_limit: 10,000,000; tx_gas_anchor_price: 100,000; tx_gas_price: 800,000; tx_gas_lower_limit: 1
    v1 = "" + await e.f9(bgN(50, 16), 10000000, 100000, 800000, 1);
    console.log("5e");
    expect(await v1).to.equal("39062");

    // gas_reduction_proportion: 50%; tx_gas_limit: 1000; tx_gas_anchor_price: 1; tx_gas_price: 2; tx_gas_lower_limit: 1
    v1 = "" + await e.f9(bgN(50, 16), 1000, 1, 2, 1);
    console.log("5e2");
    expect(await v1).to.equal("250");

    // gas_reduction_proportion: 50%; tx_gas_limit: 1000; tx_gas_anchor_price: 0; tx_gas_price: 0; tx_gas_lower_limit: 1
    v1 = "" + await e.f9(bgN(50, 16), 1000, 0, 0, 1);
    console.log("5f");
    expect(await v1).to.equal("1000");

    // gas_reduction_proportion: 50%; tx_gas_limit: 1000; tx_gas_anchor_price: 100; tx_gas_price: 50; tx_gas_lower_limit: 900
    v1 = "" + await e.f9(bgN(50, 16), 1000, 100, 50, 900);
    console.log("5g");
    expect(await v1).to.equal("900");

    // gas_reduction_proportion: 50%; tx_gas_limit: 10000; tx_gas_anchor_price: 0; tx_gas_price: 50; tx_gas_lower_limit: 9000
    v1 = "" + await e.f9(bgN(50, 16), 10000, 0, 50, 9000);
    console.log("5h");
    expect(await v1).to.equal("10000");

    // gas_reduction_proportion: 50%; tx_gas_limit: 0; tx_gas_anchor_price: 3; tx_gas_price: 50; tx_gas_lower_limit: 1
    v1 = "" + await e.f9(bgN(50, 16), 0, 3, 50, 1);
    console.log("5i");
    expect(await v1).to.equal("0");

  });

  /* calculate_factor(): can calculate factor for supply of token minted in a given block */
  xit("6. can run f10", async () => {
    //reduction_proportion = 50%; total_minted_for_current_block = 3,000,000; max_block_buyable_amount = 4,000,000
    var v1 = "" + await e.f10(bgN(50, 16), 3000000, 4000000);
    console.log("6a");
    expect(await v1).to.equal("0");

    //reduction_proportion = 50%; total_minted_for_current_block = 5,000,000; max_block_buyable_amount = 4,000,000
    v1 = "" + await e.f10(bgN(50, 16), 5000000, 4000000);
    console.log("6b");
    expect(await v1).to.equal("2");
    console.log("-----------e-------------");
    console.log("" + await e.f10(bgN(51, 16), 40000, 40000));
    console.log("-----------e-------------");
    console.log("" + await e.f10(bgN(50, 16), 1, 1));
    console.log("-----------e-------------");
    console.log("" + await e.f10(bgN(50, 16), 1, 0));
    console.log("-----------e-------------");
    console.log("" + await e.f10(bgN(50, 16), 0, 1));
    console.log("-----------e-------------");
    console.log("" + await e.f10(bgN(30, 16), 1, 1));

    //reduction_proportion = 50%; total_minted_for_current_block = 52,000,000; max_block_buyable_amount = 4,000,000
    v1 = "" + await e.f10(bgN(50, 16), 52000000, 4000000);
    console.log("6c");
    expect(await v1).to.equal("26");

    //reduction_proportion = 50%; total_minted_for_current_block = 0; max_block_buyable_amount = 4,000,000
    v1 = "" + await e.f10(bgN(50, 16), 0, 4000000);
    console.log("6d");
    expect(await v1).to.equal("0");

    //reduction_proportion = 50%; total_minted_for_current_block = 13,000,000; max_block_buyable_amount = 3,000,000
    v1 = "" + await e.f10(bgN(50, 16), 13000000, 3000000);
    console.log("6e");
    expect(await v1).to.equal("8");

    //reduction_proportion = 30%; total_minted_for_current_block = 13,000,000; max_block_buyable_amount = 3,000,000
    v1 = "" + await e.f10(bgN(30, 16), 13000000, 3000000);
    console.log("6f");
    expect(await v1).to.equal("12");

    //reduction_proportion = 20%; total_minted_for_current_block = large; max_block_buyable_amount = large
    v1 = "" + await e.f10(bgN(20, 16), bgN(30, 46), bgN(30, 45));
    console.log("6g");
    expect(await v1).to.equal("50");
  });






  /* get_active_block_limit(): can calculate active block limit for minting spend using maturity limit */
  xit("7. can run f12", async () => {
    //block_limit = 100,000; mint_limit = 10,000; l2 = 1,000,000; maturity_limit = 2,000,000
    var v1 = "" + await e.f12(100000, 10000, 1000000, 2000000);
    console.log("7a");
    expect(await v1).to.equal("50000");
    console.log("--------------e--------------");
    console.log("" + await e.f12(100000, 0, 1000000, 2000000));
    console.log("--------------e--------------");
    console.log("" + await e.f12(100000, 10000, 0, 2000000));
    console.log("--------------e--------------");
    console.log("" + await e.f12(0, 10000, 1000000, 2000000));
    console.log("--------------e--------------");
    console.log("" + await e.f12(100000, 0, 1000000, 2000000));

    //block_limit = 100,000; mint_limit = 10,000; l2 = 1,000,000; maturity_limit = 4,000,000
    var v1 = "" + await e.f12(100000, 10000, 1000000, 4000000);
    console.log("7b");
    expect(await v1).to.equal("25000");

    //block_limit = 100,000; mint_limit = 10,000; l2 = 1,000,000; maturity_limit = 10,000,000
    var v1 = "" + await e.f12(100000, 10000, 1000000, 10000000);
    console.log("7c");
    expect(await v1).to.equal("10000");

    //block_limit = 100,000; mint_limit = 10,000; l2 = 100,000; maturity_limit = 10,000,000
    //active_block_limit is less than the mint_limit
    var v1 = "" + await e.f12(100000, 10000, 100000, 10000000);
    console.log("7d");
    expect(await v1).to.equal("10000");

    //100e54 => 100*(10**54)
    //LARGE l2 && LARGE block_limit
    //block_limit = 100e54 ; mint_limit = 10e54; l2 = 1000e54; maturity_limit = 2000e54
    var v1 = "" + await e.f12(bgN(100, 54), bgN(10, 54), bgN(1000, 54), bgN(2000, 54));
    console.log("7e");
    expect(await v1).to.equal("" + bgN(50, 54));

    //LARGE l2
    //block_limit = 100e20; mint_limit = 1e20; l2 = 1000e54; maturity_limit = 2000e54
    var v1 = "" + await e.f12(bgN(100, 20), bgN(1, 20), bgN(1000, 54), bgN(2000, 54));
    console.log("7f");
    expect(await v1).to.equal("" + bgN(50, 20));

    //LARGE block_limit
    //block_limit = 100e60; mint_limit = 1e20; l2 = 1000e63; maturity_limit = 2000e63
    var v1 = "" + await e.f12(bgN(100, 60), bgN(1, 20), bgN(1000, 63), bgN(2000, 63));
    console.log("7g");
    expect(await v1).to.equal("" + bgN(50, 60));


    //block_limit = 100,000; mint_limit = 10,000; l2 = 1,000,000; maturity_limit = 0
    var v1 = "" + await e.f12(100000, 10000, 1000000, 0);
    console.log("7h");
    expect(await v1).to.equal("100000");

    //block_limit = 100,000; mint_limit = 10,000; l2 = 2,000,000; maturity_limit = 1,000,000
    var v1 = "" + await e.f12(100000, 10000, 2000000, 1000000);
    console.log("7i");
    expect(await v1).to.equal("100000");

  });

  /* calculate_spread_factor_amount(): can calculate the spread factor amount while minting spend between multiple factors */
  xit("8. can run f13", async () => {
    //internal_block_halfing_proportion = 50%; total_minted_for_current_block = 200,000; block_limit = 100,000; factor_amount = 5,000
    var v1 = "" + await e.f13(bgN(50, 16), 200000, 100000, 5000);
    console.log("8a");
    expect(await v1).to.equal("5000");

    //internal_block_halfing_proportion = 50%; total_minted_for_current_block = 250,000; block_limit = 100,000; factor_amount = 10,000
    var v1 = "" + await e.f13(bgN(50, 16), 250000, 100000, 10000);
    console.log("8b");
    expect(await v1).to.equal("7500");

    //internal_block_halfing_proportion = 50%; total_minted_for_current_block = 275,000; block_limit = 100,000; factor_amount = 10,000
    var v1 = "" + await e.f13(bgN(50, 16), 275000, 100000, 10000);
    console.log("8c");
    expect(await v1).to.equal("6250");

    //internal_block_halfing_proportion = 50%; total_minted_for_current_block = 225,000; block_limit = 100,000; factor_amount = 1000
    var v1 = "" + await e.f13(bgN(50, 16), 225000, 100000, 1000);
    console.log("8d");
    expect(await v1).to.equal("875");


    //100e54 => 100*(10**54)
    //LARGE total_minted_for_current_block && LARGE block_limit && LARGE factor_amount
    //internal_block_halfing_proportion = 50%; total_minted_for_current_block = 250e44; block_limit = 100e44; factor_amount = 10e44
    var v1 = "" + await e.f13(bgN(50, 16), bgN(250, 44), bgN(100, 44), bgN(10, 44));
    console.log("8e");
    expect(await v1).to.equal("" + bgN(75, 43));

    //LARGE total_minted_for_current_block && LARGE block_limit 
    //internal_block_halfing_proportion = 50%; total_minted_for_current_block = 250e44; block_limit = 100e44; factor_amount = 10e20
    var v1 = "" + await e.f13(bgN(50, 16), bgN(250, 44), bgN(100, 44), bgN(10, 20));
    console.log("8f");
    expect(await v1).to.equal("" + bgN(75, 19));
  });

  /* calculate_new_increased_active_block_limit_reduction_proportion(): calculate new block_limit_reduction_proportion if no mints took place in 1 or multiple blocks preceding current block */
  xit("9. can run f14", async () => {
    //numerator -> active_block_limit_reduction_proportion * 1e18
    //power -> block_number - active_mint_block
    //numerator = 81e16 * 1e18; power = 1; block_reset_limit = 100; block_limit_reduction_proportion = 90e16
    var v1 = "" + await e.f14([bgN(81, 34), 1, 100, bgN(90, 16)]);
    console.log("9a");
    expect(await v1).to.equal("" + bgN(90, 16));


    //numerator = 72.9e16 * 1e18; power = 2; block_reset_limit = 100; block_limit_reduction_proportion = 90e16
    var v1 = "" + await e.f14([bgN(729, 33), 2, 100, bgN(90, 16)]);
    console.log("9b");
    expect(await v1).to.equal("" + bgN(90, 16));


    //numerator = 65.61e16 * 1e18; power = 4; block_reset_limit = 100; block_limit_reduction_proportion = 90e16
    var v1 = "" + await e.f14([bgN(6561, 32), 4, 100, bgN(90, 16)]);
    console.log("9c");
    expect(await v1).to.equal("" + bgN(100, 16));


    //numerator = 65.61e16 * 1e18; power = 4; block_reset_limit = 3; block_limit_reduction_proportion = 90e16
    var v1 = "" + await e.f14([bgN(6561, 32), 4, 3, bgN(90, 16)]);
    console.log("9d");
    expect(await v1).to.equal("" + bgN(90, 16));


    //numerator = 81e16 * 1e18; power = 3; block_reset_limit = 100; block_limit_reduction_proportion = 90e16
    var v1 = "" + await e.f14([bgN(81, 34), 3, 100, bgN(90, 16)]);
    console.log("9e");
    expect(await v1).to.equal("" + bgN(100, 16));
  });


  //
  //
  //
  //
  //
  //
  //-----------------------~~~~~~CHECKER-FUNCTIONS~~~~~~-------------------
  /* check_if_main_contract_votable_required(): check if sender can create object type if main contract votable required */
  xit("10. can run f15", async () => {
    //object_type = 17; can_sender_vote_in_main_contract = false;
    console.log("10a");
    await expect(e.f15(17, false)).to.be.reverted;

    //object_type = 18; can_sender_vote_in_main_contract = false;
    console.log("10b");
    await expect(e.f15(18, false)).to.be.reverted;

    //object_type = 24; can_sender_vote_in_main_contract = false;
    console.log("10c");
    await expect(e.f15(24, false)).to.be.reverted;

    //object_type = 36; can_sender_vote_in_main_contract = false;
    await expect(e.f15(36, false)).to.be.reverted;


    //object_type = 17; can_sender_vote_in_main_contract = true;
    console.log("10d");
    await expect(e.f15(17, true)).to.be.ok;

    //object_type = 18; can_sender_vote_in_main_contract = true;
    console.log("10e");
    await expect(e.f15(18, true)).to.be.ok;

    //object_type = 24; can_sender_vote_in_main_contract = true;
    console.log("10f");
    await expect(e.f15(24, true)).to.be.ok;

    //object_type = 36; can_sender_vote_in_main_contract = false;
    await expect(e.f15(36, true)).to.be.ok;


    //object_type = 0; can_sender_vote_in_main_contract = true;
    console.log("10g");
    await expect(e.f15(0, true)).to.be.ok;

    //object_type = 100000; can_sender_vote_in_main_contract = true;
    console.log("10h");
    await expect(e.f15(100000, false)).to.be.ok;
  });

  /* is_e52_work(): checks if passed action is a moderation action thats routed to the e52 contract */
  xit("11. can run f16", async () => {
    //action = 1
    var v = await e.f16(1);
    console.log("11a");
    expect(await v).to.equal(true);

    //action = 2
    var v = await e.f16(2);
    console.log("11b");
    expect(await v).to.equal(true);

    //action = 4
    var v = await e.f16(4);
    console.log("11c");
    expect(await v).to.equal(true);

    //action = 5
    var v = await e.f16(5);
    console.log("11d");
    expect(await v).to.equal(true);

    //action = 10
    var v = await e.f16(10);
    console.log("11e");
    expect(await v).to.equal(true);

    //action = 12
    var v = await e.f16(12);
    console.log("11f");
    expect(await v).to.equal(true);

    //action = 13
    var v = await e.f16(13);
    console.log("11g");
    expect(await v).to.equal(true);

    //action = 170
    var v = await e.f16(170);
    console.log("11h");
    expect(await v).to.equal(false);

    //action = 0
    var v = await e.f16(0);
    console.log("11i");
    expect(await v).to.equal(false);

    //action = 16
    var v = await e.f16(16);
    console.log("11j");
    expect(await v).to.equal(true);

    //action = 17
    var v = await e.f16(17);
    console.log("11k");
    expect(await v).to.equal(true);

  });

  /* get_route(): gets the route id used in re-routing transactions based on their action id */
  xit("12. can run f17", async () => {
    //general_action = 20000 , action = 1
    var v = await e.f17([20000, 1]);
    console.log("12a");
    expect(await v).to.equal(552);

    //general_action = 20000 , action = 4
    var v = await e.f17([20000, 4]);
    console.log("12b");
    expect(await v).to.equal(552);

    //general_action = 20000 , action = 11
    var v = await e.f17([20000, 11]);
    console.log("12c");
    expect(await v).to.equal(65);

    //general_action = 20000 , action = 7
    console.log("12d");
    await expect(e.f17([20000, 7])).to.be.reverted;


    //general_action = 30000 , action = 2
    var v = await e.f17([30000, 2]);
    console.log("12e");
    expect(await v).to.equal(65);

    //general_action = 30000 , action = 12
    var v = await e.f17([30000, 12]);
    console.log("12f");
    expect(await v).to.equal(65);

    //general_action = 30000 , action = 5
    var v = await e.f17([30000, 5]);
    console.log("12g");
    expect(await v).to.equal(75);

    //general_action = 30000 , action = 14
    var v = await e.f17([30000, 14]);
    console.log("12h");
    expect(await v).to.equal(752);

    //general_action = 30000 , action = 15
    var v = await e.f17([30000, 15]);
    console.log("12i");
    expect(await v).to.equal(752);

    //general_action = 30000 , action = 9
    var v = await e.f17([30000, 9]);
    console.log("12j");
    expect(await v).to.equal(85);

    //general_action = 30000 , action = 1
    var v = await e.f17([30000, 1]);
    console.log("12k");
    expect(await v).to.equal(852);

    //general_action = 30000 , action = 1
    var v = await e.f17([30000, 6]);
    console.log("12l");
    expect(await v).to.equal(852);



    //general_action = 775 , action = 1
    console.log("12m");
    await expect(e.f17([775, 1])).to.be.reverted;

    //general_action = 20000 , action = 50
    console.log("12n");
    await expect(e.f17([20000, 50])).to.be.reverted;

    //general_action = 30000 , action = 50
    console.log("12o");
    await expect(e.f17([30000, 50])).to.be.reverted;



    //general_action = 30000 , action = 17
    var v = await e.f17([30000, 17]);
    console.log("12p");
    expect(await v).to.equal(85);

    //general_action = 20000 , action = 14
    var v = await e.f17([20000, 14]);
    console.log("12q");
    expect(await v).to.equal(75);

    //general_action = 20000 , action = 15
    var v = await e.f17([20000, 15]);
    console.log("12r");
    expect(await v).to.equal(75);


    //general_action = 30000 , action = 18
    var v = await e.f17([30000, 18]);
    console.log("12s");
    expect(await v).to.equal(752);

  });






  /* get_multi_stack_or_real_ids(): returns a list of ids using their id types: stack, real or sender_account_id */
  xit("13. can run f18", async () => {
    // real = 23 , stack = 35 , sender_account = 53
    //real_ids = 2 , stack_ids = 0 , sender_account_ids = 0
    var v1 = await e.f18([200, 1], [23, 23], [0], 35);
    console.log("13a");
    var v2 = [200, 1];
    for (let j = 0; j < v2.length; j++) { expect(await v1[j]).to.equal(v2[j]); }

    // real = 23 , stack = 35 , sender_account = 53
    //real_ids = 0 , stack_ids = 2 , sender_account_ids = 0 , sender_acc_id = 35
    var v1 = await e.f18([0, 1], [35, 35], [36, 37], 35);
    console.log("13b");
    var v2 = [36, 37];
    for (let j = 0; j < v2.length; j++) {
      expect(await v1[j]).to.equal(v2[j]);
    }

    // real = 23 , stack = 35 , sender_account = 53
    //real_ids = 0 , stack_ids = 0 , sender_account_ids = 2 , sender_acc_id = 35
    var v1 = await e.f18([200, 1], [53, 53], [36, 37], 35);
    console.log("13c");
    var v2 = [35, 35];
    for (let j = 0; j < v2.length; j++) {
      expect(await v1[j]).to.equal(v2[j]);
    }

    // real = 23 , stack = 35 , sender_account = 53
    //real_ids = 1 , stack_ids = 1 , sender_account_ids = 0 , sender_acc_id = 35
    var v1 = await e.f18([200, 1], [23, 35], [36, 37], 35);
    console.log("13d");
    var v2 = [200, 37];
    for (let j = 0; j < v2.length; j++) {
      expect(await v1[j]).to.equal(v2[j]);
    }

    // real = 23 , stack = 35 , sender_account = 53
    //real_ids = 0 , stack_ids = 1 , sender_account_ids = 1 , sender_acc_id = 35
    var v1 = await e.f18([0, 1], [35, 53], [36, 37], 35);
    console.log("13e");
    var v2 = [36, 35];
    for (let j = 0; j < v2.length; j++) {
      expect(await v1[j]).to.equal(v2[j]);
    }

    // real = 23 , stack = 35 , sender_account = 53
    //real_ids = 1 , stack_ids = 0 , sender_account_ids = 1 , sender_acc_id = 35
    var v1 = await e.f18([200, 1], [23, 53], [36, 37], 35);
    console.log("13f");
    var v2 = [200, 35];
    for (let j = 0; j < v2.length; j++) {
      expect(await v1[j]).to.equal(v2[j]);
    }



    // real = 23 , stack = 35 , sender_account = 53
    //real_ids = 0 , stack_ids = 1 , sender_account_ids = 1 , sender_acc_id = 35
    //out of bounds stack id
    console.log("13g");
    await expect(e.f18([100, 1], [35, 53], [36, 37], 35)).to.be.reverted;

    // real = 23 , stack = 35 , sender_account = 53
    //real_ids = 0 , stack_ids = 1 , sender_account_ids = 1 , sender_acc_id = 35
    //empty id_types
    console.log("13h");
    await expect(e.f18([200, 1], [], [36, 37], 35)).to.be.reverted;

    // real = 23 , stack = 35 , sender_account = 53
    //real_ids = 0 , stack_ids = 1 , sender_account_ids = 1 , sender_acc_id = 35
    //incorrect id passed
    console.log("13i");
    await expect(e.f18([0, 1], [23, 1000], [36, 37], 35)).to.be.reverted;

    // real = 23 , stack = 35 , sender_account = 53
    //real_ids = 0 , stack_ids = 1 , sender_account_ids = 1 , sender_acc_id = 35
    //incorrect sender_acc_id passed
    console.log("13j");
    await expect(e.f18([0, 1], [23, 53], [36, 37], 0)).to.be.reverted;




    // real = 23 , stack = 35 , sender_account = 53, block_number = 65, timestamp = 72
    //real_ids = 0 , stack_ids = 2 , sender_account_ids = 0 , sender_acc_id = 35
    var b = parseInt(await e.get_block());
    var t = parseInt(await e.time());
    var v1 = await e.f18([0, 0], [65, 72], [36, 37], 35);
    console.log("13k");
    var v2 = [b, t];
    for (let j = 0; j < v2.length; j++) {
      expect(await v1[j]).to.equal(v2[j]);
    }



    // real = 23 , stack = 35 , sender_account = 53, block_number = 65, timestamp = 72
    //real_ids = 0 , stack_ids = 2 , sender_account_ids = 0 , sender_acc_id = 35
    var b = parseInt(await e.get_block());
    var t = parseInt(await e.time());
    var v1 = await e.f18([10, 100], [65, 72], [36, 37], 35);
    console.log("13l");
    var v2 = [b+10, t+100];
    for (let j = 0; j < v2.length; j++) {
      expect(await v1[j]).to.equal(v2[j]);
    }



    // real = 23 , stack = 35 , sender_account = 53, block_number = 65, timestamp = 72
    //real_ids = 0 , stack_ids = 2 , sender_account_ids = 0 , sender_acc_id = 35
    var b = parseInt(await e.get_block());
    var t = parseInt(await e.time());
    var v1 = await e.f18([106271, 10078777], [65, 72], [36, 37], 35);
    console.log("13m");
    var v2 = [b+106271, t+10078777];
    for (let j = 0; j < v2.length; j++) {
      expect(await v1[j]).to.equal(v2[j]);
    }

  });

  /* set_up_temp_transaction_data_group(): returns 2d array of data used between transactions*/
  xit("14. can run f20", async () => {
    // entity_contructor @pos : 1  
    var v1 = [[[10000]], [[20000, 11]], [[20000, 11]]];
    var v2 = await e.f20(v1, 135);
    console.log("14a");
    var v3 = [136,0,0,  0, 65, 65, 0, 0, 0, 0, 0, 0];
    for (let j = 0; j < v3.length; j++) {
      expect(await v2[j]).to.equal(v3[j]);
    }

    // entity_contructor @pos : 1, 3
    var v1 = [[[10000]], [[20000, 11]], [[10000]]];
    var v2 = await e.f20(v1, 135);
    console.log("14b");
    var v3 = [136, 0, 137,  0, 65, 0,   0, 0, 0];
    for (let j = 0; j < v3.length; j++) {
      expect(await v2[j]).to.equal(v3[j]);
    }

    // entity_contructor @pos : 1, 2, 3 
    var v1 = [[[10000]], [[10000]], [[10000]]];
    var v2 = await e.f20(v1, 135);
    console.log("14c");
    var v3 = [136, 137, 138,  0, 0, 0, 0, 0, 0];
    for (let j = 0; j < v3.length; j++) {
      expect(await v2[j]).to.equal(v3[j]);
    }
    console.log("-------------e----------------");
    var v1 = [[[10000]], [[10000]], [[10000]]];
    var v2 = await e.f20(v1, 1305);
    var v3 = [1306, 1307, 1308,   0, 0, 0, 0, 0, 0];
    for (let j = 0; j < v3.length; j++) {
      expect(await v2[j]).to.equal(v3[j]);
    }

    // entity_contructor @pos : none
    var v1 = [ [[30000, 2]], [[30000, 12]], [[30000, 12]] ];
    var v2 = await e.f20(v1, 135);
    console.log("14d");
    var v3 = [0, 0, 0,  65, 65, 65, 0, 0, 0];
    for (let j = 0; j < v3.length; j++) {
      expect(await v2[j]).to.equal(v3[j]);
    }

    // entity_contructor @pos : 1, 2
    var v1 = [ [[10000]], [[10000]] ];
    console.log("14e");
    var v2 = await e.f20(v1, 2000);
    var v3 = [2001, 2002,  0, 0, 0, 0];
    for (let j = 0; j < v3.length; j++) {
      expect(await v2[j]).to.equal(v3[j]);
    }
  });

  /* get_primary_secondary_target_data(): returns 2d array of data used in moderator actions */
  xit("15. can run f21", async () => {
    // action = 23 , only target_ids recorded, 1 of 5 arrays used
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [20000, 23],
        [35, 45, 55, 65],
        [23, 23, 23, 23]
      ]
    ];
    var val = await e.f21(v1/* temp_transaction_data_group */, 400, _ints, [[]], [[]]);
    console.log("15a");
    var exp_vals = [35, 45, 55, 65];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // action = 7 , only target_ids && secondary_target_ids recorded, 2 of 5 arrays used
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [20000, 7],
        [35, 45, 55, 65],
        [23, 23, 23, 23],

        [75, 85, 95, 105],
        [23, 23, 23, 53]
      ]
    ];
    var val = await e.f21(v1/* temp_transaction_data_group */, 400, _ints, [[]], [[]]);
    console.log("15b");
    var exp_vals = [35, 45, 55, 65, 75, 85, 95, 400];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // action = 4 , only target_ids && secondary_target_ids recorded, 2 of 5 arrays used
    var v1/* temp_transaction_data_group */ = [[0, 0, 14, 0], [], []];
    var _ints = [
      [/* t0 */
        [20000, 4],
        [35, 45, 55, 65],
        [23, 23, 23, 23],

        [75, 2, 95, 105],
        [23, 35, 23, 53]
      ]
    ];
    var val = await e.f21(v1/* temp_transaction_data_group */, 400, _ints, [[]], [[]]);
    console.log("15c");
    var exp_vals = [35, 45, 55, 65, 75, 14, 95, 400];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // action = 2 , only target_ids && secondary_target_ids && new_account_time_limits recorded, 3 of 5 arrays used
    var v1/* temp_transaction_data_group */ = [[0, 0, 14, 0], [], []];
    var _ints = [
      [/* t0 */
        [20000, 2],
        [35, 45, 55, 65],
        [23, 23, 23, 23],

        [75, 2, 95, 105],
        [23, 35, 23, 53],
        [23, 44, 22, 53]
      ]
    ];
    var val = await e.f21(v1/* temp_transaction_data_group */, 400, _ints, [[]], [[]]);
    console.log("15d");
    var exp_vals = [35, 45, 55, 65, 75, 14, 95, 400, 23, 44, 22, 53];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // action = 3 , only target_ids recorded, 3 of 5 arrays used
    var v1/* temp_transaction_data_group */ = [[0, 0, 14, 0], [], []];
    var _ints = [
      [/* t0 */
        [20000, 3],
        [35, 45, 55, 65],
        [23, 23, 23, 23],

        [2, 3, 4, 5],/* target array */
        [75, 2, 95, 105],/* target array item */
        [23, 35, 23, 53],/* new_items */
        [23, 23, 23, 23]/* new_item_types */
      ]
    ];
    var val = await e.f21(v1/* temp_transaction_data_group */, 400, _ints, [[]], [[]]);
    console.log("15e");
    var exp_vals = [35, 45, 55, 65,  2, 3, 4, 5,  75, 2, 95, 105,  23, 35, 23, 53];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // action = 11 , only target_ids recorded,
    var v1/* temp_transaction_data_group */ = [[0, 0, 14, 0], [], []];
    var _ints = [
      [/* t0 */
        [20000, 11],
        [35, 45, 55, 65],
        [23, 23, 23, 23],

        [75, 2, 95, 105],
        [23, 35, 23, 53],

        [88, 99, 3000, 3],/* new_items */
        [23, 23, 23, 23]/* new_item_types */
      ]
    ];
    var val = await e.f21(v1/* temp_transaction_data_group */, 400, _ints, [[]], [[]]);
    console.log("15f");
    var exp_vals = [35, 45, 55, 65, 75, 2, 95, 105, 23, 35, 23, 53, 88, 99, 3000, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // action = 13 , only target_ids recorded,
    var v1/* temp_transaction_data_group */ = [[0, 0, 14, 0], [], []];
    var _ints = [
      [/* t0 */
        [20000, 13],
        [35, 45, 55, 65],
        [23, 23, 23, 23],

        [75, 2, 95, 105],
        [23, 35, 23, 53],
        [88, 99, 3000, 3]
      ]
    ];
    var val = await e.f21(v1/* temp_transaction_data_group */, 400, _ints, [[]], [[]]);
    console.log("15g");
    var exp_vals = [35, 45, 55, 65, 75, 2, 95, 105, 23, 35, 23, 53];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // action = 14 , only target_ids recorded, 
    var v1/* temp_transaction_data_group */ = [[0, 0, 14, 0], [], []];
    var _ints = [
      [/* t0 */
        [20000, 14],
        [35, 45, 55, 65],
        [23, 23, 23, 23],

        [75, 2, 95, 105],
        [23, 35, 23, 53],

        [88, 99, 3000, 3],/* new_items */
        [23, 23, 23, 23]/* new_item_types */
      ]
    ];
    var val = await e.f21(v1/* temp_transaction_data_group */, 400, _ints, [[]], [[]]);
    console.log("15h");
    var exp_vals = [35, 45, 55, 65,   75, 2, 95, 105,  23, 35, 23, 53,  88, 99, 3000, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // action = 15 , only target_ids recorded,
    var v1/* temp_transaction_data_group */ = [[0, 0, 14, 0], [], []];
    var _ints = [
      [/* t0 */
        [20000, 15],
        [35, 405, 55, 65],
        [23, 23, 23, 23],

        [75, 2, 95, 105],
        [23, 35, 23, 53],

        [88, 99, 4949, 3],/* new_items */
        [23, 23, 23, 23]/* new_item_types */
      ]
    ];
    var val = await e.f21(v1/* temp_transaction_data_group */, 400, _ints, [[]], [[]]);
    console.log("15i");
    var exp_vals = [35, 405, 55, 65,   75, 2, 95, 105,  23, 35, 23, 53,  88, 99, 4949, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // action = 17 , only target_ids && secondary_target_ids && new_block_account_time_limits recorded, 3 of 5 arrays used
    var v1/* temp_transaction_data_group */ = [[0, 0, 104, 0], [], []];
    var _ints = [
      [/* t0 */
        [20000, 17],
        [35, 45, 55, 605],
        [23, 23, 23, 23],

        [75, 2, 95, 105],
        [23, 35, 23, 53],

        [23, 44, 22, 503]
      ]
    ];
    var val = await e.f21(v1/* temp_transaction_data_group */, 400, _ints, [[]], [[]]);
    console.log("15j");
    var exp_vals = [35, 45, 55, 605, 75, 104, 95, 400, 23, 44, 22, 503];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

  });






  /* run_transfers_setup(): returns 2 2d arrays of data used in token transaction actions */
  xit("16. can run f22", async () => {
    // action = 1
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var v2/* target_id_data */ = [[23, 45, 56], [33, 400, 500], [], [], []];
    var _ints = [
      [/* t0 */
        [30000, 1],
        [35, 45, 55],
        [23, 23, 23],

        [34, 45, 56],
        [111, 345, 445],
        [200, 300, 400],
        [0, 2, 0]
      ]
    ];
    var val = await e.f22(v1/* temp_transaction_data_group */, v2/* target_id_data */, 400, _ints, [[]], [[]]);
    console.log("16a");
    var exp_vals = [23, 45, 56, 200, 300, 400, 33, 400, 500, 0, 2, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    // action = 6
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var v2/* target_id_data */ = [[23, 45, 56], [33, 400, 500], [], [], []];
    var _ints = [
      [/* t0 */
        [30000, 6],
        [35, 45, 55],
        [23, 23, 23],

        [34, 45, 56],
        [111, 345, 445],
        [200, 300, 400],
        [176, 303, 100],
        [400, 500, 4]
      ]
    ];
    var val = await e.f22(v1/* temp_transaction_data_group */, v2/* target_id_data */, 400, _ints, [[]], [[]]);
    console.log("16b");
    var exp_vals = [23, 45, 56, 200, 300, 400, 33, 400, 500, 176, 303, 100, 400, 500, 4];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    // action = 8
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var v2/* target_id_data */ = [[23, 45, 56], [33, 400, 500], [], [], []];
    var _ints = [
      [/* t0 */
        [30000, 8],
        [35, 45, 55],
        [23, 23, 23],

        [34, 45, 56],/* 3 */
        [111, 345, 445],
        [200, 300, 400],/* 5 */
        [176, 303, 100],/* 6 */

        [], [], 
        [176, 303, 100]
      ]
    ];
    var val = await e.f22(v1/* temp_transaction_data_group */, v2/* target_id_data */, 400, _ints, [[]], [[]]);
    console.log("16c");
    var exp_vals = [176, 303, 100,   23, 45, 56,   200, 300, 400,   33, 400, 500,  176, 303, 100];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    // action = 9
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var v2/* target_id_data */ = [[23, 45, 56], [33, 400, 500], [], [], []];
    var _ints = [
      [/* t0 */
        [30000, 9],
        [35, 45, 55],
        [23, 23, 23],

        [34, 45, 56],
        [111, 345, 445],
        [200, 300, 400],
        [176, 303, 100],

        [], [], 
        [176, 303, 101]
      ]
    ];
    var val = await e.f22(v1/* temp_transaction_data_group */, v2/* target_id_data */, 400, _ints, [[]], [[]]);
    console.log("16d");
    var exp_vals = [176, 303, 100,  23, 45, 56,  200, 300, 400,  33, 400, 500,  176, 303, 101];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    // action = 16
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var v2/* target_id_data */ = [[23, 45, 56], [33, 400, 500], [], [], []];
    var _ints = [
      [/* t0 */
        [30000, 16],
        [35, 45, 55],
        [23, 23, 23],

        [33, 400, 500],/* receivers */
        [23, 23, 23],

        [34, 45, 56],/* actions */
        [111, 345, 445],/* depths */
        [200, 300, 400],/* authmint_amounts */
      ]
    ];
    var val = await e.f22(v1/* temp_transaction_data_group */, v2/* target_id_data */, 400, _ints, [[]], [[]]);
    console.log("16e");
    var exp_vals = [23, 45, 56,  34, 45, 56,  111, 345,  445,  200, 300, 400,   33, 400, 500,   0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // action = 17
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var v2/* target_id_data */ = [[23, 45, 56], [33, 400, 500], [44, 55, 88], [], []];
    var _ints = [
      [/* t0 */
        [30000, 17],
        [35, 45, 55],/* exchanges */
        [23, 23, 23],

        [33, 400, 500],/* receivers */
        [23, 23, 23],

        [34, 45, 56],/* amounts */
        [111, 345, 445],/* depths */

        [200, 300, 400],/* token_targets */
        [23, 23, 23]
      ]
    ];
    var val = await e.f22(v1/* temp_transaction_data_group */, v2/* target_id_data */, 400, _ints, [[]], [[]]);
    console.log("16f");
    var exp_vals = [23, 45, 56,   33, 400, 500,   34, 45,  56,   111, 345, 445,   44, 55, 88 ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    
    // action = 16, senders defined
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var v2/* target_id_data */ = [[23, 45, 56], [33, 400, 500], [], [], []];
    var _ints = [
      [/* t0 */
        [30000, 16],
        [35, 45, 55],
        [23, 23, 23],

        [33, 400, 500],/* receivers */
        [23, 23, 23],

        [34, 45, 56],/* actions */
        [111, 345, 445],/* depths */
        [200, 300, 400],/* authmint_amounts */
        [176, 303, 100]
      ]
    ];
    var val = await e.f22(v1/* temp_transaction_data_group */, v2/* target_id_data */, 400, _ints, [[]], [[]]);
    console.log("16g");
    var exp_vals = [23, 45, 56,  34, 45, 56,  111, 345,  445,  200, 300, 400,   33, 400, 500,   176, 303, 100,  0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

  });

  /* get_token_primary_secondary_target_data(): returns 3 2d arrays of data used in token transaction work */
  xit("17. can run f23/f24/f25/f26/f27", async () => {
    // action = 2
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 2],
        [35, 45, 55],
        [23, 23, 23],

        [34, 45, 56],
        [23, 23, 23],

        [111, 345, 445],
        [200, 300, 400]
      ]
    ];
    var val = await e.f23(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("17a");
    var exp_vals = [35, 45, 55, 34, 45, 56];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    // action = 2
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 2],
        [35, 45, 53],
        [23, 23, 23]
      ]
    ];
    var val = await e.f23(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("17b");
    var exp_vals = [35, 45, 53];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    // action = 13
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 13],
        [35, 45, 53],
        [23, 23, 23],

        [34, 45, 56],
        [23, 23, 23]
      ]
    ];
    var val = await e.f23(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("17c");
    var exp_vals = [35, 45, 53];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    // action = 15
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 15],
        [35, 45, 53],
        [23, 23, 23],

        [34, 45, 56],
        [23, 23, 23],
        [0, 0, 0]
      ]
    ];
    var val = await e.f23(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("17d");
    var exp_vals = [35, 45, 53];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    // action = 1
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 1],
        [35, 45, 53],
        [23, 23, 23],

        [34, 45, 0],
        [23, 23, 53],
        [500, 501, 502],
        [0, 0, 0]
      ]
    ];
    var val = await e.f23(v1/* temp_transaction_data_group */, 404, _ints, [], []);
    console.log("17e");
    var exp_vals = [35, 45, 53, 34, 45, 404, 35, 45, 53, 500, 501, 502, 34, 45, 404];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    // action = 17
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 17],
        [35, 45, 53],/* exchanges */
        [23, 23, 23],

        [34, 45, 56],/* receivers */
        [23, 23, 23],

        [1000, 2000, 4003],/* amounts */
        [0, 0, 0],/* amount depths */

        [44, 500, 601],/* token_targets */
        [23, 23, 23],
      ]
    ];
    var val = await e.f23e(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("17f");
    var exp_vals = [35, 45, 53,  34, 45, 56,  1000, 2000, 4003,  0, 0, 0,  44, 500, 601];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // action = 3
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 3],
        [35, 45, 55],
        [23, 23, 23],

        [34, 45, 56],
      ]
    ];
    var val = await e.f23(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("17g");
    var exp_vals = [35, 45, 55,  34, 45, 56];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // action = 14
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 14],
        [325, 4403, 552],
        [23, 23, 23],

        [314, 45, 561],
      ]
    ];
    var val = await e.f23(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("17h");
    var exp_vals = [325, 4403, 552,   314, 45, 561];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // action = 18
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 18],
        [3205, 44003, 5352],
        [23, 23, 23],

        [3134, 435, 5361],
      ]
    ];
    var val = await e.f23(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("17i");
    var exp_vals = [3205, 44003, 5352,   3134, 435, 5361];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });

  /* get_mint_tokens_data(): returns 3 arrays of data used in mint token transaction work */
  xit("18. can run f28", async () => {
    // action = 9
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 9],
        [35, 45, 55],
        [23, 23, 23],

        [34, 45, 56],
        [23, 23, 23],

        [111, 345, 445],
        [200, 300, 400],

        [], [], 
        [201, 3010, 4100]
      ]
    ];
    var val = await e.f28(v1/* temp_transaction_data_group */, 400, _ints, [], [], 9);
    console.log("18a");
    var exp_vals = [200, 300, 400,  35, 45, 55,  111, 345, 445,  34, 45, 56,  201, 3010, 4100,  400, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    // action = 8
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 8],
        [35, 45, 55],
        [23, 23, 23],

        [34, 45, 56],
        [23, 23, 23],

        [111, 345, 445],
        [200, 300, 400],
        [180, 280, 380],
        [220, 320, 420],
 
        [201, 3010, 4100]
      ]
    ];
    var val = await e.f28(v1/* temp_transaction_data_group */, 400, _ints, [], [], 8);
    console.log("18b");
    var exp_vals = [200, 300, 400,   35, 45, 55,   111, 345, 445,   34, 45, 56,   201, 3010, 4100,  400, 500, 3, 5,   180, 280, 380,   220, 320, 420];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });






  /* get_submit_consensus_data(): returns target ids used in submitting consensus request actions */
  xit("19. can run f29", async () => {
    // action = 5
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 5, 0, 0, 0],
        [35, 45, 55],
        [23, 23, 23]
      ]
    ];
    var val = await e.f29(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("19a");
    var exp_vals = [35, 45, 55];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    // action = 5
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 5, 0, 0, 0],
        [35, 95, 55],
        [23, 23, 23]
      ]
    ];
    var val = await e.f29(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("19b");
    var exp_vals = [35, 95, 55];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    // action = 5
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 5, 0, 0, 0],
        [35, 45, 400],
        [23, 23, 53]
      ]
    ];
    var val = await e.f29(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("19c");
    var exp_vals = [35, 45, 400];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    // action = 5
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 5, 3, 4, 0],
        [35, 45, 400],
        [23, 23, 53],

        [5039, 44, 55, 49382],
        [9029, 392, 0, 3]
      ]
    ];
    var val = await e.f29(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("19d");
    var exp_vals = [35, 45, 400,  5039, 44, 55, 49382,  9029, 392, 0, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // action = 5
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 5, 3, 5, 0],
        [35, 45, 400],
        [23, 23, 53],

        [5039, 44, 55, 49382],
        [9029, 392, 0, 3],
        [4930, 44, 33, 22, 11, 5, 6930, bgN(3, 44)]
      ]
    ];
    var val = await e.f29(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("19e");
    var exp_vals = [35, 45, 400,   5039, 44, 55, 49382,   9029, 392, 0, 3,  4930, 44, 33, 22, 11, 5, 6930, bgN(3, 44)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    // action = 5
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 5, 0, 0, 3, 6],
        [35, 45, 400],
        [23, 23, 53],

        [5039, 44, 55, 49382],
        [9029, 392, 0, 3],

        [502],
        [902]
      ]
    ];
    var val = await e.f29(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("19f");
    var exp_vals = [35, 45, 400,  5039, 44, 55, 49382, 502,   9029, 392, 0, 3, 902];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });

  /* get_nested_account_data(): returns nested account data used in archive consensus and collect subscription work */
  xit("20. can run f30", async () => {
    //3 targets
    var _ints = [
      [30000, 0],
      [35, 45, 55],
      [23, 23, 23],

      [134, 135, 136],
      [456, 457, 458],
      [556, 557, 558]
    ];
    var targets = [133, 455, 555];
    var val = await e.f30(_ints, targets, []);
    console.log("20a");
    var exp_vals = [134, 135, 136, 456, 457, 458, 556, 557, 558];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //2 targets
    var _ints = [
      [30000, 0],
      [35, 45, 55],
      [23, 23, 23],

      [134, 135, 136],
      [556, 557, 558]
    ];
    var targets = [133, 555];
    var val = await e.f30(_ints, targets, []);
    console.log("20b");
    var exp_vals = [134, 135, 136, 556, 557, 558];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //3 targets passed, 2 targets' data passed
    var _ints = [
      [30000, 0],
      [35, 45, 55],
      [23, 23, 23],

      [134, 135, 136],
      [556, 557, 558]
    ];
    var targets = [133, 555, 778];
    console.log("20c");
    await expect(e.f30(_ints, targets, [])).to.be.reverted;

  });

  /* get_new_objects_data(): returns object data for object being created */
  xit("21. can run f31", async () => {
    //new object length = 4
    var _ints = [
      [10000, 0],
      [35, 45, 55],
      [23, 23, 23],

      [35, 45, 16],
      [23, 23, 23],

      [35, 89, 55],
      [23, 23, 23],

      [44, 89, 55],
      [23, 23, 23]
    ];
    var v1/* temp_transaction_data */ = [133, 455, 555];
    var val = await e.f31(_ints, 34, v1/* temp_transaction_data */, 8);
    console.log("21a");
    var exp_vals = [35, 45, 55, 35, 45, 16, 35, 89, 55, 44, 89, 55];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //new object length = 3
    var _ints = [
      [10000, 0],
      [35, 45, 55],
      [23, 23, 23],

      [35, 1, 16],
      [23, 35, 23],

      [35, 89, 55],
      [23, 53, 23]
    ];
    var v1/* temp_transaction_data */ = [133, 455, 555];
    var val = await e.f31(_ints, 34, v1/* temp_transaction_data */, 6);
    console.log("21b");
    var exp_vals = [35, 45, 55, 35, 455, 16, 35, 34, 55];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //new object length = 5
    var _ints = [
      [10000, 0],
      [35, 45, 55],
      [23, 23, 23],

      [35, 45, 16],
      [23, 23, 23],

      [35, 89, 55],
      [23, 23, 23],

      [44, 89, 55],
      [23, 23, 23],

      [35, 45, 16],
      [23, 23, 23]
    ];
    var v1/* temp_transaction_data */ = [133, 455, 555];
    var val = await e.f31(_ints, 34, v1/* temp_transaction_data */, 10);
    console.log("21c");
    var exp_vals = [35, 45, 55, 35, 45, 16, 35, 89, 55, 44, 89, 55, 35, 45, 16];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });






  /* check_if_tokens_exceed_requested_limits(): checks if buy tokens to receive are within set bounds */
  xit("22. can run f32", async () => {
    //no bound exceeded
    var v1/* tokens_to_receive */ = [300, 400, 500];
    var v2/* bounds */ = [
      [280, 380, 480],
      [320, 420, 520]
    ];

    console.log("22a");
    await expect(e.f32(v1/* tokens_to_receive */, v2/* bounds */)).to.not.be.reverted;

    //one top bound exceeded
    var v1/* tokens_to_receive */ = [300, 400, 500];
    var v2/* bounds */ = [
      [280, 380, 480],
      [320, 390, 520]
    ];

    console.log("22b");
    await expect(e.f32(v1/* tokens_to_receive */, v2/* bounds */)).to.be.reverted;

    //two bottom bounds exceeded
    var v1/* tokens_to_receive */ = [300, 400, 500];
    var v2/* bounds */ = [
      [301, 380, 505],
      [310, 450, 520]
    ];

    console.log("22c");
    await expect(e.f32(v1/* tokens_to_receive */, v2/* bounds */)).to.be.reverted;

    //irregular bounds
    var v1/* tokens_to_receive */ = [300, 400, 500];
    var v2/* bounds */ = [
      [280, 380, 480],
      [299, 390]
    ];

    console.log("22d");
    await expect(e.f32(v1/* tokens_to_receive */, v2/* bounds */)).to.be.reverted;

    //irregular bounds
    var v1/* tokens_to_receive */ = [300, 400, 500];
    var v2/* bounds */ = [
      [380, 480],
      [299, 390, 550]
    ];

    console.log("22e");
    await expect(e.f32(v1/* tokens_to_receive */, v2/* bounds */)).to.be.reverted;

    //no bound specified
    var v1/* tokens_to_receive */ = [300, 400, 500];
    var v2/* bounds */ = [
      [0, 380, 480],
      [0, 420, 520]
    ];

    console.log("22f");
    await expect(e.f32(v1/* tokens_to_receive */, v2/* bounds */)).to.not.be.reverted;
  });

  /* check_for_external_amounts(): checks for external amount in buy/sell transactions */
  xit("23. can run f33", async () => {
    //selling 10 end
    var v1/* exchange_nums */ = [
      [
        [0, 0], [35, 45, 55], [0, 0, 0, 1000], [0], [1000]
      ]
    ];
    var v2/* data */ = [[1], [3], [0], [404], [0]];
    var v3/* tokens_to_receive */ = [10];
    var val = await e.f33(v1/* exchange_nums */, v2/* data */, v3/* tokens_to_receive */);
    console.log("23a");
    var exp_vals = [10000, 404];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //selling 50 end
    var v1/* exchange_nums */ = [
      [
        [0, 0], [35, 45, 55], [0, 0, 0, 1000], [0], [1000]
      ]
    ];
    var v2/* data */ = [[1], [3], [0], [405], [0]];
    var v3/* tokens_to_receive */ = [50];
    var val = await e.f33(v1/* exchange_nums */, v2/* data */, v3/* tokens_to_receive */);
    console.log("23b");
    var exp_vals = [50000, 405];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //selling 50 end, insufficient balance of exchange parent tokens
    var v1/* exchange_nums */ = [
      [
        [0, 0], [35, 45, 55], [0, 0, 0, 10], [0], [1000]
      ]
    ];
    var v2/* data */ = [[1], [3], [0], [405], [0]];
    var v3/* tokens_to_receive */ = [500];
    console.log("23c");
    await expect(e.f33(v1/* exchange_nums */, v2/* data */, v3/* tokens_to_receive */)).to.be.reverted;

    //selling 50 end twice
    var v1/* exchange_nums */ = [
      [
        [0, 0], [35, 45, 55], [0, 0, 0, 1000], [0], [1000]
      ],
      [
        [0, 0], [35, 45, 55], [0, 0, 0, 1000], [0], [1000]
      ]
    ];
    var v2/* data */ = [[1, 1], [3, 3], [0], [405, 406], [0]];
    var v3/* tokens_to_receive */ = [500, 450];
    console.log("23d");
    await expect(e.f33(v1/* exchange_nums */, v2/* data */, v3/* tokens_to_receive */)).to.be.reverted;

    //selling 50 end three times
    var v1/* exchange_nums */ = [
      [
        [0, 0], [35, 45, 55], [0, 0, 0, 1000], [0], [1000]
      ],
      [
        [0, 0], [35, 45, 55], [0, 0, 0, 1000], [0], [1000]
      ],
      [
        [0, 0], [35, 45, 55], [0, 0, 0, 1000], [0], [1000]
      ]
    ];
    var v2/* data */ = [[1, 1, 1], [3, 3, 3], [0], [405, 406, 405], [0]];
    var v3/* tokens_to_receive */ = [500, 450, 650];
    console.log("23e");
    await expect(e.f33(v1/* exchange_nums */, v2/* data */, v3/* tokens_to_receive */)).to.be.reverted;

    //selling 50 end, irregular data
    var v1/* exchange_nums */ = [
      [
        [0, 0], [35, 45, 55], [0, 0, 0, 1000], [0], [1000]
      ]
    ];
    var v2/* data */ = [[1], [3], [0], [], [0]];
    var v3/* tokens_to_receive */ = [500];
    console.log("23f");
    await expect(e.f33(v1/* exchange_nums */, v2/* data */, v3/* tokens_to_receive */)).to.be.reverted;

    //buying 10 end
    var v1/* exchange_nums */ = [
      [
        [0, 0],
        [35, 45, 55],
        [0, 0, 0, 1000],
        [0],
        [1000]
      ]
    ];
    var v2/* data */ = [[0], [3], [0], [404], [0]];
    var v3/* tokens_to_receive */ = [10];
    var val = await e.f33(v1/* exchange_nums */, v2/* data */, v3/* tokens_to_receive */);
    console.log("23g");
    var exp_vals = [0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

  });

  /* calculate_active_mintable_amounts(): calculate the amount of spend that can be minted */
  xit("24. can run f34", async () => {
    //minting spend
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5], [0, 0, 0], [0, 0, 0, 0, 0, 0, bgN(50, 16)], [0], [0]
      ]
    ];
    var v2/* data */ = [[0], [5], [1000], [0], [0]];
    var val = await e.f34(v2/* data */, v1/* exchange_nums */);
    console.log("24a");
    var exp_vals = [500];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //minting spend
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5], [0, 0, 0], [0, 0, 0, 0, 0, 0, bgN(30, 16)], [0], [0]
      ]
    ];
    var v2/* data */ = [[0], [5], [1000], [0], [0]];
    var val = await e.f34(v2/* data */, v1/* exchange_nums */);
    console.log("24b");
    var exp_vals = [300];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //minting spend
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5], [0, 0, 0], [0, 0, 0, 0, 0, 0, bgN(100, 16)], [0], [0]
      ]
    ];
    var v2/* data */ = [[0], [5], [1000], [0], [0]];
    var val = await e.f34(v2/* data */, v1/* exchange_nums */);
    console.log("24c");
    var exp_vals = [1000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //buying end
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 3], [0, 0, 0], [0, 0, 0, 0, 0, 0, bgN(50, 16)], [0], [0]
      ]
    ];
    var v2/* data */ = [[0], [5], [1000], [0], [0]];
    var val = await e.f34(v2/* data */, v1/* exchange_nums */);
    console.log("24d");
    var exp_vals = [1000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //buying end
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 3], [0, 0, 0], [0, 0, 0, 0, 0, 0, bgN(50, 16)], [0], [0]
      ]
    ];
    var v2/* data */ = [[0], [5], [700], [0], [0]];
    var val = await e.f34(v2/* data */, v1/* exchange_nums */);
    console.log("24e");
    var exp_vals = [700];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });






  /* get_tokens_to_receive(): gets the factor, input_ratio, output_ratio and factor amount for buy/sell transaction */
  xit("25. can run f35", async () => {
    //mint spend
    var v1/* exchange_nums */ = [
      [0, 0, 0, 5],
      [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [100, 100, 1000, 0, 2000, 0, 0],
      [0],
      [0]
    ];
    var val = await e.f35(v1/* exchange_nums */, 5, 1000, 1000, 0, 0);
    console.log("25a");
    var exp_vals = [0, 100, 100, 1000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //mint spend, factor greater than active_mintable_amount
    var v1/* exchange_nums */ = [
      [0, 0, 0, 5],
      [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [100, 100, 1000, 0, 20000, 0, 0],
      [0],
      [0]
    ];
    var val = await e.f35(v1/* exchange_nums */, 5, 1000, 0, 0, 0);
    console.log("25b");
    var exp_vals = [4, 100, 100, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //mint spend, block_halfing_type = spread(1)
    var v1/* exchange_nums */ = [
      [0, 0, 0, 5],
      [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
      [100, 100, 1000, 0, 5000, 0, 0],
      [0],
      [0]
    ];
    var val = await e.f35(v1/* exchange_nums */, 5, 1000, 1000, 0, 0);
    console.log("25c");
    var exp_vals = [0, 100, 100, 750];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //action type = 0 (buy)
    var v1/* exchange_nums */ = [
      [0, 0, 0, 5],
      [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [103, 105, 1000, 0, 2000, 0, 0],
      [0],
      [0]
    ];
    var val = await e.f35(v1/* exchange_nums */, 5, 1000, 1000, 0, 0);
    console.log("25d");
    var exp_vals = [0, 105, 103, 1000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //action type = 1 (sell)
    var v1/* exchange_nums */ = [
      [0, 0, 0, 5],
      [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [103, 105, 1000, 0, 2000, 0, 0],
      [0],
      [0]
    ];
    var val = await e.f35(v1/* exchange_nums */, 5, 1000, 1000, 0, 1);
    console.log("25e");
    var exp_vals = [0, 103, 105, 1000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //correct amount for buying end
    var v1/* exchange_nums */ = [
      [0, 0, 0, 5],
      [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [103, 105, 1000, 0, 2000, 0, 0],
      [0],
      [100]
    ];
    var val = await e.f35(v1/* exchange_nums */, 3, 10, 1000, 1000, 0);
    console.log("25f");
    var exp_vals = [0, 105, 103, 1000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //incorrect amount for buying end
    var v1/* exchange_nums */ = [
      [0, 0, 0, 5],
      [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [103, 105, 1000, 0, 2000, 0, 0],
      [0],
      [100]
    ];
    console.log("25g");
    await expect(e.f35(v1/* exchange_nums */, 3, 100, 1000, 100, 0)).to.be.reverted;
    console.log("-------------e--------------");
    await expect(e.f35(v1/* exchange_nums */, 3, 100, 1000, 10000, 0)).to.not.be.reverted;
    console.log("-------------e--------------");
    await expect(e.f35(v1/* exchange_nums */, 3, 5, 1000, 500, 0)).to.not.be.reverted;
    console.log("-------------e--------------");
    await expect(e.f35(v1/* exchange_nums */, 3, 10, 1000, 50, 0)).to.be.reverted;
    console.log("-------------e--------------");

  });

  /* get_awward_data(): gets the awward transaction data from _ints for awward transfer */
  xit("26. can run f36", async () => {
    // 1 target
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 7],
        [35],
        [23],
        [800],

        [3, 45, 56],
        [23, 23, 23],
        [111, 345, 445],
        [0, 3, 38]
      ]
    ];
    var val = await e.f36(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("26a");
    var exp_vals = [35, 800, 3, 45, 56, 111, 345, 445, 0, 3, 38];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    // 2 targets
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 7],
        [35, 60],
        [23, 23],
        [800, 700],

        [3, 45, 56],
        [23, 23, 23],
        [111, 345, 445],
        [33, 35, 380],

        [3, 50, 60],
        [23, 23, 23],
        [200, 400, 900],
        [0, 39, 138]
      ]
    ];
    var val = await e.f36(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("26b");
    var exp_vals = [35, 60, 800, 700,  3, 45, 56, 111, 345, 445, 33, 35, 380,  3, 50, 60, 200, 400, 900, 0, 39, 138];
    for (let j = 0; j < exp_vals.length; j++) {
      expect( val[j]).to.equal(exp_vals[j]);
    }


    // 3 targets
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 7],
        [35, 60, 80],
        [23, 23, 23],
        [800, 700, 400],

        [3, 45, 56],
        [23, 23, 23],
        [111, 345, 445],
        [0, 3, 38],

        [3, 50, 60],
        [23, 23, 23],
        [200, 400, 900],
        [10, 3, 38],

        [3, 144, 9000],
        [23, 23, 23],
        [550, 450, 350],
        [20, 93, 388]
      ]
    ];
    var val = await e.f36(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("26c");
    var exp_vals = [35, 60, 80, 800, 700, 400,  3, 45, 56, 111, 345, 445, 0, 3, 38,   3, 50, 60, 200, 400, 900,10, 3, 38,  3, 144, 9000, 550, 450, 350, 20, 93, 388];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    // 1 target, incorrect first awward type
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 7],
        [35],
        [23],
        [800],

        [5/* bad! */, 45, 56],
        [23, 23, 23],
        [111, 345, 445],
        [0, 3, 38]
      ]
    ];
    console.log("26d");
    await expect(e.f36(v1/* temp_transaction_data_group */, 400, _ints, [], [])).to.be.reverted;


    // 1 target, incorrect first awward amount
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 7],
        [35],
        [23],
        [800],

        [3, 45, 56],
        [23, 23, 23],
        [0, 345, 445],
        [0, 3, 38]
      ]
    ];
    console.log("26e");
    await expect(e.f36(v1/* temp_transaction_data_group */, 400, _ints, [], [])).to.be.reverted;
  });

  /* calculate_tokens_setup(): fetches multiple exchange factors,  */
  xit("27. can run f37", async () => {
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [100, 100, 1000, 0, 2000, 0, 0],
        [0],
        [0]
      ]
    ];
    var v2/* ex_data */ = [[0], [5], [300], [], []];
    var v3/* active_mintable_amounts */ = [500];
    var val = await e.f37(v2/* ex_data */, v1/* exchange_nums */, 4000, v3/* active_mintable_amounts */);
    console.log("27a");
    var exp_vals = [0, 100, 100, 500, 4000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [110, 110, 1000, 0, 2000, 0, 0],
        [0],
        [0]
      ]
    ];
    var v2/* ex_data */ = [[0], [5], [300], [], []];
    var v3/* active_mintable_amounts */ = [900];
    var val = await e.f37(v2/* ex_data */, v1/* exchange_nums */, 880000, v3/* active_mintable_amounts */);
    console.log("27b");
    var exp_vals = [0, 110, 110, 900, 880000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //2 buys
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [110, 110, 1000, 0, 2000, 0, 0],
        [0],
        [0]
      ],
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [120, 120, 1000, 0, 2000, 0, 0],
        [0],
        [0]
      ]
    ];
    var v2/* ex_data */ = [[0, 0], [5, 7], [300, 400], [], []];
    var v3/* active_mintable_amounts */ = [900, 600];
    var val = await e.f37(v2/* ex_data */, v1/* exchange_nums */, 880000, v3/* active_mintable_amounts */);
    console.log("27c");
    var exp_vals = [0, 0, 110, 120, 110, 120, 900, 600, 880000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //expect new_msg_value to be 0
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [110, 110, 1000, 0, 2000, 0, 0],
        [0],
        [0]
      ],
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [120, 120, 1000, 0, 2000, 0, 0],
        [0],
        [100]
      ]
    ];
    var v2/* ex_data */ = [[0, 0], [5, 3], [300, 400], [], []];
    var v3/* active_mintable_amounts */ = [900, 400];
    var val = await e.f37(v2/* ex_data */, v1/* exchange_nums */, 880000, v3/* active_mintable_amounts */);
    console.log("27d");
    var exp_vals = [0, 0, 110, 120, 110, 120, 900, 400, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });





  /* calculate_final_tokens_to_receive(): calculates the tokens sender is set to receive for swap */
  xit("28. can run f38", async () => {
    //amount from active_mintable_amounts
    var v1/* tokens_to_receive_data */ = [[0], [10000], [20000], [450]];
    var v2/* data */ = [[0], [5], [300], [], []];
    var v3/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [10000, 20000, 1000, 0, 2000, 0, 0],
        [0],
        [0]
      ]
    ];
    var v4/* active_mintable_amounts */ = [500];
    var val = await e.f38(v1/* tokens_to_receive_data */, v2/* data */, v3/* exchange_nums */, false, v4/* active_mintable_amounts */);
    console.log("28a");
    var exp_vals = [1000, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //amount from active_mintable_amounts
    var v1/* tokens_to_receive_data */ = [[0], [10000], [20000], [450]];
    var v2/* data */ = [[0], [5], [300], [], []];
    var v3/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [10000, 20000, 1000, 0, 2000, 0, 0],
        [0],
        [0]
      ]
    ];
    var v4/* active_mintable_amounts */ = [700];
    var val = await e.f38(v1/* tokens_to_receive_data */, v2/* data */, v3/* exchange_nums */, false, v4/* active_mintable_amounts */);
    console.log("28b");
    var exp_vals = [1400, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //amount from tokens_to_receive_data
    var v1/* tokens_to_receive_data */ = [[1], [10000], [20000], [450]];
    var v2/* data */ = [[0], [5], [300], [], []];
    var v3/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [10000, 20000, 1000, 0, 2000, 0, 0],
        [0],
        [0]
      ]
    ];
    var v4/* active_mintable_amounts */ = [750];
    var val = await e.f38(v1/* tokens_to_receive_data */, v2/* data */, v3/* exchange_nums */, false, v4/* active_mintable_amounts */);
    console.log("28c");
    var exp_vals = [900, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //authmint = true, amount derived from data
    var v1/* tokens_to_receive_data */ = [[0], [10000], [30000], [450]];
    var v2/* data */ = [[0], [5], [5000], [], []];
    var v3/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [10000, 30000, 1000, 0, 2000, 0, 0],
        [0],
        [0]
      ]
    ];
    var v4/* active_mintable_amounts */ = [500];
    var val = await e.f38(v1/* tokens_to_receive_data */, v2/* data */, v3/* exchange_nums */, true, v4/* active_mintable_amounts */);
    console.log("28d");
    var exp_vals = [15000, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //amounts from active_mintable_amounts
    var v1/* tokens_to_receive_data */ = [[0, 1], [10000, 10000], [20000, 40000], [450, 4000]];
    var v2/* data */ = [[0, 1], [5, 70], [300, 0], [], []];
    var v3/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [10000, 20000, 1000, 0, 2000, 0, 0],
        [0],
        [0]
      ],
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [10000, 40000, 1000, 0, 2000, 0, 0],
        [0],
        [0]
      ]
    ];
    var v4/* active_mintable_amounts */ = [500, 8000];
    var val = await e.f38(v1/* tokens_to_receive_data */, v2/* data */, v3/* exchange_nums */, false, v4/* active_mintable_amounts */);
    console.log("28e");
    var exp_vals = [1000, 16000, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });

  /* calculate_tokens_to_receive(): calculates tokens sender is set to receive, external amount data and updated msg_value */
  xit("29. can run f39", async () => {
    //mint spend
    var v1/* data */ = [[0], [5], [1000], [], []];
    var v2/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [10000, 20000, 1000, 0, 2000, 0, bgN(100, 16)],
        [0],
        [0]
      ]
    ];
    var v3/* buy_sell_limits */ = [[], []];
    var val = await e.f39(v1/* data */, v2/* exchange_nums */, 1000, false, v3/* buy_sell_limits */);
    console.log("29a");
    var exp_vals = [500, 0, 0, 1000, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //buy end
    var v1/* data */ = [[0], [3], [100], [], []];
    var v2/* exchange_nums */ = [
      [
        [0, 0, 0, 3],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1000000, 2000000, 1000, 0, 2000, 0, bgN(100, 16)],
        [0],
        [100]
      ]
    ];
    var v3/* buy_sell_limits */ = [[], []];
    var val = await e.f39(v1/* data */, v2/* exchange_nums */, 100000, false, v3/* buy_sell_limits */);
    console.log("29b");
    var exp_vals = [49, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //sell end
    var v1/* data */ = [[1], [3], [100], [44], [50]];
    var v2/* exchange_nums */ = [
      [
        [0, 0, 0, 3],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1000000, 2000000, 1000, 100000, 2000, 0, bgN(100, 16)],
        [0],
        [100]
      ]
    ];
    var v3/* buy_sell_limits */ = [[], []];
    var val = await e.f39(v1/* data */, v2/* exchange_nums */, 1000, false, v3/* buy_sell_limits */);
    console.log("29c");
    var exp_vals = [199, 19900, 44, 1000, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //buy end, set sell limits
    var v1/* data */ = [[0], [3], [100], [], []];
    var v2/* exchange_nums */ = [
      [
        [0, 0, 0, 3],
        [1000, 10000, 0, 0, 0, bgN(50, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1000000, 2000000, 1000, 0, 2000, 0, bgN(100, 16)],
        [0],
        [100]
      ]
    ];
    var v3/* buy_sell_limits */ = [[45], [55]];
    var val = await e.f39(v1/* data */, v2/* exchange_nums */, 100000, false, v3/* buy_sell_limits */);
    console.log("29d");
    var exp_vals = [49, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });

  /* calculate_reduction_proportion_ratios(): calculates new reduction_proportions used in calculating active mint-limits */
  xit("30. can run f40", async () => {
    //block limit not exceeded, factor = 0, current_proportion = 100% => 100%  
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000/* 1 */, 0, 0, 0, bgN(50, 16), bgN(90, 16), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [10000, 20000, 1000, 0, 5000/* 4 */, 0, bgN(100, 16), 0, 0,0,0,0,0,0,0/* 14 */,5000,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [0];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 1);
    console.log("30a");
    var exp_vals = [bgN(100, 16), 5000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //block limit exceeded, factor = 1, current_proportion = 100% => 90%  
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [0, 10000/* 1 */, 0, 0, 0, bgN(65, 16)/* 5 */, bgN(90, 16), 0, 0, 0, 0, 0, 0/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 15000/* 4 */, 0, bgN(100, 16), 0, 0,0,0,0,0,0,0,0,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [0];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 1);
    console.log("30b");
    var exp_vals = [bgN(90, 16)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //block limit exceeded, factor = 1, current_proportion = 100% => 90% , block_limit_sensitivity = 2
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [0, 10000/* 1 */, 0, 0, 0, bgN(65, 16)/* 5 */, bgN(90, 16), 0, 0, 0, 0, 0, 2/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 15000/* 4 */, 0, bgN(100, 16), 0, 0,0,0,0,0,0,0,0,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [0];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 1);
    console.log("30c");
    var exp_vals = [bgN(81, 16)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //block limit exceeded, factor = 1, current_proportion = 100% => 90% , block_limit_sensitivity = 2, block_difference = 2
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [0, 10000/* 1 */, 0, 0, 0, bgN(65, 16)/* 5 */, bgN(90, 16), 0, 0, 0, 0, 0, 2/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 15000/* 4 */, 0, bgN(100, 16), 0, 0,0,0,0,0,0,0,0,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [0];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 2);
    console.log("30d");
    var exp_vals = [bgN(90, 16)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //block limit exceeded, factor = 1, current_proportion = 100% => 90% , block_limit_sensitivity = 3, block_difference = 2
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [0, 10000/* 1 */, 0, 0, 0, bgN(65, 16)/* 5 */, bgN(90, 16), 0, 0, 0, 0, 0, 3/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 15000/* 4 */, 0, bgN(100, 16), 0, 0,0,0,0,0,0,0,0,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [0];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 2);
    console.log("30e");
    var exp_vals = [bgN(81, 16)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //block limit exceeded, factor = 1, current_proportion = 100% => 90% , block_limit_sensitivity = 3, block_difference = 3
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [0, 10000/* 1 */, 0, 0, 0, bgN(65, 16)/* 5 */, bgN(90, 16), 0, 0, 0, 0, 0, 3/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 15000/* 4 */, 0, bgN(100, 16), 0, 0,0,0,0,0,0,0,0,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [0];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 3);
    console.log("30f");
    var exp_vals = [bgN(90, 16)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //block limit exceeded, factor = 1, current_proportion = 100% => 25% , block_limit_sensitivity = 0, block_difference = 1
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [0, 10000/* 1 */, 0, 0, 0, bgN(35, 16)/* 5 */, bgN(50, 16), 0, 0, 0, 0, 0, 0/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 15000/* 4 */, 0, bgN(100, 16), 0, 0,0,0,0,0,0,0,0,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [0];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 1);
    console.log("30g");
    var exp_vals = [bgN(25, 16)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //block limit not exceeded, power = 1, current_proportion = 90% => 100%  
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [0, 10000/* 1 */, 0, 0, 0, bgN(65, 16)/* 5 */, bgN(90, 16), 0, 0, 0, 0, 0, 0/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 5000/* 4 */, 0, bgN(90, 16), 0, 0,0,0,0,0,0,0,0,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [0];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 1);
    console.log("30h");
    var exp_vals = [bgN(100, 16)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //block limit not exceeded, power = 30, current_proportion = 90% => 100% , block_difference = 30
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [0, 10000/* 1 */, 0, 0, 0, bgN(65, 16)/* 5 */, bgN(90, 16), 0, 0, 0, 0, 0, 0/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 5000/* 4 */, 0, bgN(81, 16), 0, 0,0,0,0,0,0,0,0,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [0];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 30);
    console.log("30i");
    var exp_vals = [bgN(100, 16)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //block limit not exceeded, power = 1, current_proportion = 90% => 100% , block_difference = 30
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [0, 10000/* 1 */, 0, 0, 0, bgN(65, 16)/* 5 */, bgN(90, 16), 0, 1, 0, 0, 0, 0/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 5000/* 4 */, 1, bgN(81, 16), 0, 0,0,0,0,0,0,0,0,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [0];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 30);
    console.log("30j");
    var exp_vals = [bgN(90, 16)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //block limit not exceeded, power = 2, current_proportion = 90% => 100% , block_difference = 30
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [0, 10000/* 1 */, 0, 0, 0, bgN(65, 16)/* 5 */, bgN(90, 16), 0, 2, 0, 0, 0, 0/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 5000/* 4 */, 7, bgN(729, 15), 0, 0,0,0,0,0,0,0,0,0,0],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [0];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 30);
    console.log("30k");
    var exp_vals = [bgN(90, 16)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //block limit not exceeded, power = 2, current_proportion = 90% => 100% , block_difference = 30
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [0, 10000/* 1 */, 0, 0, 0, bgN(65, 16)/* 5 */, bgN(90, 16), 0, 3, 0, 0, 0, 0/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 5000/* 4 */, 7, bgN(729, 15), 0, 0,0,0,0,0,0,0,0,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [0];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 30);
    console.log("30l");
    var exp_vals = [bgN(100, 16)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //block limit not exceeded, power = 2, current_proportion = 90% => 100% , block_difference = 30, action = sell
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [0, 10000/* 1 */, 0, 0, 0, bgN(65, 16)/* 5 */, bgN(90, 16), 0, 3, 0, 0, 0, 0/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 5000/* 4 */, 7, bgN(729, 15), 0, 0,0,0,0,0,0,0,0,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [1];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 30);
    console.log("30m");
    var exp_vals = [bgN(729, 15)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //block limit not exceeded, power = 2, current_proportion = 90% => 100% , block_difference = 30, active_mint_block = 30
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [0, 10000/* 1 */, 0, 0, 0, bgN(65, 16)/* 5 */, bgN(90, 16), 0, 3, 0, 0, 0, 0/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 5000/* 4 */, 30, bgN(98, 15), 0, 0,0,0,0,0,0,0,0,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [1];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 30);
    console.log("30n");
    var exp_vals = [bgN(98, 15)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //capped exchange type
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 3],
        [0, 10000/* 1 */, 0, 0, 0, bgN(65, 16)/* 5 */, bgN(90, 16), 0, 3, 0, 0, 0, 0/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 5000/* 4 */, 30, bgN(99, 15), 0, 0,0,0,0,0,0,0,0,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [1];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 30);
    console.log("30o");
    var exp_vals = [bgN(99, 15)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //capped exchange type
    var v1/* exchanges */ = [
      [
        [0, 0, 0, 5],
        [0, 0/* 1 */, 0, 0, 0, bgN(65, 16)/* 5 */, bgN(90, 16), 0, 3, 0, 0, 0, 0/* 12 */, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 5000/* 4 */, 30, bgN(88, 15), 0, 0,0,0,0,0,0,0,0,0,0,],
        [0],
        [0]
      ]
    ];
    var v2/* actions */ = [1];
    var val = await e.f40(v1/* exchanges */, v2/* actions */, 30);
    console.log("30p");
    var exp_vals = [bgN(88, 15)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

  });





  /* can_record_author_owner(): returns true if object type is account, shadow, channel or tag */
  xit("31. can run f41", async () => {
    var val = await e.f41(29);
    console.log("31a");
    expect(await val).to.equal(false);

    var val = await e.f41(24);
    console.log("31b");
    expect(await val).to.equal(false);

    var val = await e.f41(16);
    console.log("31c");
    expect(await val).to.equal(true);

    var val = await e.f41(35);
    console.log("31d");
    expect(await val).to.equal(false);

    var val = await e.f41(37);
    console.log("31e");
    expect(await val).to.equal(true);

    var val = await e.f41(1);
    console.log("31f");
    expect(await val).to.equal(true);

    var val = await e.f41(0);
    console.log("31g");
    expect(await val).to.equal(true);
  });

  /* new_val(): returns 1 if val is 0, 0 otherwise */
  xit("32. can run f42", async () => {
    var val = await e.f42(0);
    console.log("32a");
    expect(await val).to.equal(1);

    var val = await e.f42(1);
    console.log("32b");
    expect(await val).to.equal(0);

    var val = await e.f42(10);
    console.log("32c");
    expect(await val).to.equal(0);

    var val = await e.f42(10000);
    console.log("32d");
    expect(await val).to.equal(0);

    var val = await e.f42(0);
    console.log("32e");
    expect(await val).to.equal(1);
  });

  /* run_subscription_checkers(): checks if data set in subscription is valid */
  xit("33. can run f43/44", async () => {
    //can_cancel_subscription = 1
    var v1/* subs_data */ = [
      [
        [0, 0],
        [0, 0, 1, 0, bgN(1,72), 0],
        [5],
        [100]
      ]
    ];
    console.log("33a");
    await expect(e.f43(v1/* subs_data */)).to.not.be.reverted;

    //can_cancel_subscription = 0
    var v1/* subs_data */ = [
      [
        [0, 0],
        [0, 0, 0, 0, 0, 0],
        [5],
        [20]
      ]
    ];
    console.log("33b");
    await expect(e.f43(v1/* subs_data */)).to.not.be.reverted;

    //can_cancel_subscription = 0, amounts_for_buying = 1
    var v1/* subs_data */ = [
      [
        [0, 0],
        [0, 0, 0, 0, 0, 0],
        [5],
        [1]
      ]
    ];
    console.log("33c");
    await expect(e.f43(v1/* subs_data */)).to.not.be.reverted;

    //can_cancel_subscription = 0, amounts_for_buying = 0, exchange_ids length = 0
    var v1/* subs_data */ = [
      [
        [0, 0],
        [0, 0, 0, 0, 0, 0],
        [],
        [0]
      ]
    ];
    console.log("33d");
    await expect(e.f43(v1/* subs_data */)).to.be.reverted;

    //can_cancel_subscription = 3, amounts_for_buying = 1, exchange_ids-length = 1
    var v1/* subs_data */ = [
      [
        [0, 0],
        [0, 0, 3, 0, 0, 0],
        [5],
        [100]
      ]
    ];
    console.log("33e");
    await expect(e.f43(v1/* subs_data */)).to.be.reverted;

    //can_cancel_subscription = 1, amounts_for_buying = 1, exchange_ids-length = 1
    var v1/* subs_data */ = [
      [
        [0, 0],
        [0, 0, 1, 0, 0, 0],
        [5],
        [100]
      ],
      [
        [0, 0],
        [0, 0, 1, 0, 0, 0],
        [3, 5],
        [100, 300]
      ]
    ];
    console.log("33f");
    await expect(e.f43(v1/* subs_data */)).to.not.be.reverted;


    //can_cancel_subscription = 1
    var v1/* subs_data */ = [
      [
        [0, 0],
        [0, 0, 1, 0, bgN(1,72), 0],
        [5],
        [100]
      ]
    ];
    console.log("33g");
    await expect(e.f43(v1/* subs_data */)).to.not.be.reverted;


    //can_cancel_subscription = 1
    var v1/* subs_data */ = [
      [
        [0, 0],
        [0, 0, 1, 0, bgN(1,72), bgN(1,72)],
        [5],
        [100]
      ]
    ];
    console.log("33h");
    await expect(e.f43(v1/* subs_data */)).to.be.reverted;
  });





  /* get_mult_exchanges_count(): creates 4 arrays used to store transfer data */
  xit("34. can run f45", async () => {
    var v1/* targets_data */ = [
      [
        [0],
        [1000, 0],
        [10000, 20000, 1000],
        [0]
      ]
    ];
    var val = await e.f45(v1/* targets_data */);
    console.log("34a");
    var exp_vals = [3, 3, 3, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* targets_data */ = [
      [
        [0],
        [1000, 0],
        [10000, 20000, 1000, 4400],
        [0]
      ]
    ];
    var val = await e.f45(v1/* targets_data */);
    console.log("34b");
    var exp_vals = [4, 4, 4, 4];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* targets_data */ = [
      [
        [0],
        [1000, 0],
        [10000],
        [0]
      ]
    ];
    var val = await e.f45(v1/* targets_data */);
    console.log("34c");
    var exp_vals = [1, 1, 1, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* targets_data */ = [
      [
        [0],
        [1000],
        [],
        [0]
      ]
    ];
    var val = await e.f45(v1/* targets_data */);
    console.log("34d");
    var exp_vals = [0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* targets_data */ = [
      [
        [0],
        [1000, 0],
        [10000],
        [0]
      ],
      [
        [0],
        [1000, 0],
        [10000, 55],
        [0]
      ]
    ];
    var val = await e.f45(v1/* targets_data */);
    console.log("34e");
    var exp_vals = [3, 3, 3, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* targets_data */ = [
      [
        [0],
        [1000, 0],
        [10000],
        [0]
      ],
      [
        [0],
        [1000, 0],
        [10000, 55],
        [0]
      ],
      [
        [0],
        [1000, 0],
        [10000, 55, 44],
        [0]
      ]
    ];
    var val = await e.f45(v1/* targets_data */);
    console.log("34f");
    var exp_vals = [6, 6, 6, 6];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });

  /* get_transfer_data_for_collect_or_pay_subscription_payments(): creates and writes into 4 arrays data used in subscription transfer actions */
  xit("35. can run f46", async () => {
    // 0 - pay subscription
    var v1/* targets_data */ = [
      [
        [0],
        [1001, 0, 0, 0, 0, 0, 0],
        [10000],
        [400],
        [1]
      ]
    ];
    var v2/* targets */ = [33];
    var v3/* amounts */ = [1];
    var v4/* senders */ = [];
    var val = await e.f46(v2/* targets */, v1/* targets_data */, v3/* amounts */, 0, 40002, v4/* senders */);
    console.log("35a");
    var exp_vals = [10000, 400, 40002, 1001, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    // 0 - pay subscription
    var v1/* targets_data */ = [
      [
        [0],
        [1001, 0, 0, 0, 0, 0, 0],
        [10000, 400],
        [400, 100],
        [2, 3]
      ]
    ];
    var v2/* targets */ = [33];
    var v3/* amounts */ = [1];
    var v4/* senders */ = [];
    var val = await e.f46(v2/* targets */, v1/* targets_data */, v3/* amounts */, 0, 40002, v4/* senders */);
    console.log("35b");
    var exp_vals = [10000, 400, 400, 100, 40002, 40002, 1001, 1001, 2, 3 ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    // 0 - pay subscription , can_cancel_subscription = 1 true
    var v1/* targets_data */ = [
      [
        [0],
        [1001, 0, 1, 0, 0, 0, 0],
        [10000, 400],
        [400, 100],
        [33, 556]
      ]
    ];
    var v2/* targets */ = [33];
    var v3/* amounts */ = [1];
    var v4/* senders */ = [];
    var val = await e.f46(v2/* targets */, v1/* targets_data */, v3/* amounts */, 0, 40002, v4/* senders */);
    console.log("35c");
    var exp_vals = [10000, 400, 400, 100, 40002, 40002, 33, 33, 33, 556];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    // 0 - pay subscription , can_cancel_subscription = 1 true
    var v1/* targets_data */ = [
      [
        [0],
        [1001, 0, 1, 0, 0, 0, 0],
        [10000, 400],
        [400, 100],
        [4, 32]
      ],
      [
        [0],
        [1001, 0, 0, 0, 0, 0, 0],
        [900, 555],
        [120, 130],
        [45, 5]
      ]
    ];
    var v2/* targets */ = [33, 45];
    var v3/* amounts */ = [1, 3];
    var v4/* senders */ = [];
    var val = await e.f46(v2/* targets */, v1/* targets_data */, v3/* amounts */, 0, 40002, v4/* senders */);
    console.log("35d");
    var exp_vals = [10000, 400, 900, 555,   400, 100, 360, 390,   40002, 40002, 40002, 40002,   33, 33, 1001, 1001,  4, 32, 45, 5];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    // 0 - pay subscription , can_cancel_subscription = 1 true
    var v1/* targets_data */ = [
      [
        [0],
        [1001, 0, 1, 0, 0, 0, 0],
        [10000, 400],
        [400, 100],
        [4, 5]
      ],
      [
        [0],
        [1001, 0, 0, 0, 0, 0, 0],
        [900, 555],
        [120, 130],
        [87, 66]
      ],
      [
        [0],
        [5111, 0, 0, 0, 0, 0, 0],
        [24, 54, 887, 965],
        [5000, 6000, 7000, 8000],
        [49, 33, 44, 55]
      ]
    ];
    var v2/* targets */ = [33, 45, 66];
    var v3/* amounts */ = [1, 3, 2];
    var v4/* senders */ = [];
    var val = await e.f46(v2/* targets */, v1/* targets_data */, v3/* amounts */, 0, 40002, v4/* senders */);
    console.log("35e");
    var exp_vals = [10000, 400, 900, 555, 24, 54, 887, 965,   400, 100, 360, 390, 10000, 12000, 14000, 16000,    40002, 40002, 40002, 40002,  40002, 40002, 40002, 40002,    33, 33, 1001, 1001, 5111, 5111, 5111, 5111,   4, 5, 87, 66, 49, 33, 44, 55];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // 1 - collect subscription or cancel subscription , can_cancel_subscription = 1 true
    var v1/* targets_data */ = [
      [
        [0],
        [1001, 0, 1, 0, 0, 0, 0],
        [10000, 400],
        [400, 100],
        [12, 3]
      ]
    ];
    var v2/* targets */ = [33];
    var v3/* amounts */ = [1];
   var v4/* senders */ = [];
    var val = await e.f46(v2/* targets */, v1/* targets_data */, v3/* amounts */, 1, 40002, v4/* senders */);
    console.log("35f");
    var exp_vals = [10000, 400,  400, 100,  33, 33,  40002, 40002,  12, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    // 1 - cancel subscription 
    var v1/* targets_data */ = [
      [
        [0],
        [1001, 0, 1, 0, 0, 0, 0],
        [10000, 400],
        [400, 100],
        [4, 5]
      ],
      [
        [0],
        [1001, 0, 0, 0, 0, 0, 0],
        [900, 555],
        [120, 130],
        [90, 99]
      ]
    ];
    var v2/* targets */ = [33, 45];
    var v3/* amounts */ = [1, 3];
    var v4/* senders */ = [];
    var val = await e.f46(v2/* targets */, v1/* targets_data */, v3/* amounts */, 1, 40002, v4/* senders */);
    console.log("35g");
    var exp_vals = [10000, 400, 900, 555,   400, 100, 360, 390,   33, 33, 45, 45,   40002, 40002, 40002, 40002,   4, 5, 90, 99];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    // 1 - cancel subscription 
    var v1/* targets_data */ = [
      [
        [0],
        [1001, 0, 1, 0, 0, 0, 0],
        [10000, 400],
        [400, 100],
        [40, 55]
      ],
      [
        [0],
        [1001, 0, 0, 0, 0, 0, 0],
        [900, 555],
        [120, 130], 
        [38, 33]
      ],
      [
        [0],
        [5111, 0, 0, 0, 0, 0, 0],
        [24, 54, 887, 965],
        [5000, 6000, 7000, 8000],
        [403, 449, 90, 3]
      ]
    ];
    var v2/* targets */ = [33, 45, 66];
    var v3/* amounts */ = [1, 3, 2];
    var v4/* senders */ = [40002, 40002, 40002];
    var val = await e.f46(v2/* targets */, v1/* targets_data */, v3/* amounts */, 1, 0, v4/* senders */);
    console.log("35h");
    var exp_vals = [10000, 400, 900, 555, 24, 54, 887, 965,   400, 100, 360, 390, 10000, 12000, 14000, 16000,   33, 33, 45, 45, 66, 66, 66, 66,   40002, 40002, 40002, 40002, 40002, 40002, 40002, 40002,  40, 55, 38, 33, 403, 449, 90, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    // 0 - pay subscription, subscription beneficiary defined
    var v1/* targets_data */ = [
      [
        [0],
        [1001, 0, 0, 0, 0, 0, 1004],
        [10000],
        [400],
        [1]
      ]
    ];
    var v2/* targets */ = [33];
    var v3/* amounts */ = [1];
    var v4/* senders */ = [];
    var val = await e.f46(v2/* targets */, v1/* targets_data */, v3/* amounts */, 0, 40002, v4/* senders */);
    console.log("35i");
    var exp_vals = [10000, 400, 40002, 1004, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    // 2 - collect subscription, can_cancel_subscription = 1 true
    var v1/* targets_data */ = [
      [
        [0],
        [1001, 0, 1, 0, 0, 0, 0],
        [10000, 400],
        [400, 100],
        [12, 3]
      ]
    ];
    var v2/* targets */ = [33];
    var v3/* amounts */ = [1];
    var v4/* senders */ = [];
    var val = await e.f46(v2/* targets */, v1/* targets_data */, v3/* amounts */, 2, 40002, v4/* senders */);
    console.log("35j");
    var exp_vals = [10000, 400,  400, 100,  33, 33,  1001, 1001,  12, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    // 2 - collect subscription , can_cancel_subscription = 1 true
    var v1/* targets_data */ = [
      [
        [0],
        [1001, 0, 1, 0, 0, 0, 135],
        [10000, 400],
        [400, 100],
        [12, 34]
      ]
    ];
    var v2/* targets */ = [33];
    var v3/* amounts */ = [1];
    var v4/* senders */ = [];
    var val = await e.f46(v2/* targets */, v1/* targets_data */, v3/* amounts */, 2, 40002, v4/* senders */);
    console.log("35k");
    var exp_vals = [10000, 400,  400, 100,  33, 33,  135, 135,  12, 34];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });

  /* recheck_contracts/check_contract_data(): checks if contract data is valid */
  xit("36. can run f47/f48", async () => {
    //valid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 6000, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0/* 16 */, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 38 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36a");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.not.be.reverted;


    //valid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, bgN(1, 70), 0, 1/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36b");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.not.be.reverted;



    //valid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, bgN(1, 70), 0, 1/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, bgN(1, 30), 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36c");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.not.be.reverted;


    //invalid contract object
    var v1/* contract_nums */ = [
      [
        [32],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, bgN(1, 70), 0, 1/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, bgN(1, 30), 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36d");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;

    //invalid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 33), 0, 0/* 3 */, 0, 6000, bgN(1, 70), 0, 1/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, bgN(1, 30), 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36e");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;


    //invalid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 400, bgN(1, 70), 0, 1/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, bgN(1, 30), 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36f");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;


    //invalid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, bgN(1, 70), 0, 5/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, bgN(1, 30), 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36g");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;


    //valid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 100, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, bgN(1, 30), 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36h");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.not.be.reverted;


    //valid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, bgN(1, 40), 0, 1/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, bgN(1, 30), 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36i");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.not.be.reverted;


    //invalid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, bgN(1, 70), 0, 1/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 20, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36j");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;




    //invalid main contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, bgN(1, 70), 0, 1/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [2];
    console.log("36k");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;


    //invalid main contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, bgN(1, 70), 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, bgN(1, 30), 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [2];
    console.log("36l");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;


    //invalid main contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 0, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 7, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [2];
    console.log("36m");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;

    //invalid main contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 2, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [2];
    console.log("36n");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;


    //2 valid contracts, invalid main contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 6000, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ],
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 2, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ],
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 6000, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [4003, 2, 200];
    console.log("36o");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;


    //invalid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 6000, bgN(4, 19), 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36p");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;


    //valid main contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 0, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [2];
    console.log("36q");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.not.be.reverted;



    //invalid main contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 0, 100, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [2];
    console.log("36r");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;



    //invalid main contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 0, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,1/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [2];
    console.log("36s");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;



    //invalid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, bgN(1, 70), 0, 1/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,7/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36t");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;



    //invalid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, bgN(1, 70), 0, 1/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36u");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;



    //valid contract object, custom absolute_proposal_expiry_duration_limit defined
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 5000/* 5 */, 6000, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0/* 16 */, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var presets = [
      [1, 2, 1, 30, 4000]
    ];
    await e.set_preset_data(presets);
    var v2/* targets */ = [1000];
    console.log("36v");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.not.be.reverted;
    await e.delete_preset_data(presets);



    //valid contract object, custom absolute_proposal_expiry_duration_limit defined
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6003/* 5 */, 6000, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0/* 16 */, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var presets = [
      [1, 2, 1, 30, 40000]
    ];
    await e.set_preset_data(presets);
    var v2/* targets */ = [1000];
    console.log("36w");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //invalid main contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 0, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [2];
    console.log("36x");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;



    //invalid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 6000, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0/* 16 */, 0,0,0,0,0/* 21 */,0,0,0,0/* 25 */,0,0,0,0/* 29 */,0, 73, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36y");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;



    //invalid main contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 0, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,1/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [2];
    console.log("36z");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;



    //invalid main contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 0, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 33/* 32 */, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [2];
    console.log("36aa");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;



     //invalid main contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 0, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0/* 32 */, 0, 0, 303, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [2];
    console.log("36ab");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;



    //invalid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 6000, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0/* 16 */, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [bgN(101, 16)],
        [0]
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36ac");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;



    //invalid contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 6000, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0/* 16 */, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0/* 34 */, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [bgN(100, 16)],
        [33]
      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36ad");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;




    //valid contract object, proposal expiry set for specific proposal types
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 0, 6000, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0/* 16 */, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0/* 34 */, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],/* 4 */
        [bgN(100, 16)],
        [1],
        [0],/* 7 */
        [0],
        [6000]

      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36ae");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.not.be.reverted;



    //valid contract object, proposal expiry set for specific proposal types
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 0, 6000, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0/* 16 */, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0/* 34 */, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [0],/* 4 */
        [bgN(100, 16)],
        [1],
        [0],/* 7 */
        [0],
        [60]

      ]
    ];
    var v2/* targets */ = [1000];
    console.log("36af");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;




    //invalid main contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 0, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [2];
    console.log("36ag");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;




    //invalid main contract object
    var v1/* contract_nums */ = [
      [
        [30],
        [0, bgN(5, 16), 0, 0/* 3 */, 0, 6000, 0, 0, 0/* 8 */, 0, 0, 0, 0, 0/* 13 */, 0, 0, 0,0,0,0,0/* 20 */,0,0,0,0/* 24 */,0,0,0,0/* 28 */,0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0/* 39 */],
        [0],
        [0],
        [],
        [],
        []
      ]
    ];
    var v2/* targets */ = [2];
    console.log("36ah");
    await expect(e.f47(v1/* contract_nums */, v2/* targets */)).to.be.reverted;

  });





  /* get_archive_nested_account_data(): gets nested account ids and exchange ids used in archiving contracts and proposal objects */
  xit("37. can run f49", async () => {
    //3 targets
    var _ints = [
      [30000, 0],
      [35, 45, 55],
      [23, 23, 23],

      [134, 135, 136],
      [456, 457, 458],
      [1, 0, 2],

      [556, 557, 558],
      [2002, 2004, 2006],
      [2, 0, 0],

      [1556, 1557, 1558],
      [12002, 12004, 12006],
      [0, 3, 7]
    ];
    var targets = [133, 455, 555];
    var val = await e.f49(_ints, targets);
    console.log("37a");
    var exp_vals = [134, 135, 136, 556, 557, 558, 1556, 1557, 1558, 456, 457, 458, 2002, 2004, 2006, 12002, 12004, 12006, 1, 0, 2, 2, 0, 0, 0, 3, 7];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //2 targets
    var _ints = [
      [30000, 0],
      [35, 45],
      [23, 23],

      [134, 135, 136],
      [456, 457, 458],
      [2, 0, 33],

      [556, 557, 558, 1556, 1557, 1558],
      [2002, 2004, 2006, 12002, 12004, 12006],
      [2, 0, 1, 33, 44, 55],
    ];
    var targets = [133, 455];
    var val = await e.f49(_ints, targets);
    console.log("37b");
    var exp_vals = [134, 135, 136, 556, 557, 558, 1556, 1557, 1558, 456, 457, 458, 2002, 2004, 2006, 12002, 12004, 12006, 2, 0, 33, 2, 0, 1, 33, 44, 55];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //1 targets
    var _ints = [
      [30000, 0],
      [35],
      [23],

      [134, 135, 136, 400],
      [456, 457, 458, 700],
      [2, 2, 0, 55],
    ];
    var targets = [133];
    var val = await e.f49(_ints, targets);
    console.log("37c");
    var exp_vals = [134, 135, 136, 400, 456, 457, 458, 700, 2, 2, 0, 55];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //3 targets
    var _ints = [
      [30000, 0],
      [35, 45, 55],
      [23, 23, 23],

      [134, 135],
      [456, 457],
      [2, 87],

      [556, 557, 558],
      [2002, 2004, 2006],
      [23, 7, 90],

      [1556],
      [12002],
      [25],
    ];
    var targets = [133, 455, 555];
    var val = await e.f49(_ints, targets);
    console.log("37d");
    var exp_vals = [134, 135, 556, 557, 558, 1556, 456, 457, 2002, 2004, 2006, 12002, 2, 87, 23, 7, 90, 25];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //3 targets, invalid data
    var _ints = [
      [30000, 0],
      [35, 45, 55],
      [23, 23, 23],

      [134, 135],
      [456, 457],
      [2, 0],

      [556, 557, 558],
      [2002, 2004, 2006],
      [2, 10, 20],

      [1556]
    ];
    var targets = [133, 455, 555];
    console.log("37e");
    await expect(e.f49(_ints, targets)).to.be.reverted;



    //3 targets, invalid data
    var _ints = [
      [30000, 0],
      [35, 45, 55],
      [23, 23, 23],

      [134, 135],
      [456, 457],
      [2, 0],

      [556, 557, 558],
      [2002, 2004, 2006]
      [2, 0, 0],
    ];
    var targets = [133, 455, 555];
    console.log("37f");
    await expect(e.f49(_ints, targets)).to.be.reverted;


    //3 targets, invalid data
    var _ints = [
      [30000, 0],
      [35, 45, 55],
      [23, 23, 23],

      [134, 135],
      [456, 457],
      [2, 0],

      [556, 557, 558],
      [2002, 2004, 2006],
      [2, 0, 0],

      [1556],
      [200],
      [2],
    ];
    var targets = [133, 455, 555, 556];
    console.log("37g");
    await expect(e.f49(_ints, targets)).to.be.reverted;


    //3 targets, invalid data
    var _ints = [
      [30000, 0],
      [35, 45, 55],
      [23, 23, 23],

      [134, 135],
      [456, 457]
      [2, 0],
    ];
    var targets = [133, 455, 555];
    console.log("37h");
    await expect(e.f49(_ints, targets)).to.be.reverted;


  });

  /* ensure_minimum_amount(): ensures correct exchange and amount data set for contract entry actions */
  xit("38. can run f50", async () => {
    //Target: 1000 SPEND
    var v1/* exchanges */ = [5, 400, 800];
    var v2/* amounts */ = [1001, 4000, 700000];
    console.log("38a");

    await expect(e.f50(v1/* exchanges */, v2/* amounts */, 1000, 1000, bgN(20, 9), bgN(200, 9), bgN(1, 18), false)).to.not.be.reverted;



    //Target: 500 END
    var v1/* exchanges */ = [3, 400, 800];
    var v2/* amounts */ = [500, 4000, 700000];
    console.log("38b");

    await expect(e.f50(v1/* exchanges */, v2/* amounts */, 1000, 1000, bgN(20, 9), bgN(10, 9), bgN(1, 18), false)).to.not.be.reverted;


    //Target: Invalid first exchange
    var v1/* exchanges */ = [2, 400, 800];
    var v2/* amounts */ = [500, 4000, 700000];
    console.log("38c");

    await expect(e.f50(v1/* exchanges */, v2/* amounts */, 1000, 1000, bgN(20, 9), bgN(10, 9), bgN(1, 18), false)).to.be.reverted;


    //Target: Invalid minimum amount
    var v1/* exchanges */ = [3, 400, 800];
    var v2/* amounts */ = [50, 4000, 700000];
    console.log("38d");

    await expect(e.f50(v1/* exchanges */, v2/* amounts */, 1000, 1000, bgN(20, 9), bgN(10, 9), bgN(1, 18), false)).to.be.reverted;



    //Target: Invalid minimum amount
    var v1/* exchanges */ = [5, 400, 800];
    var v2/* amounts */ = [999, 4000, 700000];
    console.log("38e");

    await expect(e.f50(v1/* exchanges */, v2/* amounts */, 1000, 1000, bgN(20, 9), bgN(200, 9), bgN(1, 18), false)).to.be.reverted;



    //Target: Invalid minimum amount
    var v1/* exchanges */ = [5, 400, 800];
    var v2/* amounts */ = [999, 4000, 700000];
    console.log("38f");

    await expect(e.f50(v1/* exchanges */, v2/* amounts */, 1000, 1000, bgN(20, 9), bgN(200, 9), bgN(1, 18), true)).to.be.reverted;



    //Target: valid minimum spend amount
    var v1/* exchanges */ = [5, 400, 800];
    var v2/* amounts */ = [1002, 4000, 700000];
    console.log("38g");

    await expect(e.f50(v1/* exchanges */, v2/* amounts */, 1000, 1000, bgN(20, 9), bgN(200, 9), bgN(1, 18), false)).to.not.be.reverted;

  });

  /* can_update_main_contract_limit_data(): returns true if target array item passed needs to be updated in the E5 Contract*/
  xit("39. can run f51", async () => {
    var val = await e.f51(11);
    console.log("39a");
    expect(await val).to.equal(true);

    var val = await e.f51(12);
    console.log("39b");
    expect(await val).to.equal(true);

    var val = await e.f51(13);
    console.log("39c");
    expect(await val).to.equal(true);

    var val = await e.f51(14);
    console.log("39d");
    expect(await val).to.equal(true);

    var val = await e.f51(15);
    console.log("39e");
    expect(await val).to.equal(false);

    var val = await e.f51(16);
    console.log("39f");
    expect(await val).to.equal(true);

    var val = await e.f51(19);
    console.log("39g");
    expect(await val).to.equal(true);

    var val = await e.f51(21);
    console.log("39h");
    expect(await val).to.equal(false);

    var val = await e.f51(25);
    console.log("39i");
    expect(await val).to.equal(true);

    var val = await e.f51(26);
    console.log("39j");
    expect(await val).to.equal(true);

    var val = await e.f51(32);
    console.log("39k");
    expect(await val).to.equal(true);
  });



  /* fetch_modify_targets(): gets the modify targets stored in each reconfig consensus object */
  xit("40. can run f52", async () => {
    var v1/* target_nums */ = [
      [[0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 400], [0]]
    ];
    var val = await e.f52(v1/* target_nums */);
    console.log("40a");
    var exp_vals = [400];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* target_nums */ = [
      [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 400], [0]],
      [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 555], [0]],
      [[0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 400], [0]],
      [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 3456], [0]]
    ];
    var val = await e.f52(v1/* target_nums */);
    console.log("40b");
    var exp_vals = [400, 555, 0, 3456];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* target_nums */ = [
      [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 401], [0]],
      [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 555], [0]],
      [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 3476], [0]]
    ];
    var val = await e.f52(v1/* target_nums */);
    console.log("40c");
    var exp_vals = [401, 555, 3476];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* target_nums */ = [
      [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 401], [0]],
      [[0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 555], [0]],
      [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 3476], [0]]
    ];
    var val = await e.f52(v1/* target_nums */);
    console.log("40d");
    var exp_vals = [401, 0, 3476];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* target_nums */ = [
      [[0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 401], [0]],
      [[0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 555], [0]],
      [[0], [16, 0, 0, 0, 0, 0, 0, 0, 0, 3476], [0]]
    ];
    var val = await e.f52(v1/* target_nums */);
    console.log("40e");
    var exp_vals = [0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* target_nums */ = [
      [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 309], [0]],
      [[0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 555], [0]],
      [[0], [16, 0, 0, 0, 0, 0, 0, 0, 0, 3476], [0]]
    ];
    var val = await e.f52(v1/* target_nums */);
    console.log("40f");
    var exp_vals = [309, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });

  /* get_array_group_from_size(): returns 5 arrays at requested size */
  xit("41. can run f53", async () => {
    var val = await e.f53(3);
    console.log("41a");
    var exp_vals = [3, 3, 3, 3, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.f53(4);
    console.log("41b");
    var exp_vals = [4, 4, 4, 4, 4];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.f53(14);
    console.log("41c");
    var exp_vals = [14, 14, 14, 14, 14];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.f53(0);
    console.log("41d");
    var exp_vals = [0, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.f53(1);
    console.log("41e");
    var exp_vals = [1, 1, 1, 1, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });

  /* reconfig_data_setup(): sets up arrays used to store reconfig action data  */
  xit("42. can run f54", async () => {
    var v1/* target_nums */ = [
      [
        [0], [1, 0, 0], [10000], [400], [300]
      ]
    ];
    var v2/* targets */ = [1004];
    var v3/* modify_target_types */ = [33];
    var val = await e.f54(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */);
    console.log("42a");
    var exp_vals = [0, 0, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* target_nums */ = [
      [
        [0], [1, 0, 0], [10000], [400],
        [300]
      ],
      [
        [0], [1, 0, 0], [10000], [400, 500, 2],
        [300, 40, 30]
      ]
    ];
    var v2/* targets */ = [1004, 2004];
    var v3/* modify_target_types */ = [33, 33];
    var val = await e.f54(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */);
    console.log("42b");
    var exp_vals = [0, 0, 4];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* target_nums */ = [
      [
        [0], [1, 0, 0], [10000], [400],
        [300]
      ],
      [
        [0], [1, 0, 0], [10000], [400, 500, 2],
        [300, 40, 30]
      ],
      [
        [0], [1, 0, 0], [10000], [400, 500, 2],
        [300, 30]
      ],
      [
        [0], [1, 0, 0], [10000], [400, 500, 2, 1, 1],
        [300, 40, 30, 5, 60]
      ]
    ];
    var v2/* targets */ = [1004, 2004, 3004, 5004];
    var v3/* modify_target_types */ = [33, 33, 31, 30];
    var val = await e.f54(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */);
    console.log("42c");
    var exp_vals = [5, 2, 4];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* target_nums */ = [
      [
        [0], [1001, 0, 0], [10000], [400],
        [300]
      ],
      [
        [0], [1, 0, 0], [10000], [400, 500, 2],
        [300, 40, 30]
      ],
      [
        [0], [1, 0, 0], [10000], [400, 500, 2],
        [300, 30]
      ],
      [
        [0], [1, 0, 0], [10000], [400, 500, 2, 1, 1],
        [300, 40, 30, 5, 60]
      ]
    ];
    var v2/* targets */ = [1004, 2004, 500, 5000];
    var v3/* modify_target_types */ = [0, 33, 31, 30];
    var val = await e.f54(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */);
    console.log("42d");
    var exp_vals = [5, 2, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* target_nums */ = [
      [
        [0], [1001, 0, 0], [10000], [400], [300]
      ]
    ];
    var v2/* targets */ = [1004];
    var v3/* modify_target_types */ = [35];
    var val = await e.f54(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */);
    console.log("42e");
    var exp_vals = [0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* target_nums */ = [
      [
        [0], [1, 0, 0], [10000], [400], [300]
      ]
    ];
    var v2/* targets */ = [1004];
    var v3/* modify_target_types */ = [35];
    console.log("42f");
    await expect(e.f54(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */)).to.be.reverted;
  });





  /* get_reconfig_data(): sets up data used in reconfig actions */
  xit("43. can run f55", async () => {
    var v1/* target_nums */ = [
      [
        [0], [1, 0, 0, 0, 0, 66/* 5 */, 0, 0, 0, 90], [10000], [400], [30], [44], [55]
      ]
    ];
    var v2/* targets */ = [1004];
    var v3/* modify_target_types */ = [33];
    var val = await e.f55(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */);
    console.log("43a");
    var exp_vals = [90, 30, 44, 55, 66];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* target_nums */ = [
      [
        [0], [1, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 90], [10000], [400], [31], [44], [56]
      ]
    ];
    var v2/* targets */ = [1004];
    var v3/* modify_target_types */ = [31];
    var val = await e.f55(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */);
    console.log("43b");
    var exp_vals = [90, 31, 44, 56, 660];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* target_nums */ = [
      [
        [0], [1, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 90], [10000], [400], [31], [44], [56]

      ],
      [
        [0], [1, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 91], [10000], [400], [700], [44], [900]
      ]
    ];
    var v2/* targets */ = [1004, 1005];
    var v3/* modify_target_types */ = [31, 33];
    var val = await e.f55(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */);
    console.log("43c");
    var exp_vals = [90, 31, 44, 56, 660, 91, 700, 44, 900, 660];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* target_nums */ = [
      [
        [0], [1, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 90], [10000], [400], [31], [44], [56]

      ],
      [
        [0], [1, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 91], [10000], [400], [700], [44], [900]
      ]
    ];
    var v2/* targets */ = [1004, 1005];
    var v3/* modify_target_types */ = [33, 33];
    var val = await e.f55(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */);
    console.log("43d");
    var exp_vals = [90, 91, 31, 700, 44, 44, 56, 900, 660, 660];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var v1/* target_nums */ = [
      [
        [0], [1, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 90], [10000], [400], [31], [44], [56]
      ],
      [
        [0], [1, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 91], [10000], [400], [700], [44], [900]
      ],
      [
        [0], [1, 0, 0, 0, 0, 560/* 5 */, 0, 0, 0, 97], [10000], [400], [700], [44], [900]
      ]
    ];
    var v2/* targets */ = [1004, 1005, 5005];
    var v3/* modify_target_types */ = [33, 33, 30];
    var val = await e.f55(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */);
    console.log("43e");
    var exp_vals = [97, 700, 44, 900, 560, 90, 91, 31, 700, 44, 44, 56, 900, 660, 660];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* target_nums */ = [
      [
        [0], [2, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 90], [10000], [400], [31], [44], [56]
      ],
      [
        [0], [1, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 91], [10000], [400], [700], [44], [900]
      ],
      [
        [0], [1, 0, 0, 0, 0, 560/* 5 */, 0, 0, 0, 97], [10000], [400], [700], [44], [900]
      ]
    ];
    var v2/* targets */ = [1004, 1005, 5005];
    var v3/* modify_target_types */ = [33, 33, 30];
    var val = await e.f55(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */);
    console.log("43f");
    var exp_vals = [97, 700, 44, 900, 560, 91, 700, 44, 900, 660];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* target_nums */ = [
      [
        [0], [0, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 90], [10000], [400], [31], [44], [56]
      ],
      [
        [0], [1, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 91], [10000], [400], [700], [44], [900]
      ],
      [
        [0], [0, 0, 0, 0, 0, 560/* 5 */, 0, 0, 0, 97], [10000], [400], [700], [44], [900]
      ]
    ];
    var v2/* targets */ = [1004, 1005, 5005];
    var v3/* modify_target_types */ = [33, 33, 30];
    var val = await e.f55(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */);
    console.log("43g");
    var exp_vals = [91, 700, 44, 900, 660];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* target_nums */ = [
      [
        [0], [1, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 90], [10000], [400], [31], [44], [56]
      ],
      [
        [0], [1, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 91], [10000], [400], [700], [44], [900]
      ],
      [
        [0], [0, 0, 0, 0, 0, 560/* 5 */, 0, 0, 0, 97], [10000], [400], [700], [44], [900]
      ]
    ];
    var v2/* targets */ = [1004, 1005, 5005];
    var v3/* modify_target_types */ = [33, 33, 30];
    var val = await e.f55(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */);
    console.log("43h");
    var exp_vals = [90, 91, 31, 700, 44, 44, 56, 900, 660, 660];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* target_nums */ = [
      [
        [0], [1, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 90], [10000], [400], [31], [44], [56]
      ],
      [
        [0], [1, 0, 0, 0, 0, 660/* 5 */, 0, 0, 0, 91], [10000], [400], [700], [44], [900]
      ],
      [
        [0], [0, 0, 0, 0, 0, 560/* 5 */, 0, 0, 0, 97], [10000], [400], [700], [44], [900]
      ]
    ];
    var v2/* targets */ = [1004, 1005, 5005];
    var v3/* modify_target_types */ = [33, 3, 30];
    console.log("43i");
    await expect(e.f55(v2/* targets */, v1/* target_nums */, v3/* modify_target_types */)).to.be.reverted;
  });

  /* get_exchanges_count/get_mint_dump_exchanges_count(): sets up data arrays used to store spend/buy/mint/dump/freeze/unfreeze action data */
  xit("44. can run f56/f57", async () => {
    var val = await e.f56f57(3, 1, 3);
    console.log("44a");
    var exp_vals = [3, 3, 3, 3, 3,   3, 3, 3, 3, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.f56f57(4, 1, 3);
    console.log("44b");
    var exp_vals = [4, 4, 4, 4, 4,   4, 4, 4, 4, 4];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.f56f57(4, 2, 3);
    console.log("44c");
    var exp_vals = [8, 8, 8, 8, 8,   4, 4, 4, 4, 4];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var val = await e.f56f57(5, 3, 3);
    console.log("44d");
    var exp_vals = [15, 15, 15, 15, 15,   5, 5, 5, 5, 5];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.f56f57(0, 1, 3);
    console.log("44e");
    var exp_vals = [0, 0, 0, 0, 0,   0, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.f56f57(1, 1, 3);
    console.log("44f");
    var exp_vals = [1, 1, 1, 1, 1,   1, 1, 1, 1, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var val = await e.f56f57(1, 1, 5);
    console.log("44g");
    var exp_vals = [1, 1, 1, 1, 1,   1, 1, 1, 1, 1,  1, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var val = await e.f56f57(4, 1, 5);
    console.log("44h");
    var exp_vals = [4, 4, 4, 4, 4,   4, 4, 4, 4, 4,  4, 4];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

  });

  /* calculate_share_for_buy_spend_consensus(): calculates and returns a proportion of an amount and its remainder */
  xit("45. can run f58", async () => {
    //small amount, target = 50%
    var val = await e.f58(bgN(100, 20), bgN(50, 16));
    console.log("45a");
    var exp_vals = [bgN(50, 20), bgN(50, 20)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await "" + val[j]).to.equal("" + exp_vals[j]);
    }

    //small amount, target = 0.5%
    var val = await e.f58(bgN(100, 20), bgN(5, 15));
    console.log("45b");
    var exp_vals = [bgN(5, 19), bgN(995, 19)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await "" + val[j]).to.equal("" + exp_vals[j]);
    }

    //small amount, target = 7%
    var val = await e.f58(bgN(100, 20), bgN(7, 16));
    console.log("45c");
    var exp_vals = [bgN(7, 20), bgN(93, 20)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await "" + val[j]).to.equal("" + exp_vals[j]);
    }

    //small amount, target = 1%
    var val = await e.f58(bgN(100, 30), bgN(1, 16));
    console.log("45d");
    var exp_vals = [bgN(1, 30), bgN(99, 30)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await "" + val[j]).to.equal("" + exp_vals[j]);
    }


    //large amount, target = 1%
    var val = await e.f58(bgN(100, 60), bgN(1, 16));
    console.log("45e");
    var exp_vals = [bgN(1, 60), bgN(99, 60)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await "" + val[j]).to.equal("" + exp_vals[j]);
    }

    //large amount, target = 33%
    var val = await e.f58(bgN(100, 64), bgN(33, 16));
    console.log("45f");
    var exp_vals = [bgN(33, 64), bgN(67, 64)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await "" + val[j]).to.equal("" + exp_vals[j]);
    }


    //large amount, target = 8%
    var val = await e.f58(bgN(100, 71), bgN(8, 16));
    console.log("45g");
    var exp_vals = [bgN(8, 71), bgN(92, 71)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await "" + val[j]).to.equal("" + exp_vals[j]);
    }

    //large amount, target = 0.8%
    var val = await e.f58(bgN(100, 71), bgN(8, 15));
    console.log("45h");
    var exp_vals = [bgN(8, 70), bgN(992, 70)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await "" + val[j]).to.equal("" + exp_vals[j]);
    }

    //large amount, target = 0.08%
    var val = await e.f58(bgN(100, 71), bgN(8, 14));
    console.log("45i");
    var exp_vals = [bgN(8, 69), bgN(9992, 69)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await "" + val[j]).to.equal("" + exp_vals[j]);
    }
  });





  /* get_mult_exchanges_count(): gets 4 arrays with required length for use in transfer actions */
  xit("46. can run f59", async () => {
    var v1/* targets_data */ = [
      [[0], [0, 0, 0], [10000], [400], [300]]
    ];
    var val = await e.f59(v1/* targets_data */);
    console.log("46a");
    var exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* targets_data */ = [
      [[0], [0, 0, 0], [10000, 4000], [400], [300]]
    ];
    var val = await e.f59(v1/* targets_data */);
    console.log("46b");
    var exp_vals = [2, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* targets_data */ = [
      [[0], [0, 0, 0], [10000, 4000, 300], [400], [300]]
    ];
    var val = await e.f59(v1/* targets_data */);
    console.log("46c");
    var exp_vals = [3, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* targets_data */ = [
      [[0], [0, 0, 0], [10000, 4000, 300], [400], [300]],
      [[0], [0, 0, 0], [10000, 300], [400], [300]]
    ];
    var val = await e.f59(v1/* targets_data */);
    console.log("46d");
    var exp_vals = [5, 5];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* targets_data */ = [
      [[0], [0, 0, 0], [10000, 4000, 300], [400], [300]],
      [[0], [0, 0, 0], [10000], [400], [300]]
    ];
    var val = await e.f59(v1/* targets_data */);
    console.log("46e");
    var exp_vals = [4, 4];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* targets_data */ = [
      [[0], [0, 0, 0], [10000, 4000, 300, 500], [400], [300]],
      [[0], [0, 0, 0], [10000], [400], [300]],
      [[0], [0, 0, 0], [50, 44], [400], [300]]
    ];
    var val = await e.f59(v1/* targets_data */);
    console.log("46f");
    var exp_vals = [7, 7];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });

  /* get_consensus_mint_dump_data_get_freeze_unfreeze_data(): both functions return 5 arrays used in freeze/unfreeze and mint/dump consensus actions */
  xit("47. can run f60/f61/f208", async () => {
    //
    var v1/* target_nums */ = [
      [[0], [4, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0], [35], [47], [885], [686], [4], [0], [0], [0], [0]],
      [[0], [3, 0, 0, 0, 0, 96/* 5 */, 0, 0, 0, 0], [0], [0], [30], [44], [55], [66], [0], [0], [0], [0]]
    ];
    var v2/* targets */ = [1004, 3009];
    var v3/* consensus_type_data */ = [0, 0, 0, 1/* 3 */, 1, 0, 0/* 6 */, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    // var val = await e.f60f61(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */, 3);
    // console.log("47a");
    // var exp_vals = [0, 30, 44, 55, 96, 0,   35, 47, 885, 4, 67, 686];
    // for (let j = 0; j < exp_vals.length; j++) {
    //   expect(await val[j]).to.equal(exp_vals[j]);
    // }


    var v1/* target_nums */ = [
      [[0], [4, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0], [35], [47], [885], [686], [5], [0], [0], [0], [0]],
      [[0], [3, 0, 0, 0, 0, 96/* 5 */, 0, 0, 0, 0], [0], [0], [30], [44], [55], [66], [0], [0], [0], [0]],
      [[0], [3, 0, 0, 0, 0, 596/* 5 */, 0, 0, 0, 0], [0], [0], [700], [568], [2399], [5000], [0], [0], [0], [0]]
    ];
    var v2/* targets */ = [1004, 3009, 550];
    var v3/* consensus_type_data */ = [0, 0, 0, 2/* 3 */, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var val = await e.f60f61(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */, 3);
    console.log("47b");
    var exp_vals = [0, 0, 30, 700, 44, 568, 55, 2399, 96, 596,   0, 0,   35, 47, 885, 5, 67, 686];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    var v1/* target_nums */ = [
      [[0], [4, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0], [35], [47], [885], [686], [42], [0], [0], [0], [0]],
      [[0], [3, 0, 0, 0, 0, 96/* 5 */, 0, 0, 0, 0], [0], [0], [30], [44], [55], [66], [0], [0], [0], [0]],
      [[0], [3, 0, 0, 0, 0, 596/* 5 */, 0, 0, 0, 0], [0], [0], [700], [568], [2399], [5000], [0], [0], [0], [0]],
      [[0], [3, 0, 0, 0, 0, 700/* 5 */, 0, 0, 0, 0], [0], [0], [444], [555], [6666], [3000], [0], [0], [0]],
      [[0], [4, 0, 0, 0, 0, 676/* 5 */, 0, 0, 0, 0], [0], [0], [356], [476], [8856], [6866], [43], [0], [0], [0], [0]],

      [[0], [2, 0, 0, 0, 0, 676/* 5 */, 0, 0, 0, 0], [0], [0], [356], [476], [8856], [6866], [0], [0], [0], [0]]
    ];
    var v2/* targets */ = [1004, 3009, 550, 6000, 565, 6];
    var v3/* consensus_type_data */ = [0, 0, 1, 3/* 3 */, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var val = await e.f60f61(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */, 3);
    console.log("47c");
    var exp_vals = [
      0, 0, 0, 30, 700, 444, 44, 568, 555, 55, 2399, 6666, 96, 596, 700,  0,0,0,
      35, 356, 47, 476, 885, 8856, 42, 43, 67, 676, 686, 6866
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //broken input
    var v1/* target_nums */ = [
      [[0], [4, 0, 0, 0, 0, 67/* 5 */], [0], [0], [35], [47], [885], [4]],
      [[0], [3, 0, 0, 0, 0, 96/* 5 */], [0], [0], [30], [44], [55], [66]],
      [[0], [3, 0, 0, 0, 0, 596/* 5 */], [0], [0], [700], [568], [2399], [5000]],
      [[0], [3, 0, 0, 0, 0, 700/* 5 */], [0], [0], [444], [555], [6666], [3000]],
      [[0], [4, 0, 0, 0, 0, 676/* 5 */], [0], [0], [356], [476], [8856], [6866], [8]],

      [[0], [2, 0, 0, 0, 0, 676/* 5 */], [0], [0], [356], [476], [8856], [6866]]
    ];
    var v2/* targets */ = [1004, 3009, 550, 6000, 565, 6];
    var v3/* consensus_type_data */ = [0, 0, 1, 3/* 3 */, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    console.log("47d");
    await expect(e.f60f61(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */, 3)).to.be.reverted;


    //broken input
    var v1/* target_nums */ = [
      [[0], [4, 0, 0, 0, 0, 67/* 5 */], [0], [0], [35], [47], [885], [1]],
      [[0], [3, 0, 0, 0, 0, 96/* 5 */], [0], [0], [30], [44], [55], [66]],
      [[0], [3, 0, 0, 0, 0, 596/* 5 */], [0], [0], [700], [568]/* , [2399] */, [5000]],
      [[0], [3, 0, 0, 0, 0, 700/* 5 */], [0], [0], [444], [555], [6666], [3000]],
      [[0], [4, 0, 0, 0, 0, 676/* 5 */], [0], [0], [356], [476], [8856], [1]],

      [[0], [2, 0, 0, 0, 0, 676/* 5 */], [0], [0], [356], [476], [8856], [6866]]
    ];
    var v2/* targets */ = [1004, 3009, 550, 6000, 565, 6];
    var v3/* consensus_type_data */ = [0, 0, 1, 3/* 3 */, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    console.log("47e");
    await expect(e.f60f61(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */, 3)).to.be.reverted;



    //1 mint/dump, 1 freeze/unfreeze, 3 exchanges
    var v1/* target_nums */ = [
      [[0], [4, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0], [35], [47], [885], [686], [2], [0], [0], [0], [0]],
      [[0], [3, 0, 0, 0, 0, 96/* 5 */, 0, 0, 0, 0], [0], [0], [30, 31], [44, 43], [55, 60], [66, 84], [0, 0], [0, 0], [0, 0], [0, 0]]
    ];
    var v2/* targets */ = [1004, 3009];
    var v3/* consensus_type_data */ = [0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var val = await e.f60f61(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */, 3);
    console.log("47f");
    var exp_vals = [
      0, 0, 30, 31, 44, 43, 55, 60, 96, 96,  0, 0,
      35, 47, 885, 2, 67, 686
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //1 mint/dump, 2 freeze/unfreeze, 3 exchanges
    var v1/* target_nums */ = [
      [[0], [4, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0], [35], [47], [885], [686], [4], [0], [0], [0], [0]],
      [[0], [3, 0, 0, 0, 0, 96/* 5 */, 0, 0, 0, 0], [0], [0], [30, 31], [44, 43], [55, 60], [66, 84], [0, 0], [0, 0], [0, 0], [0, 0]],
      [[0], [4, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0], [35, 77], [47, 500], [885, 12900], [686, 6], [4, 7], [0, 0], [0, 0], [0, 0], [0, 0]]
    ];
    var v2/* targets */ = [1004, 3009];
    var v3/* consensus_type_data */ = [0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var val = await e.f60f61(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */, 3);
    console.log("47g");
    var exp_vals = [
      0, 0, 30, 31, 44, 43, 55, 60, 96, 96,  0,0,
      35, 35, 77, 47, 47, 500, 885, 885, 12900, 4, 4, 7, 67, 67, 67, 686, 686, 6
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //swap tokens
    var v1/* target_nums */ = [
      [[0], [4, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0], [35], [47], [885], [686], [4], [0], [0], [0], [0]],
      [[0], [5, 0, 0, 0, 0, 96/* 5 */, 0, 0, 0, 0], [0], [0], [30], [44], [55], [66], [100], [101], [0], [0], [0], [0]]
    ];
    var v2/* targets */ = [1004, 3009];
    var v3/* consensus_type_data */ = [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var val = await e.f60f61(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */, 5);
    console.log("47h");
    var exp_vals = [66, 30, 44, 55, 96,  0,  35, 47, 885, 4, 67, 686,  100, 101];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //2 swap tokens, 1 freeze/unfreeze tokens
    var v1/* target_nums */ = [
      [[0], [4, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0], [35], [47], [885], [686], [4], [0], [0], [0], [0]],
      [[0], [5, 0, 0, 0, 0, 96/* 5 */, 0, 0, 0, 0], [0], [0], [30], [44], [55], [66], [100], [101], [0], [0], [0], [0]],
      [[0], [5, 0, 0, 0, 0, 300/* 5 */, 0, 0, 0, 0], [0], [0], [32], [45], [585], [606], [1000], [1010], [0], [0], [0], [0]]
    ];
    var v2/* targets */ = [1004, 3009, 4004];
    var v3/* consensus_type_data */ = [0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var val = await e.f60f61(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */, 5);
    console.log("47i");
    var exp_vals = [66, 606, 30, 32, 44, 45, 55, 585, 96, 300,  0, 0,  35, 47, 885, 4, 67, 686,  100, 1000, 101, 1010];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

  });//not working!

  /* get_enter_contract_multi_transfer_data(): gets 4 arrays used in multi-transfer actions for entering contracts */
  xit("48. can run f62", async () => {
    var v1/* targets_data */ = [
      [[0], [0, 0, 0, 0, 0], [300], [400], [1]]
    ];
    var v2/* targets */ = [1004];
    var v3/* sender_accounts */ = [];
    var val = await e.f62(v2/* targets */, v1/* targets_data */, 40002, v3/* sender_accounts */);
    console.log("48a");
    var exp_vals = [300, 400, 40002, 1004, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect( val[j]).to.equal(exp_vals[j]);
    }


    var v1/* targets_data */ = [
      [[0], [0, 0, 0, 0, 0], [300], [400], [1]],
      [[0], [0, 0, 0, 0, 0], [252, 7000], [430, 13], [2, 3]]
    ];
    var v2/* targets */ = [1004, 900];
    var v3/* sender_accounts */ = [];
    var val = await e.f62(v2/* targets */, v1/* targets_data */, 40002, v3/* sender_accounts */);
    console.log("48b");
    var exp_vals = [300, 252, 7000, 400, 430, 13, 40002, 40002, 40002, 1004, 900, 900, 1, 2, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect( val[j]).to.equal(exp_vals[j]);
    }


    var v1/* targets_data */ = [
      [[0], [0, 0, 0, 0, 0], [300], [400], [1]],
      [[0], [0, 0, 0, 0, 0], [252, 7000], [9000, 13], [2, 3]],
      [[0], [0, 0, 0, 0, 0], [900, 800, 700], [514, 55, 90], [3, 4, 5]]
    ];
    var v2/* targets */ = [1004, 2005, 3006];
    var v3/* sender_accounts */ = [];
    var val = await e.f62(v2/* targets */, v1/* targets_data */, 40002, v3/* sender_accounts */);
    console.log("48c");
    var exp_vals = [300, 252, 7000, 900, 800, 700, 400, 9000, 13, 514, 55, 90, 40002, 40002, 40002, 40002, 40002, 40002, 1004, 2005, 2005, 3006, 3006, 3006, 1, 2, 3, 3, 4, 5];
    for (let j = 0; j < exp_vals.length; j++) {
      expect( val[j]).to.equal(exp_vals[j]);
    }


    var v1/* targets_data */ = [
      [[0], [0, 0, 0, 0, 0], [300], [404], [1]],
      [[0], [0, 0, 0, 0, 0], [252, 7001], [9000, 13], [2, 3]],
      [[0], [0, 0, 0, 0, 0], [990, 800, 700], [514, 55, 90], [3, 4, 5]]
    ];
    var v2/* targets */ = [1007, 2005, 3006];
    var v3/* sender_accounts */ = [40002, 40003, 40004];
    var val = await e.f62(v2/* targets */, v1/* targets_data */, 0, v3/* sender_accounts */);
    console.log("48d");
    var exp_vals = [300, 252, 7001, 990, 800, 700,   404, 9000, 13, 514, 55, 90,   40002, 40003, 40003, 40004, 40004, 40004,   1007, 2005, 2005, 3006, 3006, 3006,   1, 2, 3, 3, 4, 5];
    for (let j = 0; j < exp_vals.length; j++) {
      expect( val[j]).to.equal(exp_vals[j]);
    }

    //malformed input
    var v1/* targets_data */ = [
      [[0], [0, 0, 0, 0, 0], [300], [404], [1]],
      [[0], [0, 0, 0, 0, 0], [252, 7001], [9000, 13], [1, 2]],
      [[0], [0, 0, 0, 0, 0], [990, 800, 700], [514, 55], [2, 3]]
    ];
    var v2/* targets */ = [1007, 2005, 3006];
    console.log("48e");
    var v3/* sender_accounts */ = [];
    await expect(e.f62(v2/* targets */, v1/* targets_data */, 40002, v3/* sender_accounts */)).to.be.reverted;


    var v1/* targets_data */ = [
      [[0], [0, 0, 0, 0, 0], [300], [404], [1]],
      [[0], [0, 0, 0, 0, 0], [252, 7001], [9000, 13], [1, 2]],
      [[0], [0, 0, 0, 0, 0], [990, 800, 700], [514, 55, 6], [1, 2, 3]]
    ];
    var v2/* targets */ = [1007, 2005, 3006, 6];
    console.log("48f");
    var v3/* sender_accounts */ = [];
    await expect(e.f62(v2/* targets */, v1/* targets_data */, 40002, v3/* sender_accounts */)).to.be.reverted;

  });





  /* get_consensus_buy_spend_data(): gets 4 arrays used in multi-transfer actions for spending tokens in contracts */
  xit("49. can run f63", async () => {
    //1 spend action
    var v1/* target_nums */ = [
      [[0], [0, 0, 0, 0, 0, 66], [0], [0], [300]/* 4 */, [400], [199], [1]]
    ];
    var v2/* exchange_trust_fees_data */ = [
      [[bgN(50, 16)]],
      [[2]]
    ];
    var v3/* targets */ = [1004];
    var v4/* target_payers_for_buy_data */ = [];
    var v5/* consensus_type_data */ = [1, 0, 0, 0, 0];

    var val = await e.f63(v3/* targets */, v1/* target_nums */, v4/* target_payers_for_buy_data */, v2/* exchange_trust_fees_data */, v5/* consensus_type_data */);

    console.log("49a");
    var exp_vals = [300, 300, 200, 200, 66, 66, 199, 2, 1, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //1 spend action, 2 exchanges
    var v1/* target_nums */ = [
      [[0], [0, 0, 0, 0, 0, 66], [0], [0], [300, 550]/* 4 */, [400, 800], [199, 900], [1, 2]]
    ];
    var v2/* exchange_trust_fees_data */ = [
      [[bgN(50, 16), bgN(10, 16)]],
      [[2, 1999]]
    ];
    var v3/* targets */ = [1004];
    var v4/* target_payers_for_buy_data */ = [];
    var v5/* consensus_type_data */ = [2, 0, 0, 0, 0];

    var val = await e.f63(v3/* targets */, v1/* target_nums */, v4/* target_payers_for_buy_data */, v2/* exchange_trust_fees_data */, v5/* consensus_type_data */);

    console.log("49b");
    var exp_vals = [300, 300, 550, 550, 200, 200, 720, 80, 66, 66, 66, 66, 199, 2, 900, 1999, 1, 1, 2, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    //2 spend actions, 3 exchanges
    var v1/* target_nums */ = [
      [[0], [0, 0, 0, 0, 0, 66], [0], [0], [300, 550]/* 4 */, [400, 800], [199, 900], [1, 3]],
      [[0], [0, 0, 0, 0, 0, 84], [0], [0], [555]/* 4 */, [100], [1994], [4]]
    ];
    var v2/* exchange_trust_fees_data */ = [
      [[bgN(50, 16), bgN(10, 16)], [bgN(1, 16)]],
      [[2, 1999], [1]]
    ];
    var v3/* targets */ = [1004, 88];
    var v4/* target_payers_for_buy_data */ = [];
    var v5/* consensus_type_data */ = [3, 0, 0, 0, 0];

    var val = await e.f63(v3/* targets */, v1/* target_nums */, v4/* target_payers_for_buy_data */, v2/* exchange_trust_fees_data */, v5/* consensus_type_data */);

    console.log("49c");
    var exp_vals = [300, 300, 550, 550, 555, 555, 200, 200, 720, 80, 99, 1, 66, 66, 66, 66, 84, 84, 199, 2, 900, 1999, 1994, 1,  1, 1, 3, 3, 4, 4 ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //1 buy action, 1 exchange
    var v1/* target_nums */ = [
      [[0], [2, 0, 0, 0, 0, 86], [0], [0], [304]/* 4 */, [400], [199], [1]]
    ];
    var v2/* exchange_trust_fees_data */ = [
      [[bgN(60, 16)]],
      [[2]]
    ];
    var v3/* targets */ = [1004];
    var v4/* target_payers_for_buy_data */ = [1333];
    var v5/* consensus_type_data */ = [0, 0, 1, 0, 0];

    var val = await e.f63(v3/* targets */, v1/* target_nums */, v4/* target_payers_for_buy_data */, v2/* exchange_trust_fees_data */, v5/* consensus_type_data */);

    console.log("49d");
    var exp_vals = [304, 304, 160, 240, 1333, 1333, 86, 2,  1, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //1 buy action, 2 exchanges
    var v1/* target_nums */ = [
      [[0], [2, 0, 0, 0, 0, 86], [0], [0], [304, 9000]/* 4 */, [400, 500], [199, 488], [1, 7]]
    ];
    var v2/* exchange_trust_fees_data */ = [
      [[bgN(60, 16), bgN(10, 16)]],
      [[2, 1003]]
    ];
    var v3/* targets */ = [1004];
    var v4/* target_payers_for_buy_data */ = [1333];
    var v5/* consensus_type_data */ = [0, 0, 2, 0, 0];

    var val = await e.f63(v3/* targets */, v1/* target_nums */, v4/* target_payers_for_buy_data */, v2/* exchange_trust_fees_data */, v5/* consensus_type_data */);

    console.log("49e");
    var exp_vals = [304, 304, 9000, 9000, 160, 240, 450, 50, 1333, 1333, 1333, 1333, 86, 2, 86, 1003, 1, 1, 7, 7];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //2 buy action, 2 exchanges
    var v1/* target_nums */ = [
      [[0], [2, 0, 0, 0, 0, 86], [0], [0], [304, 9000]/* 4 */, [400, 500], [199, 488], [4, 3]],
      [[0], [2, 0, 0, 0, 0, 186], [0], [0], [555, 6000]/* 4 */, [800, 300], [499, 987], [1, 5]]
    ];
    var v2/* exchange_trust_fees_data */ = [
      [[bgN(60, 16), bgN(10, 16)], [bgN(30, 16), bgN(20, 16)]],
      [[2, 1003], [3, 9003]]
    ];
    var v3/* targets */ = [1004, 2004];
    var v4/* target_payers_for_buy_data */ = [1333, 4003];
    var v5/* consensus_type_data */ = [0, 0, 4, 0, 0];

    var val = await e.f63(v3/* targets */, v1/* target_nums */, v4/* target_payers_for_buy_data */, v2/* exchange_trust_fees_data */, v5/* consensus_type_data */);

    console.log("49f");
    var exp_vals = [
      304, 304, 9000, 9000, 555, 555, 6000, 6000,
      160, 240, 450, 50, 560, 240, 240, 60,
      1333, 1333, 1333, 1333, 4003, 4003, 4003, 4003,
      86, 2, 86, 1003, 186, 3, 186, 9003, 
      4, 4, 3, 3, 1, 1, 5, 5
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //1 spend action, 1 buy action,  3 exchanges
    var v1/* target_nums */ = [
      [[0], [0, 0, 0, 0, 0, 66], [0], [0], [300, 550]/* 4 */, [400, 800], [199, 900], [1, 4]],
      [[0], [2, 0, 0, 0, 0, 84], [0], [0], [555]/* 4 */, [100], [1994], [2]]
    ];
    var v2/* exchange_trust_fees_data */ = [
      [[bgN(50, 16), bgN(10, 16)], [bgN(1, 16)]],
      [[2, 1999], [1]]
    ];
    var v3/* targets */ = [1004, 88];
    var v4/* target_payers_for_buy_data */ = [0, 333];
    var v5/* consensus_type_data */ = [2, 0, 1, 0, 0];

    var val = await e.f63(v3/* targets */, v1/* target_nums */, v4/* target_payers_for_buy_data */, v2/* exchange_trust_fees_data */, v5/* consensus_type_data */);

    console.log("49g");
    var exp_vals = [
      300, 300, 550, 550, 555, 555,
      200, 200, 720, 80, 99, 1,
      66, 66, 66, 66, 333, 333,
      199, 2, 900, 1999, 84, 1,
      1, 1, 4, 4, 2, 2, 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //2 spend actions, 1 buy action,  4 exchanges
    var v1/* target_nums */ = [
      [[0], [0, 0, 0, 0, 0, 66], [0], [0], [300, 550]/* 4 */, [400, 800], [199, 900], [1, 74]],
      [[0], [2, 0, 0, 0, 0, 84], [0], [0], [555]/* 4 */, [100], [1994], [1]],
      [[0], [0, 0, 0, 0, 0, 700], [0], [0], [6004]/* 4 */, [800], [223], [3]]
    ];
    var v2/* exchange_trust_fees_data */ = [
      [[bgN(50, 16), bgN(10, 16)], [bgN(1, 16)], [bgN(10, 16)]],
      [[2, 1999], [1], [0]]
    ];
    var v3/* targets */ = [1004, 88, 199];
    var v4/* target_payers_for_buy_data */ = [0, 333, 0];
    var v5/* consensus_type_data */ = [3, 0, 1, 0, 0];

    var val = await e.f63(v3/* targets */, v1/* target_nums */, v4/* target_payers_for_buy_data */, v2/* exchange_trust_fees_data */, v5/* consensus_type_data */);

    console.log("49h");
    var exp_vals = [
      300, 300, 550, 550, 555, 555, 6004, 6004,
      200, 200, 720, 80, 99, 1, 720, 80,
      66, 66, 66, 66, 333, 333, 700, 700,
      199, 2, 900, 1999, 84, 1, 223, 0, 
      1, 1, 74, 74, 1, 1, 3, 3
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //2 spend action, 2 buy action,  5 exchanges
    var v1/* target_nums */ = [
      [[0], [0, 0, 0, 0, 0, 66], [0], [0], [300, 550]/* 4 */, [400, 800], [199, 900], [1, 3]],
      [[0], [2, 0, 0, 0, 0, 84], [0], [0], [555]/* 4 */, [100], [1994], [4]],
      [[0], [0, 0, 0, 0, 0, 700], [0], [0], [6004]/* 4 */, [800], [223], [3]],
      [[0], [2, 0, 0, 0, 0, 5555], [0], [0], [34, 3]/* 4 */, [100, 200], [1994, 500], [3, 6]]
    ];
    var v2/* exchange_trust_fees_data */ = [
      [
        [bgN(50, 16), bgN(10, 16)],
        [bgN(1, 16)], [bgN(10, 16)],
        [bgN(20, 16), bgN(40, 16)]
      ],
      [[2, 1999], [1], [0], [299, 16999]]
    ];
    var v3/* targets */ = [1004, 88, 199, 6000];
    var v4/* target_payers_for_buy_data */ = [0, 333, 0, 607];
    var v5/* consensus_type_data */ = [3, 0, 3, 0, 0];

    var val = await e.f63(v3/* targets */, v1/* target_nums */, v4/* target_payers_for_buy_data */, v2/* exchange_trust_fees_data */, v5/* consensus_type_data */);

    console.log("49i");
    var exp_vals = [
      300, 300, 550, 550, 555, 555, 6004, 6004, 34, 34, 3, 3,
      200, 200, 720, 80, 99, 1, 720, 80, 80, 20, 120, 80,
      66, 66, 66, 66, 333, 333, 700, 700, 607, 607, 607, 607,
      199, 2, 900, 1999, 84, 1, 223, 0, 5555, 299, 5555, 16999,
      1, 1, 3, 3, 4, 4, 3, 3, 3, 3, 6, 6
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //1 spend action, malformed data
    var v1/* target_nums */ = [
      [[0], [0, 0, 0, 0, 0, 66], [0], [0], [88]/* 4 */, [], [199], [1]]
    ];
    var v2/* exchange_trust_fees_data */ = [
      [[bgN(50, 16)]],
      [[2]]
    ];
    var v3/* targets */ = [1004];
    var v4/* target_payers_for_buy_data */ = [];
    var v5/* consensus_type_data */ = [1, 0, 0, 0, 0];

    console.log("49j");
     expect(e.f63(v3/* targets */, v1/* target_nums */, v4/* target_payers_for_buy_data */, v2/* exchange_trust_fees_data */, v5/* consensus_type_data */)).to.be.reverted;


    //1 spend action, malformed data
    var v1/* target_nums */ = [
      [[0], [0, 0, 0, 0, 0], [0], [0], [667]/* 4 */, [400], [199], [1]]
    ];
    var v2/* exchange_trust_fees_data */ = [
      [[bgN(50, 16)]],
      [[2]]
    ];
    var v3/* targets */ = [1004];
    var v4/* target_payers_for_buy_data */ = [];
    var v5/* consensus_type_data */ = [1, 0, 0, 0, 0];

    console.log("49k");
     expect(e.f63(v3/* targets */, v1/* target_nums */, v4/* target_payers_for_buy_data */, v2/* exchange_trust_fees_data */, v5/* consensus_type_data */)).to.be.reverted;

  });

  /* run_multiple_exchange_config_checkers(): verifies data set in multiple exchange object configs */
  xit("50. can run f64/f65", async () => {
    //1 capped exchange(type END) , valid data
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 3],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [1000, 10000, 1000, 0/* 3 */, 0, 0, 0], [3], [1]
      ]
    ];

    console.log("50a");
    await expect(e.f64(v1/* exchange_nums */)).to.not.be.reverted;


    //1 uncapped exchange(type BUY-SPEND), valid data
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [5], [1000]
      ]
    ];

    console.log("50b");
    await expect(e.f64(v1/* exchange_nums */)).to.not.be.reverted;


    //1 uncapped exchange(type MINT-SPEND), valid data
    var exchange_nums = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [0], [0]
      ]
    ];

    console.log("50c");
    await expect(e.f64(v1/* exchange_nums */)).to.not.be.reverted;


    //3 exchanges(type MINT-SPEND, BUY-SPEND and END) , valid data
    var v1/* exchange_nums */ = [
      [ /* MINT-SPEND */
        [0, 0, 0, 5],
        [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* BUY-SPEND */
        [0, 0, 0, 5],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [5], [1000]
      ],
      [ /* END */
        [0, 0, 0, 3],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [1000, 10000, 1000, 0/* 3 */, 0, 0, 0], [3], [1]
      ]
    ];

    console.log("50d");
    await expect(e.f64(v1/* exchange_nums */)).to.not.be.reverted;


    //1 uncapped exchange(type MINT-SPEND), invalid data
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [bgN(5, 67), 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [0], [0]
      ]
    ];

    console.log("50e");
    await expect(e.f64(v1/* exchange_nums */)).to.be.reverted;


    //1 uncapped exchange(type MINT-SPEND), invalid data
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, bgN(5, 70)/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [0], [0]
      ]
    ];

    console.log("50f");
    await expect(e.f64(v1/* exchange_nums */)).to.be.reverted;


    //1 uncapped exchange(type MINT-SPEND), invalid data
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 55), 1/* 15 */, 1000000, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [0], [0]
      ]
    ];

    console.log("50g");
    await expect(e.f64(v1/* exchange_nums */)).to.be.reverted;



    //1 uncapped exchange(type MINT-SPEND), invalid data
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 29, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [0], [0]
      ]
    ];

    console.log("50h");
    await expect(e.f64(v1/* exchange_nums */)).to.be.reverted;


    //1 uncapped exchange(type MINT-SPEND), invalid data
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 44), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [0], [0]
      ]
    ];

    console.log("50i");
    await expect(e.f64(v1/* exchange_nums */)).to.be.reverted;


    //1 uncapped exchange(type MINT-SPEND), invalid data
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 56)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [0], [0]
      ]
    ];

    console.log("50j");
    await expect(e.f64(v1/* exchange_nums */)).to.be.reverted;


    //1 uncapped exchange(type MINT-SPEND), invalid data
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), 0/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [0], [0]
      ]
    ];

    console.log("50k");
    await expect(e.f64(v1/* exchange_nums */)).to.be.reverted;


    //1 uncapped exchange(type MINT-SPEND), invalid data
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 19), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [0], [0]
      ]
    ];

    console.log("50l");
    await expect(e.f64(v1/* exchange_nums */)).to.be.reverted;



    //1 uncapped exchange(type MINT-SPEND), invalid data
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 100, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [0], [0]
      ]
    ];

    console.log("50m");
    await expect(e.f64(v1/* exchange_nums */)).to.be.reverted;


    //1 uncapped exchange(type MINT-SPEND), invalid data
    var v1/* exchange_nums */ = [
      [
        [0, 0, 0, 5],
        [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 100, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [0], [0]
      ]
    ];

    console.log("50n");
    await expect(e.f64(v1/* exchange_nums */)).to.be.reverted;


    //3 exchanges(type MINT-SPEND, BUY-SPEND and END) , valid data
    var v1/* exchange_nums */ = [
      [ /* MINT-SPEND */
        [0, 0, 0, 5],
        [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* BUY-SPEND */
        [0, 0, 0, 5],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 18)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 0, bgN(100, 16)], [5], [1000]
      ],
      [ /* END */
        [0, 0, 0, 3],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [1000, 10000, 1000, 0/* 3 */, 0, 0, 0], [3], [1]
      ]
    ];

    console.log("50o");
    await expect(e.f64(v1/* exchange_nums */)).to.be.reverted;

  });

  /* run_token_exchange_checkers(): checks if values set in an exchange object are valid */
  xit("51. can run f66", async () => {
    //1 capped exchange(type END) , valid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 100000, 0/* 3 */, 0, 1, 0], [3], [1]
    ];

    console.log("51a");
    await expect(e.f66(v1/* new_obj_id_num */)).to.not.be.reverted;


    //1 uncapped exchange(type BUY-SPEND), valid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16)], [5], [1000]
    ];

    console.log("51b");
    await expect(e.f66(v1/* new_obj_id_num */)).to.not.be.reverted;


    //1 uncapped exchange(type MINT-SPEND), valid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 0],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16)], [0], [0]
    ];

    console.log("51c");
    await e.f66(v1/* new_obj_id_num */);
    await expect(e.f66(v1/* new_obj_id_num */)).to.not.be.reverted;


    //1 capped exchange(type END) , invalid type set
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 8/* bad! */, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 100000, 0/* 3 */, 0, 1, 0], [3], [1], [0]
    ];

    console.log("51d");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 100000, 0/* 3 */, 0, 1, 0], [/* bad! */], [1]
    ];

    console.log("51e");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 100000, 0/* 3 */, 0, 1, bgN(5, 33)], [3], [1]
    ];

    console.log("51f");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [bgN(10, 74), 100000, 100000, 0/* 3 */, 0, 1, 0], [3], [1]
    ];

    console.log("51g");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;

    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, bgN(10, 74), 100000, 0/* 3 */, 0, 1, 0], [3], [1]
    ];

    console.log("51h");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, bgN(10, 73), 0/* 3 */, 0, 1, 0], [3], [1]
    ];

    console.log("51i");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;

    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [0, 100000, 100000, 0/* 3 */, 0, 1, 0], [3], [1]
    ];

    console.log("51j");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;

    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 0, 100000, 0/* 3 */, 0, 1, 0], [3], [1]
    ];

    console.log("51k");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;

    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 100000, 33/* 3 */, 0, 1, 0], [3], [1]
    ];

    console.log("51l");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 100000, 0/* 3 */, 500, 1, 0], [3], [1]
    ];

    console.log("51m");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 100000, 0/* 3 */, 0, bgN(5, 44), 0], [3], [1]
    ];

    console.log("51n");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 100000, 0/* 3 */, 0, 1, 0], [], [1]
    ];

    console.log("51o");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 400000, 0/* 3 */, 0, 1, 0], [3], [1]
    ];

    console.log("51p");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;

    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 10, 0/* 3 */, 0, 1, 0], [3], [1]
    ];

    console.log("51q");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;

    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 100000, 0/* 3 */, 0, 1, 44], [3], [1]
    ];

    console.log("51r");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 uncapped exchange(type MINT-SPEND), valid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 0],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1000, 10000, 55, 0/* 3 */, 0, 1, bgN(100, 16)], [0], [0]
    ];

    console.log("51s");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type SPEND) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 0],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(10, 16)], [0], [0]
    ];

    console.log("51t");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type SPEND) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 0],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16)], [0], [1]
    ];

    console.log("51u");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;

    //1 capped exchange(type SPEND) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 0],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16)], [0, 0], [0, 8]
    ];

    console.log("51v");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type SPEND) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 0],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16)], [5], [0]
    ];

    console.log("51w");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 100000, 0/* 3 */, 0, 1, 44], [0], [1]
    ];

    console.log("51x");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 100000, 0/* 3 */, 0, 1, 44], [3], [0]
    ];

    console.log("51y");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


     //1 capped exchange(type SPEND) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16)], [5], []
    ];

    console.log("51z");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 0, 77, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 100000, 0/* 3 */, 0, 1, 0], [3], [1]
    ];

    console.log("51ba");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


    //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [0, 77, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 100000, 0/* 3 */, 0, 1, 0], [3], [1]
    ];

    console.log("51bb");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;


     //1 capped exchange(type END) , invalid data
    var v1/* new_obj_id_num */ = [
      [3/* bad */, 0, 0, 3, 0],
      [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
      [100000, 100000, 100000, 0/* 3 */, 0, 1, 0], [3], [1]
    ];

    console.log("51bc");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;






    //1 uncapped exchange(type SPEND), type asset(non-fungible)
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 1],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  1000, 999, 998, 997, 996,  0/* 13 */,0,0,0,0], [0], [0]
    ];

    console.log("51bd");
    await expect(e.f66(v1/* new_obj_id_num */)).to.not.be.reverted;




    //1 uncapped exchange(type SPEND), type asset(non-fungible), invalid fungiblility type value passed
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 2/* bad! */],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  1000, 999, 998, 997, 996,  0/* 13 */,0,0,0,0], [0], [0]
    ];

    console.log("51be");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;



    //1 uncapped exchange(type SPEND), type asset(non-fungible), invalid exchange type passed
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 3/* bad! */, 1],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  1000, 999, 998, 997, 996,  0/* 13 */,0,0,0,0], [0], [0]
    ];

    console.log("51bf");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;





    //1 uncapped exchange(type SPEND), type asset(non-fungible), invalid exchange ratio x passed
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 1],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [10/* bad! */, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  1000, 999, 998, 997, 996,  0/* 13 */,0,0,0,0], [0], [0]
    ];
    console.log("51bg");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;




    //1 uncapped exchange(type SPEND), type asset(non-fungible), fully custom enabled
    var v1/* new_obj_id_num */ = [
      [0, 0, 1/* bad! */, 5, 1],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  1000, 999, 998, 997, 996,  0/* 13 */,0,0,0,0], [0], [0]
    ];
    console.log("51bh");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;



    //1 uncapped exchange(type SPEND), type asset(non-fungible), <8>non_fungible_depth_exchange_ratio_y < <9>non_fungible_depth_token_purchase_end_time
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 1],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  1/* bad! */, 999, 998, 997, 996,  0/* 13 */,0,0,0,0], [0], [0]
    ];
    console.log("51bi");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;




    //1 uncapped exchange(type SPEND), type asset(non-fungible), purchase_end_time less than purchase start time
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 1],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  1000, 1/* bad! */, 998, 997, 996,  0/* 13 */,0,0,0,0], [0], [0]
    ];
    console.log("51bj");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;




    //1 uncapped exchange(type SPEND), type asset(non-fungible), purchase_start_time less than applied_token_supply
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 1],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  1000, 999, 1/* bad! */, 997, 996,  0/* 13 */,0,0,0,0], [0], [0]
    ];
    console.log("51bk");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;




    //1 uncapped exchange(type SPEND), type asset(non-fungible), token_time_multiplier == 0
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 1],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  1000, 999, 998, 997, 0/* bad! */,  0/* 13 */,0,0,0,0], [0], [0]
    ];
    console.log("51bl");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;



    //1 uncapped exchange(type SPEND), type asset(non-fungible), invalid token_time_multiplier
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 1],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  1000, 999, 998, 997, bgN(5, 16)/* bad! */,  0/* 13 */,0,0,0,0], [0], [0]
    ];
    console.log("51bm");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;





    //1 uncapped exchange(type SPEND), type asset(non-fungible)
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 1],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  1000, 999, 999, 997, 996,  0/* 13 */,0,0,0,0], [0], [0]
    ];
    console.log("51bn");
    await expect(e.f66(v1/* new_obj_id_num */)).to.not.be.reverted;






    //1 uncapped exchange(type SPEND), type asset(non-fungible), class specified
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 1],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  1000, 999, 999, 997, 996,  0/* 13 */,995,0,80,0], [0], [0]
    ];
    console.log("51bo");
    await expect(e.f66(v1/* new_obj_id_num */)).to.not.be.reverted;





    //1 uncapped exchange(type SPEND), type asset(non-fungible), class specified, invalid increment
    var v1/* new_obj_id_num */ = [
      [0, 0, 0, 5, 1],
      [1000, 10000, 0, 0/* 3 */, 0, bgN(50, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 5, 2, 2, 0/* 11 */, 2, 0, bgN(5, 16), 1/* 15 */, 1000000, 0, 0],
      [1, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  1000, 999, 999, 997, 996,  0/* 13 */,995,0,180,0], [0], [0]
    ];
    console.log("51bo");
    await expect(e.f66(v1/* new_obj_id_num */)).to.be.reverted;
  });



  //
  //
  //
  //
  //
  //
  //-----------------------~~~~~~STATE-VIEW-FUNCTIONS~~~~~~-------------------
  /* alias_object_add_data(): runs alias object and add data action checkers */
  xit("52. can run f67", async () => {
    var v1/* target_id_data */ = [[13000], [], [], [], []];
    var v2/* presets */ = [];
    console.log("52a");
    await expect(e.f67(v1/* target_id_data */, false, 10, v2/* presets */)).to.not.be.reverted;

    var v1/* target_id_data */ = [[13001], [], [], [], []];
    var v2/* presets */ = [[13001, 17]];
    console.log("52b");
    await expect(e.f67(v1/* target_id_data */, true, 13, v2/* presets */)).to.not.be.reverted;

    var v1/* target_id_data */ = [[13001], [], [], [], []];
    var v2/* presets */ = [[13001, 18]];
    console.log("52c");
    await expect(e.f67(v1/* target_id_data */, true, 13, v2/* presets */)).to.not.be.reverted;

    var v1/* target_id_data */ = [[13001], [], [], [], []];
    var v2/* presets */ = [[13001, 24]];
    console.log("52d");
    await expect(e.f67(v1/* target_id_data */, true, 13, v2/* presets */)).to.not.be.reverted;


    var v1/* target_id_data */ = [[13001], [], [], [], []];
    var v2/* presets */ = [[13001, 33]];
    console.log("52e");
    await expect(e.f67(v1/* target_id_data */, false, 13, v2/* presets */)).to.not.be.reverted;


    var v1/* target_id_data */ = [[13001, 44993], [], [], [], []];
    var v2/* presets */ = [[13001, 33], [44993, 35]];
    console.log("52f");
    await expect(e.f67(v1/* target_id_data */, false, 13, v2/* presets */)).to.not.be.reverted;


    var v1/* target_id_data */ = [[130], [], [], [], []];
    var v2/* presets */ = [];
    console.log("52g");
    await expect(e.f67(v1/* target_id_data */, false, 10, v2/* presets */)).to.be.reverted;


    var v1/* target_id_data */ = [[13001], [], [], [], []];
    var v2/* presets */ = [[13001, 17]];
    console.log("52h");
    await expect(e.f67(v1/* target_id_data */, false, 13, v2/* presets */)).to.be.reverted;


    var v1/* target_id_data */ = [[14001], [], [], [], []];
    var v2/* presets */ = [[14001, 18]];
    console.log("52i");
    await expect(e.f67(v1/* target_id_data */, false, 13, v2/* presets */)).to.be.reverted;

    var v1/* target_id_data */ = [[14001], [], [], [], []];
    var v2/* presets */ = [[14001, 24]];
    console.log("52j");
    await expect(e.f67(v1/* target_id_data */, false, 13, v2/* presets */)).to.be.reverted;
  });

  /* execute_modify_metadata(): ensures valid target types targeted and correct authority of sender as author or moderator */
  xit("53. can run f68", async () => {
    /* 1 -> num , 2 -> int_int_int */
    //sender as moderator
    var v1/* target_id_data */ = [[13000], [], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 33], [1, 13000, 1, 1001, 1]];
    console.log("53a");
    await expect(e.f68(v1/* target_id_data */, 1001, v2/* presets */)).to.not.be.reverted;

    /* 1 -> num , 2 -> int_int_int */
    //sender as author
    var v1/* target_id_data */ = [[13000], [], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 33], [2, 13000, 0, 0, 1001]];
    console.log("53b");
    await expect(e.f68(v1/* target_id_data */, 1001, v2/* presets */)).to.not.be.reverted;

    /* 1 -> num , 2 -> int_int_int */
    //sender as author
    var v1/* target_id_data */ = [[13000, 224003], [], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 33], [2, 13000, 0, 0, 1001], [1, 224003, 0, 0, 27], [2, 224003, 0, 0, 1001]];
    console.log("53c");
    await expect(e.f68(v1/* target_id_data */, 1001, v2/* presets */)).to.not.be.reverted;



    /* 1 -> num , 2 -> int_int_int */
    //sender not author
    var v1/* target_id_data */ = [[13000], [], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 33], [2, 13000, 0, 0, 1002]];
    console.log("53d");
    await expect(e.f68(v1/* target_id_data */, 1001, v2/* presets */)).to.be.reverted;

    /* 1 -> num , 2 -> int_int_int */
    //sender as moderator, targeting invalid target type
    var v1/* target_id_data */ = [[13000], [], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 35], [1, 13000, 1, 1001, 1]];
    console.log("53e");
    await expect(e.f68(v1/* target_id_data */, 1001, v2/* presets */)).to.be.reverted;

    /* 1 -> num , 2 -> int_int_int */
    //sender as moderator, targeting invalid target type
    var v1/* target_id_data */ = [[13000], [], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 35], [1, 13000, 1, 1001, 1]];
    console.log("53f");
    await expect(e.f68(v1/* target_id_data */, 1001, v2/* presets */)).to.be.reverted;

    /* 1 -> num , 2 -> int_int_int */
    //sender as moderator, targeting invalid target type
    var v1/* target_id_data */ = [[13000], [], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 35], [1, 13000, 1, 1001, 1]];
    console.log("53g");
    await expect(e.f68(v1/* target_id_data */, 1001, v2/* presets */)).to.be.reverted;

    /* 1 -> num , 2 -> int_int_int */
    //sender not moderator,
    var v1/* target_id_data */ = [[13070], [], [], [], []];
    var v2/* presets */ = [[1, 13070, 0, 0, 25] /* [1, 13000, 1, 1001, 1] */];
    console.log("53h");
    await expect(e.f68(v1/* target_id_data */, 1001, v2/* presets */)).to.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    //sender as author of 1/2 targets
    var v1/* target_id_data */ = [[13000, 224003], [], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 33], [2, 13000, 0, 0, 1001], [1, 224003, 0, 0, 27], [2, 224003, 0, 0, 10033]];
    console.log("53i");
    await expect(e.f68(v1/* target_id_data */, 1001, v2/* presets */)).to.be.reverted;
  });

  /* ensure_interactibles(): ensures sender can interact with given targets */
  xit("54. can run f69", async () => {
    /* 1 -> num , 2 -> int_int_int */
    //interactible enabled, sender can interact
    var v1/* targets */ = [4444];
    var v2/* presets */ = [[1, 4444, 0, 1, 1], [1, 4444, 2, 1021, bgN(13, 20)]];
    console.log("54a");
    await expect(e.f69(v1/* targets */, 1021, v2/* presets */)).to.not.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    //interactible enabled, sender is a moderator
    var v1/* targets */ = [4444];
    var v2/* presets */ = [[1, 4444, 0, 1, 1], [1, 4444, 1, 1021, 1]];
    console.log("54b");
    await expect(e.f69(v1/* targets */, 1021, v2/* presets */)).to.not.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    //interactible enabled, sender is the author
    var v1/* targets */ = [4444];
    var v2/* presets */ = [[1, 4444, 0, 1, 1], [2, 4444, 0, 0, 1021]];
    console.log("54c");
    await expect(e.f69(v1/* targets */, 1021, v2/* presets */)).to.not.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    //interactible disabled, sender is the author
    var v1/* targets */ = [4444];
    var v2/* presets */ = [/* [1, 4444, 0, 1, 1], */[2, 4444, 0, 0, 1021]];
    console.log("54d");
    await expect(e.f69(v1/* targets */, 1021, v2/* presets */)).to.not.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    //interactible disabled, sender is a moderator
    var v1/* targets */ = [4444];
    var v2/* presets */ = [/* [1, 4444, 0, 1, 1], */[1, 4444, 1, 1021, 1]];
    console.log("54e");
    await expect(e.f69(v1/* targets */, 1021, v2/* presets */)).to.not.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    //interactible enabled, sender is the author
    //interactible disabled, sender a moderator
    var v1/* targets */ = [4444, 8889];
    var v2/* presets */ = [
      [1, 4444, 0, 1, 1], [2, 4444, 0, 0, 1021],
      [1, 8889, 1, 1021, 1]
    ];
    console.log("54f");
    await expect(e.f69(v1/* targets */, 1021, v2/* presets */)).to.not.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    //interactible enabled, sender is the author
    //interactible disabled, sender is the author
    var v1/* targets */ = [4444, 8889];
    var v2/* presets */ = [
      [1, 4444, 0, 1, 1], [2, 4444, 0, 0, 1021],
      [2, 8889, 0, 0, 1021]
    ];
    console.log("54g");
    await expect(e.f69(v1/* targets */, 1021, v2/* presets */)).to.not.be.reverted;



    /* 1 -> num , 2 -> int_int_int */
    //interactible enabled, sender could interact but set time expired
    var v1/* targets */ = [4444];
    var v2/* presets */ = [[1, 4444, 0, 1, 1], [1, 4444, 2, 1021, 1003]];
    console.log("54h");
    await expect(e.f69(v1/* targets */, 1021, v2/* presets */)).to.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    //interactible enabled, sender cannot interact
    var v1/* targets */ = [4444];
    var v2/* presets */ = [[1, 4444, 0, 1, 1], [1, 4444, 2, 1021, 0]];
    console.log("54i");
    await expect(e.f69(v1/* targets */, 1021, v2/* presets */)).to.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    //interactible disabled, sender is not author or moderator
    var v1/* targets */ = [8889, 4444];
    var v2/* presets */ = [[2, 8889, 0, 0, 1021], [1, 4444, 0, 1, 0]];
    console.log("54k");
    await expect(e.f69(v1/* targets */, 1021, v2/* presets */)).to.not.be.reverted;


    
    /* 1 -> num , 2 -> int_int_int */
    //interactible enabled, sender is the author, author privelages disabled
    var v1/* targets */ = [4444];
    var v2/* presets */ = [
      [1, 4444, 0, 1, 1], 
      [2, 4444, 0, 0, 1021],
      [1, 4444, 0, 2, 1],
    ];
    console.log("54l");
    await expect(e.f69(v1/* targets */, 1021, v2/* presets */)).to.be.reverted;



    //interactible enabled, sender has been blocked
    var v1/* targets */ = [4444];
    var v2/* presets */ = [
      [1, 4444, 0, 1, 1], 
      [1, 4444, 2, 1021, bgN(13, 20)],
      [1, 4444, 3, 1021, bgN(13, 30)]
    ];
    console.log("54m");
    await expect(e.f69(v1/* targets */, 1021, v2/* presets */)).to.be.reverted;
  });





  /* start_ensure_types/ensure_type(): ensures targets' ids are of required type */
  xit("55. can run f70/f71", async () => {
    /* 1 -> num , 2 -> int_int_int */
    //target_ids -> 35
    var v1/* target_id_data */ = [[13000], [], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 35]];
    var v3/* types */ = [35, 0];
    console.log("55a");
    await expect(e.f71(v3/* types */, v1/* target_id_data */, v2/* presets */)).to.not.be.reverted;

    /* 1 -> num , 2 -> int_int_int */
    //target_ids -> 35 , secondary_target_ids -> 32
    var v1/* target_id_data */ = [[13000], [140033], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 35], [1, 140033, 0, 0, 32]];
    var v3/* types */ = [35, 32];
    console.log("55b");
    await expect(e.f71(v3/* types */, v1/* target_id_data */, v2/* presets */)).to.not.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    //target_ids -> 35
    var v1/* target_id_data */ = [[13000, 45009], [], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 35], [1, 45009, 0, 0, 35]];
    var v3/* types */ = [35, 0];
    console.log("55c");
    await expect(e.f71(v3/* types */, v1/* target_id_data */, v2/* presets */)).to.not.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    //target_ids -> 35 , secondary_target_ids -> 32
    var v1/* target_id_data */ = [[13000, 45009], [140033], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 35], [1, 45009, 0, 0, 35], [1, 140033, 0, 0, 27]];
    var v3/* types */ = [35, 27];
    console.log("55d");
    await expect(e.f71(v3/* types */, v1/* target_id_data */, v2/* presets */)).to.not.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    var v1/* target_id_data */ = [[13000, 45009], [140033], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 35], [1, 45009, 0, 0, 35], [1, 140033, 0, 0, 27]];
    var v3/* types */ = [0, 0];
    console.log("55e");
    await expect(e.f71(v3/* types */, v1/* target_id_data */, v2/* presets */)).to.not.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    //target_ids -> 35 , secondary_target_ids -> 32
    var v1/* target_id_data */ = [[13000, 45009], [140033], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 34], [1, 45009, 0, 0, 35], [1, 140033, 0, 0, 27]];
    var v3/* types */ = [35, 27];
    console.log("55f");
    await expect(e.f71(v3/* types */, v1/* target_id_data */, v2/* presets */)).to.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    //target_ids -> 35 , secondary_target_ids -> 32
    var v1/* target_id_data */ = [[13000, 45009], [140033], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 35], [1, 45009, 0, 0, 35], [1, 140033, 0, 0, 35]];
    var v3/* types */ = [35, 27];
    console.log("55g");
    await expect(e.f71(v3/* types */, v1/* target_id_data */, v2/* presets */)).to.be.reverted;


    /* 1 -> num , 2 -> int_int_int */
    //target_ids -> 35 , secondary_target_ids -> 32
    var v1/* target_id_data */ = [[13000, 45009], [140033], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 35], [1, 45009, 0, 0, 27], [1, 140033, 0, 0, 27]];
    var v3/* types */ = [35, 27];
    console.log("55h");
    await expect(e.f71(v3/* types */, v1/* target_id_data */, v2/* presets */)).to.be.reverted;

    /* 1 -> num , 2 -> int_int_int */
    //target_ids -> 35 , secondary_target_ids -> 32
    var v1/* target_id_data */ = [[13000, 45009], [140033, 234500], [], [], []];
    var v2/* presets */ = [[1, 13000, 0, 0, 35], [1, 45009, 0, 0, 27], [1, 140033, 0, 0, 27]];
    var v3/* types */ = [35, 27];
    console.log("55i");
    await expect(e.f71(v3/* types */, v1/* target_id_data */, v2/* presets */)).to.be.reverted;
  });

  /* require_subscription(): ensures id's passed are of type subscription */
  xit("56. can run f72", async () => {
    //source_tokens_count = 3
    var v1/* presets */ = [[1, 3555, 1, 2, 3]];
    var v2/* _ids */ = [3555];
    console.log("56a");
    await expect(e.f72(v2/* _ids */, v1/* presets */)).to.not.be.reverted;


    //source_tokens_count = 5
    var v1/* presets */ = [[1, 3545, 1, 2, 5]];
    var v2/* _ids */ = [3545];
    console.log("56b");
    await expect(e.f72(v2/* _ids */, v1/* presets */)).to.not.be.reverted;

    //source_tokens_count = 5, 89
    var v1/* presets */ = [[1, 3545, 1, 2, 5], [1, 4455, 1, 2, 89]];
    var v2/* _ids */ = [3545, 4455];
    console.log("56c");
    await expect(e.f72(v2/* _ids */, v1/* presets */)).to.not.be.reverted;


    //source_tokens_count = 5, 0
    var v1/* presets */ = [[1, 3545, 1, 2, 5], [1, 4455, 1, 2, 0]];
    var v2/* _ids */ = [3545, 4455];
    console.log("56d");
    await expect(e.f72(v2/* _ids */, v1/* presets */)).to.be.reverted;


    //source_tokens_count = 0
    var v1/* presets */ = [[1, 354555, 1, 2, 0]];
    var v2/* _ids */ = [354555];
    console.log("56e");
    await expect(e.f72(v2/* _ids */, v1/* presets */)).to.be.reverted;


    //source_tokens_count = 5, 89, 7
    var v1/* presets */ = [[1, 3545, 1, 2, 5], [1, 4455, 1, 2, 89], [1, 78888, 1, 2, 7]];
    var v2/* _ids */ = [3545, 4455, 78888];
    console.log("56f");
    await expect(e.f72(v2/* _ids */, v1/* presets */)).to.not.be.reverted;


    //source_tokens_count = 0, 89, 7
    var v1/* presets */ = [[1, 3545, 1, 2, 0], [1, 4455, 1, 2, 89], [1, 78888, 1, 2, 7]];
    var v2/* _ids */ = [3545, 4455, 78888];
    console.log("56g");
    await expect(e.f72(v2/* _ids */, v1/* presets */)).to.be.reverted;
  });

  /* f3_read_ids(): returns 3d array containing subscription object data */
  xit("57. can run f73/f74", async () => {
    //1 nested exchange
    var presets = [
      [1, 3555, 0, 0, 4],
      [1, 3555, 1, 0, 100], [1, 3555, 1, 1, 10], [1, 3555, 1, 2, 1],
      [1, 3555, 2, 0, 3],
      [1, 3555, 3, 0, 1],

      [3, 3555, 1, 2, 1]
    ];

    var v1/* _ids */ = [3555];
    await e.set_preset_data(presets);
    var val = await e.f74(v1/* _ids */);
    console.log("57a");
    var exp_vals = [100, 10, 1, 0, 0, 0, 0, 3, 1, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);

    //2 nested exchanges
    var presets = [
      [1, 3555, 0, 0, 4],
      [1, 3555, 1, 0, 23], [1, 3555, 1, 1, 5], [1, 3555, 1, 2, 44], [1, 3555, 1, 3, 11],
      [1, 3555, 2, 0, 30], [1, 3555, 2, 1, 35],
      [1, 3555, 3, 0, 15], [1, 3555, 3, 1, 185],

      [3, 3555, 1, 2, 2]
    ];

    var v1/* _ids */ = [3555];
    await e.set_preset_data(presets);
    var val = await e.f74(v1/* _ids */);
    console.log("57b");

    var exp_vals = [23, 5, 44, 11, 0, 0, 0, 30, 35, 15, 185, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);

    //2 ids, 3 exchanges
    var presets = [
      [1, 3555, 0, 0, 4],
      [1, 3555, 1, 0, 23], [1, 3555, 1, 1, 5], [1, 3555, 1, 2, 44], [1, 3555, 1, 3, 11],
      [1, 3555, 2, 0, 30], [1, 3555, 2, 1, 35],
      [1, 3555, 3, 0, 15], [1, 3555, 3, 1, 185],

      [3, 3555, 1, 2, 2],

      [1, 50000, 0, 0, 4],
      [1, 50000, 1, 0, 100], [1, 50000, 1, 1, 10], [1, 50000, 1, 2, 1],
      [1, 50000, 2, 0, 3],
      [1, 50000, 3, 0, 1],

      [3, 50000, 1, 2, 1]
    ];

    var v1/* _ids */ = [3555, 50000];
    await e.set_preset_data(presets);
    var val = await e.f74(v1/* _ids */);
    console.log("57c");

    var exp_vals = [23, 5, 44, 11, 0, 0, 0, 30, 35, 15, 185, 0, 0, 100, 10, 1, 0, 0, 0, 0, 3, 1, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //2 nested exchanges
    var presets = [
      [1, 3555, 0, 0, 4],
      [1, 3555, 1, 0, 23], [1, 3555, 1, 1, 5], [1, 3555, 1, 2, 44],
      [1, 3555, 2, 0, 30], [1, 3555, 2, 1, 36],
      [1, 3555, 3, 0, 15],

      [3, 3555, 1, 2, 2]
    ];

    var v1/* _ids */ = [3555];
    await e.set_preset_data(presets);
    var val = await e.f74(v1/* _ids */);
    console.log("57d");

    var exp_vals = [23, 5, 44, 0, 0, 0, 0, 30, 36, 15, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //2 nested exchanges
    var presets = [
      [1, 6880, 0, 0, 4],
      [1, 6880, 1, 0, 233], [1, 6880, 1, 1, 5], [1, 6880, 1, 2, 44], [1, 6880, 1, 3, 11],
      [1, 6880, 2, 0, 30], [1, 6880, 2, 1, 35],
      [1, 6880, 3, 0, 15], [1, 6881, 3, 1, 1855],

      [3, 6881, 1, 2, 2]
    ];

    var v1/* _ids */ = [6881];
    await e.set_preset_data(presets);
    var val = await e.f74(v1/* _ids */);
    console.log("57e");

    var exp_vals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1855, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });





  /* start_run_checker(): loads a subscription object and validates its data */
  xit("58. can run f75", async () => {
    //1 nested exchange
    var presets = [
      [1, 3555, 0, 0, 4],
      [1, 3555, 1, 0, 100], [1, 3555, 1, 1, 10], [1, 3555, 1, 2, 1],
      [1, 3555, 2, 0, 3],
      [1, 3555, 3, 0, 1],

      [3, 3555, 1, 2, 1]
    ];

    await e.set_preset_data(presets);

    console.log("58a");
    await expect(e.f75(3555)).to.not.be.reverted;

    await e.delete_preset_data(presets);

    //1 nested exchange
    var presets = [
      [1, 3555, 0, 0, 4],
      [1, 3555, 1, 0, 100], [1, 3555, 1, 1, 10], [1, 3555, 1, 2, 1],
      [1, 3555, 2, 0, 3],
      [1, 3555, 3, 0, 1],

      [3, 3555, 1, 2, 0]
    ];

    await e.set_preset_data(presets);

    console.log("58b");
    await expect(e.f75(3555)).to.be.reverted;

    await e.delete_preset_data(presets);


    //1 nested exchange
    var presets = [
      [1, 3555, 0, 0, 4],
      [1, 3555, 1, 0, 100], [1, 3555, 1, 1, 10], [1, 3555, 1, 2, 44],
      [1, 3555, 2, 0, 3],
      [1, 3555, 3, 0, 1],

      [3, 3555, 1, 2, 1]
    ];

    await e.set_preset_data(presets);

    console.log("58c");
    await expect(e.f75(3555)).to.be.reverted;

    await e.delete_preset_data(presets);


    //1 nested exchange
    var presets = [
      [1, 35565, 0, 0, 4],
      [1, 35565, 1, 0, 100], [1, 35565, 1, 1, 10], [1, 35565, 1, 2, 1],
      [1, 35565, 2, 0, 3],
      [1, 35565, 3, 0, 1],

      [3, 35565, 1, 2, 1]
    ];

    await e.set_preset_data(presets);

    console.log("58d");
    await expect(e.f75(35565)).to.not.be.reverted;

    await e.delete_preset_data(presets);
  });

  /* g3_read_ids(): returns 3d array containing contract or proposal object data */
  xit("59. can run f78", async () => {
    //1 nested exchange
    var presets = [
      [1, 3555, 0, 0, 32],
      [1, 3555, 1, 0, 100], [1, 3555, 1, 1, 10], [1, 3555, 1, 14, 14],
      [1, 3555, 2, 0, 30],
      [1, 3555, 3, 0, 100],

      [1, 3555, 4, 0, 3],
      [1, 3555, 5, 0, 1],
      [1, 3555, 6, 0, 10],

      [3, 3555, 1, 2, 1],
      [3, 3555, 1, 4, 1]
    ];

    var _ids = [3555];
    await e.set_preset_data(presets);
    console.log("59a");
    var val = await e.f78(_ids, true);
    

    var exp_vals = [
      32,
      100, 10, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 0, 0, 0 /* 12 */, 0, 14, 0,
      30, 100,
      3, 1, 10, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //2 nested exchanges
    var presets = [
      [1, 3555, 0, 0, 32],
      [1, 3555, 1, 0, 100], [1, 3555, 1, 1, 10], [1, 3555, 1, 14, 14],
      [1, 3555, 2, 0, 30], [1, 3555, 2, 1, 35],
      [1, 3555, 3, 0, 100], [1, 3555, 3, 1, 1400],

      [1, 3555, 4, 0, 3],
      [1, 3555, 5, 0, 1],
      [1, 3555, 6, 0, 10],

      [3, 3555, 1, 2, 2],
      [3, 3555, 1, 4, 1]
    ];

    var _ids = [3555];
    await e.set_preset_data(presets);
    console.log("59b");
    var val = await e.f78(_ids, true);
    

    var exp_vals = [
      32,
      100, 10, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 0, 0, 0 /* 12 */, 0, 14, 0,
      30, 35, 100, 1400,
      3, 1, 10, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //2 nested exchanges, 3 reconfig data points
    var presets = [
      [1, 4555, 0, 0, 35],
      [1, 4555, 1, 0, 100], [1, 4555, 1, 1, 10], [1, 4555, 1, 14, 14],
      [1, 4555, 2, 0, 30], [1, 4555, 2, 1, 35],
      [1, 4555, 3, 0, 100], [1, 4555, 3, 1, 1400],

      [1, 4555, 4, 0, 3], [1, 4555, 4, 1, 344], [1, 4555, 4, 2, 366],
      [1, 4555, 5, 0, 1], [1, 4555, 5, 1, 133], [1, 4555, 5, 2, 166],
      [1, 4555, 6, 0, 10], [1, 4555, 6, 1, 1033], [1, 4555, 6, 2, 1066],

      [1, 4555, 8, 2, 70099],

      [3, 4555, 1, 2, 2],
      [3, 4555, 1, 4, 3]
    ];

    var _ids = [4555];
    await e.set_preset_data(presets);
    console.log("59c");
    var val = await e.f78(_ids, true);
    

    var exp_vals = [
      35,
      100, 10, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 0, 0, 0 /* 12 */, 0, 14, 0,
      30, 35, 100, 1400,
      3, 344, 366,  1, 133, 166,  10, 1033, 1066,  0,0,0,  0,0,70099,  0,0,0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //0 nested exchange, main contract targeted
    var presets = [
      [1, 2, 0, 0, 30],
      [1, 2, 1, 0, 1004], [1, 2, 1, 1, 105], [1, 2, 1, 26, 5], [1, 2, 1, 27, 55],
    ];

    var _ids = [2];
    await e.set_preset_data(presets);
    console.log("59d");
    var val = await e.f78(_ids, true);
    

    var exp_vals = [
      30,
      1004, 105, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 0, 0, 0 /* 12 */, 0, 0, 0, 0/* 16 */, 0, 0, 0, 0/* 20 */, 0, 0, 0, 0/* 24 */, 0, 5, 55/* 27 */, 0,0,0,0,0,0,0,0,0,0,0,
      0,0,0

    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //2 targets
    var presets = [
      [1, 2, 0, 0, 30],
      [1, 2, 1, 0, 1004], [1, 2, 1, 1, 105], [1, 2, 1, 26, 55],
      [1, 2, 9, 19, 300],

      [1, 4555, 0, 0, 35],
      [1, 4555, 1, 0, 100], [1, 4555, 1, 1, 10], [1, 4555, 1, 14, 14],
      [1, 4555, 2, 0, 30], [1, 4555, 2, 1, 35],
      [1, 4555, 3, 0, 100], [1, 4555, 3, 1, 1400],

      [1, 4555, 4, 0, 3], [1, 4555, 4, 1, 344], [1, 4555, 4, 2, 366],
      [1, 4555, 5, 0, 1], [1, 4555, 5, 1, 133], [1, 4555, 5, 2, 166],
      [1, 4555, 6, 0, 10], [1, 4555, 6, 1, 1033], [1, 4555, 6, 2, 1067],

      [1, 4555, 9, 1, 223],

      [3, 4555, 1, 2, 2],
      [3, 4555, 1, 4, 3]
    ];

    var _ids = [2, 4555];
    await e.set_preset_data(presets);
    console.log("59e");
    var val = await e.f78(_ids, true);

    var exp_vals = [
      30,
      1004, 105, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 0, 0, 0 /* 12 */, 0, 0, 0, 0/* 16 */, 0, 0, 0, 0/* 20 */, 0, 0, 0, 0/* 24 */, 0, 55, 0, 0,0/* 29 */,0,0,0,0,0/* 34 */,0,0,0,0,0,0,

      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,300,0,
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,

      35,
      100, 10, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 0, 0, 0 /* 12 */, 0, 14, 0,
      30, 35, 100, 1400,
      3, 344, 366,  1, 133, 166,  10, 1033, 1067,  0,0,0,  0,0,0,  0,223,0,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      // console.log("val: "+val[j]+", exp: "+exp_vals[j]);
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    //2 targets
    var presets = [
      [1, 2, 0, 0, 30],
      [1, 2, 1, 0, 1004], [1, 2, 1, 1, 105], [1, 2, 1, 26, 55],
      [1, 2, 9, 19, 300],

      [1, 4555, 0, 0, 35],
      [1, 4555, 1, 0, 100], [1, 4555, 1, 1, 10], [1, 4555, 1, 14, 14],
      [1, 4555, 2, 0, 30], [1, 4555, 2, 1, 35],
      [1, 4555, 3, 0, 100], [1, 4555, 3, 1, 1400],

      [1, 4555, 4, 0, 3], [1, 4555, 4, 1, 344], [1, 4555, 4, 2, 366],
      [1, 4555, 5, 0, 1], [1, 4555, 5, 1, 133], [1, 4555, 5, 2, 166],
      [1, 4555, 6, 0, 10], [1, 4555, 6, 1, 1033], [1, 4555, 6, 2, 1067],

      [1, 4555, 9, 1, 223],

      [3, 4555, 1, 2, 2],
      [3, 4555, 1, 4, 3]
    ];

    var _ids = [2, 4555];
    await e.set_preset_data(presets);
    console.log("59f");
    var val = await e.f78(_ids, false);

    var exp_vals = [
      30,
      1004, 105, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 0, 0, 0 /* 12 */, 0, 0, 0, 0/* 16 */, 0, 0, 0, 0/* 20 */, 0, 0, 0, 0/* 24 */, 0, 55, 0, 0,0/* 29 */,0,0,0,0,0/* 34 */,0,0,0,0,0,0,

      35,
      100, 10, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 0, 0, 0 /* 12 */, 0, 14, 0,
      30, 35, 100, 1400,
      3, 344, 366,  1, 133, 166,  10, 1033, 1067,  0,0,0,  0,0,0,  0,223,0,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      // console.log("val: "+val[j]+", exp: "+exp_vals[j]);
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* load_consensus_data(): loads consensus objects and their corresponding target contract authority's bounty split proportion */
  xit("60. can run f79", async () => {
    //1 consensus object
    var presets = [
      //consensus
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 100], [1, 4555, 1, 1, 10], [1, 4555, 1, 5, 14000],

      [1, 4555, 4, 0, 3],
      [1, 4555, 5, 0, 1],
      [1, 4555, 6, 0, 10],

      [3, 4555, 1, 4, 1],

      //contract
      [1, 14000, 0, 0, 30],
      [1, 14000, 1, 0, 100], [1, 14000, 1, 1, bgN(10, 16)], [1, 14000, 1, 5, 6]
    ];

    var v1/* _ids */ = [4555];
    var v2/* sender_accounts */ = [40002];
    await e.set_preset_data(presets);
    var val = await e.f79(v1/* _ids */, v2/* sender_accounts */, 0);
    console.log("60a");
    var exp_vals = [
      32,
      100, 10, 0, 0, 0/* 4 */, 14000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      3, 1, 10, 0,0,0,
      
      bgN(10, 16), 
      0, 
      0,
      40002

    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //1 consensus object
    var presets = [
      //consensus
      [1, 4455, 0, 0, 32],
      [1, 4455, 1, 0, 100], [1, 4455, 1, 1, 10], [1, 4455, 1, 5, 14010],

      [1, 4455, 4, 0, 3],
      [1, 4455, 5, 0, 1],
      [1, 4455, 6, 0, 10],

      [3, 4455, 1, 4, 1],

      //contract
      [1, 14010, 0, 0, 30],
      [1, 14010, 1, 0, 100], [1, 14010, 1, 1, bgN(13, 16)]
    ];

    var v1/* _ids */ = [4455];
    var v2/* sender_accounts */ = [40002];
    await e.set_preset_data(presets);
    var val = await e.f79(v1/* _ids */,v2/* sender_accounts */, 0);
    console.log("60b");
    var exp_vals = [
      32,
      100, 10, 0, 0, 0/* 4 */, 14010, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      3, 1, 10, 0,0,0,

      bgN(13, 16), 
      0,
      0,
      40002
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //2 consensus objects
    var presets = [
      //consensus
      [1, 4455, 0, 0, 32],
      [1, 4455, 1, 0, 100], [1, 4455, 1, 1, 10], [1, 4455, 1, 5, 14010],

      [1, 4455, 4, 0, 3],
      [1, 4455, 5, 0, 1],
      [1, 4455, 6, 0, 10],

      [3, 4455, 1, 4, 1],

      //contract
      [1, 14010, 0, 0, 30],
      [1, 14010, 1, 0, 100], [1, 14010, 1, 1, bgN(13, 16)],


      //consensus 2
      [1, 34556, 0, 0, 32],
      [1, 34556, 1, 0, 104], [1, 34556, 1, 1, 1044], [1, 34556, 1, 5, 14880],

      [1, 34556, 4, 0, 355],
      [1, 34556, 5, 0, 155],
      [1, 34556, 6, 0, 1044],

      [3, 34556, 1, 4, 1],

      //contract 2
      [1, 14880, 0, 0, 30],
      [1, 14880, 1, 0, 100], [1, 14880, 1, 1, bgN(2, 16)]
    ];

    var v1/* _ids */ = [4455, 34556];
    var v2/* sender_accounts */ = [40002, 40002];
    await e.set_preset_data(presets);
    var val = await e.f79(v1/* _ids */,v2/* sender_accounts */, 0);
    console.log("60c");
    var exp_vals = [
      32,
      100, 10, 0, 0, 0/* 4 */, 14010, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      3, 1, 10, 0,0,0,

      32,
      104, 1044, 0, 0, 0/* 4 */, 14880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      355, 155, 1044, 0,0,0,

      bgN(13, 16), bgN(2, 16),
      0,0,
      0,0,
      40002, 40002

    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //1 consensus object
    var presets = [
      //consensus
      [1, 4455, 0, 0, 32],
      [1, 4455, 1, 0, 100], [1, 4455, 1, 1, 10], [1, 4455, 1, 5, 14010],  [1, 4455, 1, 7, 10003], [1, 4455, 1, 8, 3],

      [1, 4455, 4, 0, 3],
      [1, 4455, 5, 0, 1],
      [1, 4455, 6, 0, 10],

      [3, 4455, 1, 4, 1],

      //contract
      [1, 14010, 0, 0, 30],
      [1, 14010, 1, 0, 100], [1, 14010, 1, 1, bgN(14, 16)],


      //consensus 2
      [1, 34556, 0, 0, 32],
      [1, 34556, 1, 0, 104], [1, 34556, 1, 1, 1044], [1, 34556, 1, 5, 14010],

      [1, 34556, 4, 0, 355],
      [1, 34556, 5, 0, 155],
      [1, 34556, 6, 0, 1044],

      [3, 34556, 1, 4, 1]
    ];

    var v1/* _ids */ = [4455, 34556];
    var v2/* sender_accounts */ = [];
    await e.set_preset_data(presets);
    var val = await e.f79(v1/* _ids */,v2/* sender_accounts */, 40002);
    console.log("60d");
    var exp_vals = [
      32,
      100, 10, 0, 0, 0/* 4 */, 14010, 0, 10003, 3, 0, 0, 0, 0, 0, 0, 0,
      3, 1, 10, 0,0,0,

      32,
      104, 1044, 0, 0, 0/* 4 */, 14010, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      355, 155, 1044, 0,0,0,

      bgN(14, 16), bgN(14, 16),
      10003,0,
      3,0,
      40002, 40002,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });





  /* ensure_minimum_amount_for_bounty(): ensures minimum required amounts for bounty are used and returns the 4 arrays used in bounty transfer */
  xit("61. can run f80", async () => {
    var v1/* new_obj_id_num_data */ = [
      [4],
      [33],
      [5, 400, 800],
      [100100000, 400000000, 7000000000],
      [34],
      [0],
      [0],
      [0],
      [0],
      [0],
      [3, 1, 33]
    ];

    var val = await e.f80(bgN(2, 9), bgN(1, 18), [1000, 1000, 0], v1/* new_obj_id_num_data */);
    console.log("61a");
    var exp_vals = [5, 400, 800, 100100000, 400000000, 7000000000, 3, 1, 33];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    var v1/* new_obj_id_num_data */ = [
      [4],
      [33],
      [5, 40230, 80044],
      [100100009, 400004000, 7000200000],
      [34],
      [0],
      [0],
      [0],
      [0],
      [0],
      [5, 1, 90]
    ];

    var val = await e.f80(bgN(2, 9), bgN(1, 18), [1000, 1000, 0], v1/* new_obj_id_num_data */);
    console.log("61b");
    var exp_vals = [5, 40230, 80044, 100100009, 400004000, 7000200000, 5, 1, 90];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    /* invalid first bounty exchange used */
    var v1/* new_obj_id_num_data */ = [
      [4],
      [33],
      [6, 40230, 80044],
      [100100009, 400004000, 7000200000],
      [34],
      [0],
      [0],
      [0],
      [0],
      [0],
      [55, 44, 80]
    ];

    console.log("61c");
    await expect(e.f80(bgN(2, 9), bgN(1, 18), [1000, 1000, 0], v1/* new_obj_id_num_data */)).to.be.reverted;



    var v1/* new_obj_id_num_data */ = [
      [4],
      [33],
      [5, 40230, 80044],
      [1, 400004000, 7000200000],
      [34],
      [0],
      [0],
      [0],
      [0],
      [0],
      [0, 4, 0]
    ];

    console.log("61d");
    await expect(e.f80(bgN(2, 9), bgN(1, 18), [1000, 1000, 0], v1/* new_obj_id_num_data */)).to.be.reverted;



    var v1/* new_obj_id_num_data */ = [
      [4],
      [33],
      [5, 40230, 80044, 5699, 44888],
      [100100009, 400004000, 7000200000, 2340000000, 3330000000],
      [34],
      [0],
      [0],
      [0],
      [0],
      [0],
      [3, 0, 4]
    ];

    var val = await e.f80(bgN(2, 9), bgN(1, 18), [1000, 1000, 0], v1/* new_obj_id_num_data */);
    console.log("61e");
    var exp_vals = [5, 40230, 80044, 5699, 44888, 100100009, 400004000, 7000200000, 2340000000, 3330000000, 3, 0, 4];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //absolute bounty limit type specified
    var v1/* new_obj_id_num_data */ = [
      [4],
      [33],
      [5, 400, 800],
      [100100000, 4000000001, 71000000000],
      [34],
      [0],
      [0],
      [0],
      [0],
      [0],
      [3, 1, 33]
    ];

    var val = await e.f80(bgN(2, 9), bgN(1, 18), [1000, 1000, 1], v1/* new_obj_id_num_data */);
    console.log("61f");
    var exp_vals = [5, 400, 800, 100100000, 4000000001, 71000000000, 3, 1, 33];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //absolute bounty limit type specified
    var v1/* new_obj_id_num_data */ = [
      [4],
      [33],
      [5, 400, 800],
      [999, 4000000001, 71000000000],
      [34],
      [0],
      [0],
      [0],
      [0],
      [0],
      [3, 1, 33]
    ];

    console.log("61g");
    await expect(e.f80(bgN(2, 9), bgN(1, 18), [1000, 1000, 0], v1/* new_obj_id_num_data */)).to.be.reverted;

  });

  /* contract_data_checkers(): ensures new contract created is valid */
  xit("62. can run f81", async () => {

    var v1/* new_obj_id_exchanges_data */ = [
      [4],
      [33],
      [5, 400, 800],
      [100100000, 400000000, 7000000000],
      [34]
    ];

    console.log("62a");
    await expect(e.f81(v1/* new_obj_id_num_data */, bgN(1, 18), [1000, 1000, bgN(2, 9)])).to.not.be.reverted;


    var v1/* new_obj_id_num_data */ = [
      [4],
      [33],
      [],
      [100100000, 400000000, 7000000000],
      [34]
    ];

    console.log("62b");
    await expect(e.f81(v1/* new_obj_id_num_data */, bgN(1, 18), [1000, 1000, bgN(2, 9)])).to.be.reverted;


    var v1/* new_obj_id_num_data */ = [
      [4],
      [33],
      [6, 400, 800],
      [100100000, 400000000, 7000000000],
      [34]
    ];

    console.log("62c");
    await expect(e.f81(v1/* new_obj_id_num_data */, bgN(1, 18), [1000, 1000, bgN(2, 9)])).to.be.reverted;


    var v1/* new_obj_id_num_data */ = [
      [4],
      [33],
      [5, 400, 800],
      [1, 400000000, 7000000000],
      [34]
    ];

    console.log("62d");
    await expect(e.f81(v1/* new_obj_id_num_data */, bgN(1, 18), [1000, 1000, bgN(2, 9)])).to.be.reverted;

    var v1/* new_obj_id_num_data */ = [
      [4],
      [33],
      [5, 400, 800],
      [0, 400000000, 7000000000],
      [34]
    ];

    console.log("62e");
    await expect(e.f81(v1/* new_obj_id_num_data */, bgN(1, 18), [1000, 1000, bgN(2, 9)])).to.be.reverted;

  });

  /* run_consensus_request_checkers(): ensures valid data is set in new consensus request object */
  xit("63. can run f82", async () => {
    //reconfig consensus
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 9, 3000],

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63a");
    await expect(e.f82(4555, true)).to.not.be.reverted;
    await e.delete_preset_data(presets);


    //spend consensus
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 0],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      // [1, 4555, 1, 9, 3000], 

      [1, 4555, 4, 0, 5],
      [1, 4555, 5, 0, 22000],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63b");
    await expect(e.f82(4555, true)).to.not.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


    //reconfig consensus, incorrect id type
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 30],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 9, 3000],

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63c");
    await expect(e.f82(4555, true)).to.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


    //reconfig consensus, incorrect target contract authority type
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 9, 3000],

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 32],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63d");
    await expect(e.f82(4555, true)).to.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


    

    //reconfig consensus, incorrect action type set
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 55],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 9, 3000],

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63f");
    await expect(e.f82(4555, true)).to.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));



    //reconfig consensus, invalid proposal expiry time set
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 9, 3000],

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, bgN(20, 57)], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63g");
    await expect(e.f82(4555, true)).to.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


    //reconfig consensus, no recofig data or exchanges passed
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 9, 3000],

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 0],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63h");
    await expect(e.f82(4555, true)).to.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


    //reconfig consensus, invalid consensus submit time passed (consensus submit time = proposal expiry time)
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(5, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 9, 3000],

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63i");
    await expect(e.f82(4555, true)).to.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


    //reconfig consensus, incorrect modify target
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 9, 0],

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63j");
    await expect(e.f82(4555, true)).to.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


    //reconfig consensus, main contract targeted, sender cannot vote in main contract
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 2],
      [1, 4555, 1, 9, 3000],

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 2, 0, 0, 30],
      [1, 2, 1, 1, bgN(5, 16)], [1, 2, 1, 5, 6000], [1, 2, 1, 8, 0], [1, 2, 1, 15, bgN(5, 26)],
      [1, 2, 2, 0, 5],
      [1, 2, 3, 0, 133000000],

      [3, 2, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63k");
    await expect(e.f82(4555, false)).to.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


    //reconfig consensus, bounty exchanges length != bounty amounts length
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 9, 3000],

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63l");
    await expect(e.f82(4555, true)).to.not.be.reverted;
    await e.delete_preset_data(presets);




    //spend consensus, invalid spend amount
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 0],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 9, 30], 

      [1, 4555, 4, 0, 5],
      [1, 4555, 5, 0, 440],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63n");
    await expect(e.f82(4555, true,)).to.not.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


    //spend consensus, auto vote wait = 4
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 0],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      // [1, 4555, 1, 9, 3000], 

      [1, 4555, 4, 0, 5],
      [1, 4555, 5, 0, 22000],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 4], [1, 6555, 1, 15, bgN(5, 26)], [1, 6555, 1, 31, 1],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63o");
    var val = await e.f82(4555, true);
    await expect(val[0]).to.equal(4);
    await expect(val[1]).to.equal(1);
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


    /* spend consensus, consensus majority specified */
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 0],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 6, bgN(60, 16)], 

      [1, 4555, 4, 0, 5],
      [1, 4555, 5, 0, 22000],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 7, bgN(50, 16)], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63p");
    await expect(e.f82(4555, true)).to.not.be.reverted;
    await e.delete_preset_data(presets);


    /* spend consensus, invalid consensus majority specified */
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 0],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 6, bgN(49, 16)], 

      [1, 4555, 4, 0, 5],
      [1, 4555, 5, 0, 22000],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 7, bgN(50, 16)], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63q");
    await expect(e.f82(4555, true)).to.be.reverted;
    await e.delete_preset_data(presets);



    /* spend consensus, no consensus majority specified in the contract target */
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 0],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 6, bgN(60, 16)], 

      [1, 4555, 4, 0, 5],
      [1, 4555, 5, 0, 22000],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 7, 0], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63r");
    await expect(e.f82(4555, true)).to.be.reverted;
    await e.delete_preset_data(presets);



    //reconfig consensus, voter weight turned on
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555], [1, 4555, 1, 7, 88], [1, 4555, 1, 8, 3],
      [1, 4555, 1, 9, 3000], 

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)], [1, 6555, 1, 33, 88], [1, 6555, 1, 34, 3], [1, 4555, 1, 35, 1],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63s");
    await expect(e.f82(4555, true)).to.not.be.reverted;
    await e.delete_preset_data(presets);



    //reconfig consensus, non-mandatory voter weight turned on
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555], [1, 4555, 1, 7, 88], [1, 4555, 1, 8, 3],
      [1, 4555, 1, 9, 3000], 

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)], [1, 6555, 1, 33, 88], [1, 6555, 1, 34, 3], [1, 4555, 1, 35, 0],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63t");
    await expect(e.f82(4555, true)).to.not.be.reverted;
    await e.delete_preset_data(presets);




    //reconfig consensus, invalid voter weight exchange depth specified
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555], [1, 4555, 1, 7, 88], [1, 4555, 1, 8, 3],
      [1, 4555, 1, 9, 3000], 

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)], [1, 6555, 1, 33, 88], [1, 6555, 1, 34, 4], [1, 4555, 1, 35, 1],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63u");
    await expect(e.f82(4555, true)).to.be.reverted;
    await e.delete_preset_data(presets);




    //reconfig consensus, invalid non-mandatory voter weight exchange specified
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555], [1, 4555, 1, 7, 88], [1, 4555, 1, 8, 3],
      [1, 4555, 1, 9, 3000], 

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)], [1, 6555, 1, 33, 880], [1, 6555, 1, 34, 3], [1, 4555, 1, 35, 0],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63v");
    await expect(e.f82(4555, true)).to.be.reverted;
    await e.delete_preset_data(presets);




    //reconfig consensus, specifi reconfig proposal expiry duration set
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 9, 3000],

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 0], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],

      [1, 6555, 9, 1, 6000]/* specific_proposal_expiry_duration_limit */
    ];


    await e.set_preset_data(presets);
    console.log("63w");
    await expect(e.f82(4555, true)).to.not.be.reverted;
    await e.delete_preset_data(presets);



    //reconfig consensus, specifi reconfig proposal expiry duration set
    var time = parseInt(await e.time());
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, time+3000],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 9, 3000],

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 0], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],

      [1, 6555, 9, 1, 600000]/* specific_proposal_expiry_duration_limit */
    ];


    await e.set_preset_data(presets);
    console.log("63x");
    await expect(e.f82(4555, true)).to.be.reverted;
    await e.delete_preset_data(presets);



    //reconfig consensus, maximum_proposal_expiry_submit_expiry_time_difference set
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 9, 3000],

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)], [1, 6555, 1, 36, bgN(5, 26)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63y");
    await expect(e.f82(4555, true)).to.not.be.reverted;
    await e.delete_preset_data(presets);



    //reconfig consensus, maximum_proposal_expiry_submit_expiry_time_difference set, invalid submit expiry time set
    var presets = [
      /* consensus_object */
      [1, 4555, 0, 0, 32],
      [1, 4555, 1, 0, 1],
      [1, 4555, 1, 1, bgN(5, 25)],
      [1, 4555, 1, 3, bgN(10, 25)],
      [1, 4555, 1, 5, 6555],
      [1, 4555, 1, 9, 3000],

      [1, 4555, 2, 0, 5],
      [1, 4555, 3, 0, 22],

      [3, 4555, 1, 4, 1],

      /* contract_object */
      [1, 6555, 0, 0, 30],
      [1, 6555, 1, 1, bgN(5, 16)], [1, 6555, 1, 5, 6000], [1, 6555, 1, 8, 0], [1, 6555, 1, 15, bgN(5, 26)], [1, 6555, 1, 36, bgN(1, 25)],
      [1, 6555, 2, 0, 5],
      [1, 6555, 3, 0, 133000000],

      [3, 6555, 1, 4, 1],
    ];


    await e.set_preset_data(presets);
    console.log("63z");
    await expect(e.f82(4555, true)).to.be.reverted;
    await e.delete_preset_data(presets);

  });





  /* ensure_type_exchange(): ensures ids passed are exchanges */
  xit("64. can run f83", async () => {
    var presets = [
      /* type uncapped supply */
      [1, 10040, 0, 3, 5]
    ];
    var v1/* _ids */ = [10040];

    await e.set_preset_data(presets);
    console.log("64a");
    await expect(e.f83(v1/* _ids */)).to.not.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


    var presets = [
      /* type uncapped supply */
      [1, 10040, 0, 3, 3]
    ];
    var v1/* _ids */ = [10040];

    await e.set_preset_data(presets);
    console.log("64b");
    await expect(e.f83(v1/* _ids */)).to.not.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


    var presets = [
      /* type uncapped supply */
      [1, 10040, 0, 3, 3],
      [1, 40040, 0, 3, 5]
    ];
    var v1/* _ids */ = [10040, 40040];

    await e.set_preset_data(presets);
    console.log("64c");
    await expect(e.f83(v1/* _ids */)).to.not.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


    var presets = [
      /* type uncapped supply */
      [1, 10040, 0, 3, 7]
    ];
    var v1/* _ids */ = [10040];

    await e.set_preset_data(presets);
    console.log("64d");
    await expect(e.f83(v1/* _ids */)).to.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


    var presets = [
      /* type uncapped supply */
      [1, 10040, 0, 3, 3],
      [1, 40040, 0, 3, 0]
    ];
    var v1/* _ids */ = [10040, 40040];

    await e.set_preset_data(presets);
    console.log("64e");
    await expect(e.f83(v1/* _ids */)).to.be.reverted;
    await e.delete_preset_data(presets);
    // console.log(""+await e.read_preset_data(presets));


  });

  /* REMOVED: get_current_exchange_liquidity_values(): gets current exchange liquidity values for each exchange in data object */
  xit("65. can run f84", async () => {
    var presets = [
      [1, 100022, 2, 2, 5009]
    ];
    var v1/* data */ = [[0], [100022], [], [], []];

    await e.set_preset_data(presets);
    var val = await e.f84(v1/* data */);
    console.log("65a");
    var exp_vals = [5009];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    var presets = [
      [1, 100022, 2, 2, 5009],
      [1, 700022, 2, 2, 44444]
    ];
    var v1/* data */ = [[0], [100022, 700022], [], [], []];

    await e.set_preset_data(presets);
    var val = await e.f84(v1/* data */);
    console.log("65b");
    var exp_vals = [5009, 44444];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    var presets = [
      [1, 100022, 2, 2, 5009],
      [1, 700022, 2, 2, 44444]
    ];
    var v1/* data */ = [[0], [100022, 700022, 100022], [], [], []];

    await e.set_preset_data(presets);
    var val = await e.f84(v1/* data */);
    console.log("65c");
    var exp_vals = [5009, 44444, 5009];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    var presets = [
      [1, 100022, 2, 2, 5009],
      [1, 700022, 2, 2, 44444]
    ];
    var v1/* data */ = [[0], [100022, 700022, 100022, 55], [], [], []];

    await e.set_preset_data(presets);
    var val = await e.f84(v1/* data */);
    console.log("65d");
    var exp_vals = [5009, 44444, 5009, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* read_ids/read_id(): reads data stored in multiple exchange objects */
  xit("66. can run f85/f86", async () => {
    //1 exchange
    var presets = [
      [1, 3555, 0, 3, 5],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 10, 89], [1, 3555, 1, 18, 14],
      [1, 3555, 2, 0, 30], [1, 3555, 2, 4, 3000],
      [1, 3555, 3, 0, 100],
      [1, 3555, 4, 0, 3],

      [3, 3555, 1, 3, 1]
    ];

    var v1/* _ids */ = [3555];
    var v2/* id_depth_data */ = [0]
    await e.set_preset_data(presets);
    var val = await e.f86(v1/* _ids */, v2/* id_depth_data */);
    console.log("66a");

    var exp_vals = [
      0, 0, 0, 5, 0,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */, 0,
      30, 0, 0, 0, 3000/* 4 */, 0, 0, 0/* 7 */, 0,0,0,0,0,0/* 13 */, 0,0,0,0,
      100,
      3, 0, 0, 0,
      0, 0, 0, 0,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //1 exchange
    var presets = [
      [1, 3555, 0, 3, 3],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 9, 89], [1, 3555, 1, 15, 333], [1, 3555, 1, 18, 14],
      [1, 3555, 2, 0, 30], [1, 3555, 2, 4, 340],
      [1, 3555, 3, 0, 103],
      [1, 3555, 4, 0, 8],

      [3, 3555, 1, 3, 1]
    ];

    var v1/* _ids */ = [3555];
    var v2/* id_depth_data */ = [0]
    await e.set_preset_data(presets);
    var val = await e.f86(v1/* _ids */, v2/* id_depth_data */);
    console.log("66b");

    var exp_vals = [
      0, 0, 0, 3,0,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 89, 0, 0, 0 /* 12 */, 0, 0, 333, 0, 0, 14/* 18 */, 0,
      30, 0, 0, 0, 340/* 4 */, 0, 0, 0, 0,0/* 9 */,0,0,0,0, 0/* 14 */,0,0,0,
      103,
      8, 0, 0, 0,
      0, 0, 0, 0,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //2 exchange
    var presets = [
      [1, 3555, 0, 3, 3],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 9, 89], [1, 3555, 1, 15, 333], [1, 3555, 1, 18, 14],
      [1, 3555, 2, 0, 30], [1, 3555, 2, 4, 340],
      [1, 3555, 3, 0, 103],
      [1, 3555, 4, 0, 8],

      [3, 3555, 1, 3, 1],


      [1, 4478, 0, 3, 5],
      [1, 4478, 1, 0, 3], [1, 4478, 1, 9, 88], [1, 4478, 1, 15, 333], [1, 4478, 1, 18, 14],
      [1, 4478, 2, 0, 30], [1, 4478, 2, 4, 340],
      [1, 4478, 3, 0, 10300],
      [1, 4478, 4, 0, 8],

      [3, 4478, 1, 3, 1]
    ];

    var v1/* _ids */ = [3555, 4478];
    var v2/* id_depth_data */ = [0, 0]
    await e.set_preset_data(presets);
    var val = await e.f86(v1/* _ids */, v2/* id_depth_data */);
    console.log("66c");

    var exp_vals = [
      0, 0, 0, 3, 0,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 89, 0, 0, 0 /* 12 */, 0, 0, 333, 0, 0, 14/* 18 */,0,
      30, 0, 0, 0, 340/* 4 */, 0, 0, 0, 0,0,0,0,0,0,  0/* 14 */,0,0,0,
      103,
      8,
      0,

      0, 0, 0, 5,0,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 88, 0, 0, 0 /* 12 */, 0, 0, 333, 0, 0, 14/* 18 */,0,
      30, 0, 0, 0, 340/* 4 */, 0, 0, 0, 0,0,0,0,0,0,  0/* 14 */,0,0,0,
      10300,
      8, 0, 0, 0, 0,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //1 exchange
    var presets = [
      [1, 3555, 0, 3, 5],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 10, 89], [1, 3555, 1, 18, 14],
      [1, 3555, 2, 0, 30], [1, 3555, 2, 5, 3000], [1, 3555, 2, 10, 2424],
      [1, 3555, 3, 0, 100],
      [1, 3555, 4, 0, 3],

      [3, 3555, 1, 3, 1]
    ];

    var v1/* _ids */ = [3555];
    var v2/* id_depth_data */ = [0, 0]
    await e.set_preset_data(presets);
    var val = await e.f86(v1/* _ids */, v2/* id_depth_data */);
    console.log("66d");

    var exp_vals = [
      0, 0, 0, 5,0,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */,0,
      30, 0, 0, 0, 0/* 4 */, 3000, 0, 0, 0,0,2424,0,0,0,  0/* 14 */,0,0,0,
      100,
      3, 0, 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //1 exchange, 2 source tokens
    var presets = [
      [1, 3555, 0, 3, 5],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 10, 89], [1, 3555, 1, 18, 14],
      [1, 3555, 2, 0, 30], [1, 3555, 2, 5, 3000], [1, 3555, 2, 10, 2424],
      [1, 3555, 3, 0, 100], [1, 3555, 3, 1, 100445],
      [1, 3555, 4, 0, 900], [1, 3555, 4, 1, 13467],

      [3, 3555, 1, 3, 2]
    ];

    var v1/* _ids */ = [3555];
    var v2/* id_depth_data */ = [0]
    await e.set_preset_data(presets);
    var val = await e.f86(v1/* _ids */, v2/* id_depth_data */);
    console.log("66e");

    var exp_vals = [
      0, 0, 0, 5,0,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */,0,
      30, 0, 0, 0, 0/* 4 */, 3000, 0, 0, 0,0,2424,0,0,0,  0/* 14 */,0,0,0,
      100, 100445,
      900, 13467, 0, 0, 0, 0,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //1 exchange, 2 source tokens, 1 read
    var presets = [
      [1, 3555, 0, 3, 5],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 10, 89], [1, 3555, 1, 18, 14],
      [1, 3555, 2, 0, 30], [1, 3555, 2, 5, 3000], [1, 3555, 2, 10, 2424],
      [1, 3555, 3, 0, 100], [1, 3555, 3, 1, 100445],
      [1, 3555, 4, 0, 900], [1, 3555, 4, 1, 13467],

      [3, 3555, 1, 3, 1]
    ];

    var v1/* _ids */ = [3555];
    var v2/* id_depth_data */ = [0]
    await e.set_preset_data(presets);
    var val = await e.f86(v1/* _ids */, v2/* id_depth_data */);
    console.log("66f");

    var exp_vals = [
      0, 0, 0, 5,0,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */,0,
      30, 0, 0, 0, 0/* 4 */, 3000, 0, 0, 0,0,2424,0,0,0,  0/* 14 */,0,0,0,
      100,
      900, 0, 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);






    //1 non-fungible exchange
    var presets = [
      [1, 3555, 0, 3, 5],[1, 3555, 0, 4, 1],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 10, 89], [1, 3555, 1, 11, 3], [1, 3555, 1, 18, 14],

      [1, 3555, 2, 0, 1], [1, 3555, 2, 4, 3000],  [1, 3555, 2, 8, bgN(1,54)], [1, 3555, 2, 9, bgN(1,45)], [1, 3555, 2, 10, bgN(1,36)], [1, 3555, 2, 11, bgN(1,27)], [1, 3555, 2, 12, 60], [1, 3555, 2, 13, 1000],

      [1, 3555, 3, 0, 100],
      [1, 3555, 4, 0, 3],

      [3, 3555, 1, 3, 1]
    ];

    var v1/* _ids */ = [3555];
    var v3/* depths_to_add */ = [bgN(1, 63)/* exchange_ratio_y */, bgN(1, 53)/* end_time */, bgN(1, 37)/* start_time */, bgN(1, 30)/* supply */, bgN(1, 3)/* identifier */]
    var v4/* targeted_depth */ = bigInt(0)
    v3/* depths_to_add */.forEach(value => {
      v4/* targeted_depth */ = bigInt(v4/* targeted_depth */).plus(bigInt(value.toString().toLocaleString('fullwide', {useGrouping:false}))).toString().toLocaleString('fullwide', {useGrouping:false})
    });
    var v2/* id_depth_data */ = [v4/* targeted_depth */]
    await e.set_preset_data(presets);
    var val = await e.f86(v1/* _ids */, v2/* id_depth_data */);
    console.log("66g");

    var exp_vals = [
      0, 0, 0, 5, 1,
      bgN(1, 9), 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 3, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */, 1000,
      1, bgN(1, 9), 0, 0, 3000/* 4 */, 0, 0, v4/* targeted_depth *//* 7 */, bgN(1,54), bgN(1,45), bgN(1,36), bgN(1,27), 60, ((100_000_000*60)+1_000), 0/* 14 */,0,0,0, 
      100,
      3, 0, 0, 0,
      0, 0, 0, 0,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);







    //1 non-fungible exchange, time already expired
    var presets = [
      [1, 3555, 0, 3, 5],[1, 3555, 0, 4, 1],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 10, 89], [1, 3555, 1, 11, 3], [1, 3555, 1, 18, 14],

      [1, 3555, 2, 0, 1], [1, 3555, 2, 4, 3000],  [1, 3555, 2, 8, bgN(1,54)], [1, 3555, 2, 9, bgN(1,45)], [1, 3555, 2, 10, bgN(1,36)], [1, 3555, 2, 11, bgN(1,27)], [1, 3555, 2, 12, 60], [1, 3555, 2, 13, 1000],

      [1, 3555, 3, 0, 100],
      [1, 3555, 4, 0, 3],

      [3, 3555, 1, 3, 1]
    ];

    var v1/* _ids */ = [3555];
    var v3/* depths_to_add */ = [bgN(1, 63)/* exchange_ratio_y */, bgN(1, 50)/* end_time */, bgN(1, 37)/* start_time */, bgN(1, 30)/* supply */, bgN(1, 3)/* identifier */]
    var v4/* targeted_depth */ = bigInt(0)
    v3/* depths_to_add */.forEach(value => {
      v4/* targeted_depth */ = bigInt(v4/* targeted_depth */).plus(bigInt(value.toString().toLocaleString('fullwide', {useGrouping:false}))).toString().toLocaleString('fullwide', {useGrouping:false})
    });
    var v2/* id_depth_data */ = [v4/* targeted_depth */]
    await e.set_preset_data(presets);
    var val = await e.f86(v1/* _ids */, v2/* id_depth_data */);
    console.log("66h");

    var exp_vals = [
      0, 0, 0, 5, 1,
      0, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */, 1000,
      1, bgN(1, 9), 0, 0, 3000/* 4 */, 0, 0, v4/* targeted_depth *//* 7 */, bgN(1,54),bgN(1,45),bgN(1,36),bgN(1,27),60,((100_000*60)+1_000), 0/* 14 */,0,0,0, 
      100,
      3, 0, 0, 0,
      0, 0, 0, 0,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    //1 non-fungible exchange, <13>temp_non_fungible_depth_token_transaction_end_time set to 0
    var presets = [
      [1, 3555, 0, 3, 5],[1, 3555, 0, 4, 1],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 10, 89], [1, 3555, 1, 11, 3], [1, 3555, 1, 18, 14],

      [1, 3555, 2, 0, 1], [1, 3555, 2, 4, 3000],  [1, 3555, 2, 8, bgN(1,54)], [1, 3555, 2, 9, bgN(1,45)], [1, 3555, 2, 10, bgN(1,36)], [1, 3555, 2, 11, bgN(1,27)], [1, 3555, 2, 12, 60], [1, 3555, 2, 13, 0],

      [1, 3555, 3, 0, 100],
      [1, 3555, 4, 0, 3],

      [3, 3555, 1, 3, 1]
    ];

    var v1/* _ids */ = [3555];
    var v3/* depths_to_add */ = [bgN(1, 63)/* exchange_ratio_y */, bgN(1, 53)/* end_time */, bgN(1, 37)/* start_time */, bgN(1, 30)/* supply */, bgN(1, 3)/* identifier */]
    var v4/* targeted_depth */ = bigInt(0)
    v3/* depths_to_add */.forEach(value => {
      v4/* targeted_depth */ = bigInt(v4/* targeted_depth */).plus(bigInt(value.toString().toLocaleString('fullwide', {useGrouping:false}))).toString().toLocaleString('fullwide', {useGrouping:false})
    });
    var v2/* id_depth_data */ = [v4/* targeted_depth */]
    await e.set_preset_data(presets);
    var val = await e.f86(v1/* _ids */, v2/* id_depth_data */);
    console.log("66i");

    var exp_vals = [
      0, 0, 0, 5, 1,
      bgN(1, 9), 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 3, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */, 1000,
      1, bgN(1, 9), 0, 0, 3000/* 4 */, 0, 0, v4/* targeted_depth *//* 7 */, bgN(1,54),bgN(1,45),bgN(1,36),bgN(1,27),60,0, 0/* 14 */,0,0,0, 
      100,
      3, 0, 0, 0,
      0, 0, 0, 0,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);






    //1 non-fungible exchange, buy before set expiry time
    var presets = [
      [1, 3555, 0, 3, 5],[1, 3555, 0, 4, 1],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 10, 89], [1, 3555, 1, 11, 3], [1, 3555, 1, 18, 14],

      [1, 3555, 2, 0, 1], [1, 3555, 2, 4, 3000],  [1, 3555, 2, 8, bgN(1,54)], [1, 3555, 2, 9, bgN(1,45)], [1, 3555, 2, 10, bgN(1,36)], [1, 3555, 2, 11, bgN(1,27)], [1, 3555, 2, 12, 60], [1, 3555, 2, 13, 1000],

      [1, 3555, 3, 0, 100],
      [1, 3555, 4, 0, 3],

      [3, 3555, 1, 3, 1]
    ];

    var v1/* _ids */ = [3555];
    const end_time_minutes = Math.floor(Date.now()/(60*1000)) + 90
    const start_time_minutes = Math.floor(Date.now()/(60*1000)) + 60
    const end_t = bgN(end_time_minutes, 45)
    const start_t = bgN(start_time_minutes, 36)
    var v3/* depths_to_add */ = [bgN(1, 63)/* exchange_ratio_y */, end_t/* end_time */, start_t/* start_time */, bgN(1, 30)/* supply */, bgN(1, 3)/* identifier */]
    var v4/* targeted_depth */ = bigInt(0)
    v3/* depths_to_add */.forEach(value => {
      v4/* targeted_depth */ = bigInt(v4/* targeted_depth */).plus(bigInt(value.toString().toLocaleString('fullwide', {useGrouping:false}))).toString().toLocaleString('fullwide', {useGrouping:false})
    });
    var v2/* id_depth_data */ = [v4/* targeted_depth */]
    await e.set_preset_data(presets);
    var val = await e.f86(v1/* _ids */, v2/* id_depth_data */);
    console.log("66j");

    var exp_vals = [
      0, 0, 0, 5, 1,
      0, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */, 1000,
      1, bgN(1, 9), 0, 0, 3000/* 4 */, 0, 0, v4/* targeted_depth *//* 7 */, bgN(1,54),bgN(1,45),bgN(1,36),bgN(1,27),60,((end_time_minutes*60)+1_000), 0/* 14 */,0,0,0, 
      100,
      3, 0, 0, 0,
      0, 0, 0, 0,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);






    //1 non-fungible exchange, <11>non_fungible_depth_token_applied_token_supply set to 0
    var presets = [
      [1, 3555, 0, 3, 5],[1, 3555, 0, 4, 1],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 10, 89], [1, 3555, 1, 11, 3], [1, 3555, 1, 18, 14], [1, 3555, 1, 19, 1400],

      [1, 3555, 2, 0, 1], [1, 3555, 2, 4, 3000],  [1, 3555, 2, 8, bgN(1,54)], [1, 3555, 2, 9, bgN(1,45)], [1, 3555, 2, 10, bgN(1,36)], [1, 3555, 2, 11, 0], [1, 3555, 2, 12, 60], [1, 3555, 2, 13, 1000],

      [1, 3555, 3, 0, 100],
      [1, 3555, 4, 0, 3],

      [3, 3555, 1, 3, 1]
    ];

    var v1/* _ids */ = [3555];
    var v3/* depths_to_add */ = [bgN(1, 63)/* exchange_ratio_y */, bgN(1, 53)/* end_time */, bgN(1, 37)/* start_time */, bgN(1, 30)/* supply */, bgN(1, 3)/* identifier */]
    var v4/* targeted_depth */ = bigInt(0)
    v3/* depths_to_add */.forEach(value => {
      v4/* targeted_depth */ = bigInt(v4/* targeted_depth */).plus(bigInt(value.toString().toLocaleString('fullwide', {useGrouping:false}))).toString().toLocaleString('fullwide', {useGrouping:false})
    });
    var v2/* id_depth_data */ = [v4/* targeted_depth */]
    await e.set_preset_data(presets);
    var val = await e.f86(v1/* _ids */, v2/* id_depth_data */);
    console.log("66k");

    var exp_vals = [
      0, 0, 0, 5, 1,
      bgN(1, 9), 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 3, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */, 1400,
      1, bgN(1, 9), 0, 0, 3000/* 4 */, 0, 0, v4/* targeted_depth *//* 7 */, bgN(1,54),bgN(1,45),bgN(1,36),0/* 11 */,60,((100_000_000*60)+1_000), 0/* 14 */,0,0,0, 
      100,
      3, 0, 0, 0,
      0, 0, 0, 0,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);







    //1 non-fungible exchange, class and incrementer applied
    var presets = [
      [1, 3555, 0, 3, 5],[1, 3555, 0, 4, 1],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 10, 89], [1, 3555, 1, 11, 3], [1, 3555, 1, 18, 14],

      [1, 3555, 2, 0, 1], [1, 3555, 2, 4, 3000],  [1, 3555, 2, 8, bgN(1,54)], [1, 3555, 2, 9, bgN(1,45)], [1, 3555, 2, 10, bgN(1,36)], [1, 3555, 2, 11, bgN(1,27)], [1, 3555, 2, 12, 60], [1, 3555, 2, 13, 1000], [1, 3555, 2, 14, bgN(1,18)], [1, 3555, 2, 16, bgN(1,9)],

      [1, 3555, 3, 0, 100],
      [1, 3555, 4, 0, 3],

      [3, 3555, 1, 3, 1],

      [4, 3555, 1000, 3000, 0]
    ];

    var v1/* _ids */ = [3555];
    var v3/* depths_to_add */ = [
      bgN(1, 63)/* exchange_ratio_y */, 
      bgN(1, 53)/* end_time */, 
      bgN(1, 37)/* start_time */, 
      bgN(1, 30)/* supply */,
      bgN(1, 12)/* identifier */, 
      bgN(3, 3)/* identifier */
    ]
    var v4/* targeted_depth */ = bigInt(0)
    v3/* depths_to_add */.forEach(value => {
      v4/* targeted_depth */ = bigInt(v4/* targeted_depth */).plus(bigInt(value.toString().toLocaleString('fullwide', {useGrouping:false}))).toString().toLocaleString('fullwide', {useGrouping:false})
    });
    var v2/* id_depth_data */ = [v4/* targeted_depth */]
    await e.set_preset_data(presets);
    var val = await e.f86(v1/* _ids */, v2/* id_depth_data */);
    console.log("66l");

    var exp_vals = [
      0, 0, 0, 5, 1,
      bgN(1, 9), 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 3, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */, 1000,
      1, bgN(1, 9), 0, 0, 3000/* 4 */, 0, 0, v4/* targeted_depth *//* 7 */, bgN(1,54), bgN(1,45), bgN(1,36), bgN(1,27), 60, ((100_000_000*60)+1_000), bgN(1,18)/* 14 */,1000,bgN(1,9),3000, 
      100,
      3, 0, 0, 0,
      0, 0, 0, 0,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });






  /* get_link_exchange_data(): gets exchange objects for new_parent_exchange_ids targets and exchange targets */
  xit("67. can run f87", async () => {
    //1 exchange
    var presets = [
      [1, 3555, 0, 3, 5],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 10, 89], [1, 3555, 1, 18, 14],
      [1, 3555, 2, 0, 30], [1, 3555, 2, 4, 3000],
      [1, 3555, 3, 0, 100],
      [1, 3555, 4, 0, 3],

      [3, 3555, 1, 3, 1],


      [1, 5555, 0, 3, 5],
      [1, 5555, 1, 0, 3], [1, 5555, 1, 10, 89], [1, 5555, 1, 18, 14],
      [1, 5555, 2, 0, 30], [1, 5555, 2, 4, 3000],
      [1, 5555, 3, 0, 100],
      [1, 5555, 4, 0, 3],

      [3, 5555, 1, 3, 1]
    ];

    var v1/* new_parent_exchange_ids */ = [3555];
    var v2/* targets */ = [5555];
    await e.set_preset_data(presets);
    var val = await e.f87(v1/* new_parent_exchange_ids */, v2/* targets */);
    console.log("67a");
    var exp_vals = [
      0, 0, 0, 5,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */,
      30, 0, 0, 0, 3000/* 4 */, 0, 0,
      100,
      3,

      0, 0, 0, 5,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */,
      30, 0, 0, 0, 3000/* 4 */, 0, 0,
      100,
      3, 0, 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //1 exchange
    var presets = [
      [1, 3555, 0, 3, 5],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 10, 89], [1, 3555, 1, 18, 14],
      [1, 3555, 2, 0, 30], [1, 3555, 2, 4, 3000],
      [1, 3555, 3, 0, 100],
      [1, 3555, 4, 0, 3],

      [3, 3555, 1, 3, 1],


      [1, 5555, 0, 3, 5],
      [1, 5555, 1, 0, 3], [1, 5555, 1, 10, 89], [1, 5555, 1, 18, 14],
      [1, 5555, 2, 0, 30], [1, 5555, 2, 4, 3000],
      [1, 5555, 3, 0, 100],
      [1, 5555, 4, 0, 3],

      [3, 5555, 1, 3, 1]
    ];

    var v1/* new_parent_exchange_ids */ = [3555];
    var v2/* targets */ = [5555];
    await e.set_preset_data(presets);
    var val = await e.f87(v1/* new_parent_exchange_ids */, v2/* targets */);
    console.log("67b");

    var exp_vals = [
      0, 0, 0, 5,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */,
      30, 0, 0, 0, 3000/* 4 */, 0, 0,
      100,
      3,

      0, 0, 0, 5,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */,
      30, 0, 0, 0, 3000/* 4 */, 0, 0,
      100,
      3, 0, 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //2 exchanges
    var presets = [
      [1, 3555, 0, 3, 5],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 10, 89], [1, 3555, 1, 18, 14],
      [1, 3555, 2, 0, 30], [1, 3555, 2, 4, 3000],
      [1, 3555, 3, 0, 100],
      [1, 3555, 4, 0, 3],

      [3, 3555, 1, 3, 1],


      [1, 5555, 0, 3, 5],
      [1, 5555, 1, 0, 3], [1, 5555, 1, 10, 89], [1, 5555, 1, 18, 14],
      [1, 5555, 2, 0, 30], [1, 5555, 2, 4, 3000],
      [1, 5555, 3, 0, 100],
      [1, 5555, 4, 0, 3],

      [3, 5555, 1, 3, 1],


      [1, 7555, 0, 3, 3],
      [1, 7555, 1, 0, 3], [1, 7555, 1, 10, 89], [1, 7555, 1, 18, 14],
      [1, 7555, 2, 0, 30], [1, 7555, 2, 4, 3000],
      [1, 7555, 3, 0, 100],
      [1, 7555, 4, 0, 3],

      [3, 7555, 1, 3, 1]
    ];

    var v1/* new_parent_exchange_ids */ = [3555, 7555];
    var v2/* targets */ = [5555];
    await e.set_preset_data(presets);
    var val = await e.f87(v1/* new_parent_exchange_ids */, v2/* targets */);
    console.log("67c");

    var exp_vals = [
      0, 0, 0, 5,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */,
      30, 0, 0, 0, 3000/* 4 */, 0, 0,
      100,
      3,

      0, 0, 0, 3,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */,
      30, 0, 0, 0, 3000/* 4 */, 0, 0,
      100,
      3,

      0, 0, 0, 5,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */,
      30, 0, 0, 0, 3000/* 4 */, 0, 0,
      100,
      3, 0, 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //3 exchanges
    var presets = [
      [1, 3555, 0, 3, 5],
      [1, 3555, 1, 0, 3], [1, 3555, 1, 10, 89], [1, 3555, 1, 18, 14],
      [1, 3555, 2, 0, 30], [1, 3555, 2, 4, 3000],
      [1, 3555, 3, 0, 100],
      [1, 3555, 4, 0, 3],

      [3, 3555, 1, 3, 1],


      [1, 5555, 0, 3, 5],
      [1, 5555, 1, 0, 3], [1, 5555, 1, 10, 89], [1, 5555, 1, 18, 14],
      [1, 5555, 2, 0, 30], [1, 5555, 2, 4, 3000],
      [1, 5555, 3, 0, 100],
      [1, 5555, 4, 0, 3],

      [3, 5555, 1, 3, 1],


      [1, 7555, 0, 3, 3],
      [1, 7555, 1, 0, 3], [1, 7555, 1, 10, 89], [1, 7555, 1, 18, 14],
      [1, 7555, 2, 0, 30], [1, 7555, 2, 4, 3000],
      [1, 7555, 3, 0, 100],
      [1, 7555, 4, 0, 3],

      [3, 7555, 1, 3, 1]
    ];

    var v1/* new_parent_exchange_ids */ = [3555];
    var v2/* targets */ = [5555, 7555];
    await e.set_preset_data(presets);
    var val = await e.f87(v1/* new_parent_exchange_ids */, v2/* targets */);
    console.log("67d");

    var exp_vals = [
      0, 0, 0, 5,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */,
      30, 0, 0, 0, 3000/* 4 */, 0, 0,
      100,
      3,

      0, 0, 0, 5,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */,
      30, 0, 0, 0, 3000/* 4 */, 0, 0,
      100,
      3,

      0, 0, 0, 3,
      3, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0/* 8 */, 0, 89, 0, 0 /* 12 */, 0, 0, 0, 0, 0, 14/* 18 */,
      30, 0, 0, 0, 3000/* 4 */, 0, 0,
      100,
      3, 0, 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* get_consensus_spend_mint_trust_fees(): gets consensus spend/buy exchanges' trust_fee_proportions and trust_fee_targets */
  xit("68. can run f88", async () => {
    //1 exchange
    var presets = [
      [1, 300, 1, 7, bgN(10, 16)],
      [1, 300, 1, 10, 404]
    ];

    var v1/* target_nums */ = [
      [
        [0],
        [0, 0, 0, 0, 0, 0],
        [0], [0],
        [300]/* 4 */, [400]
      ]
    ];

    await e.set_preset_data(presets);
    var val = await e.f88(v1/* target_nums */);
    console.log("68a");

    var exp_vals = [
      bgN(10, 16), 404
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //2 exchanges
    var presets = [
      [1, 300, 1, 7, bgN(10, 16)],
      [1, 300, 1, 10, 404],
      [1, 7777, 1, 7, bgN(30, 16)],
      [1, 7777, 1, 10, 4074]
    ];

    var v1/* target_nums */ = [
      [
        [0],
        [0, 0, 0, 0, 0, 0],
        [0], [0],
        [300, 7777]/* 4 */, [400, 5000]
      ]
    ];

    await e.set_preset_data(presets);
    var val = await e.f88(v1/* target_nums */);
    console.log("68b");

    var exp_vals = [
      bgN(10, 16), bgN(30, 16), 404, 4074
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //3 exchanges
    var presets = [
      [1, 300, 1, 7, bgN(10, 16)],
      [1, 300, 1, 10, 404],
      [1, 7777, 1, 7, bgN(30, 16)],
      [1, 7777, 1, 10, 4074],
      [1, 5488, 1, 7, bgN(9, 16)],
      [1, 5488, 1, 10, 23412]
    ];

    var v1/* target_nums */ = [
      [
        [0],
        [0, 0, 0, 0, 0, 0],
        [0], [0],
        [300, 7777]/* 4 */, [400, 5000]
      ],
      [
        [0],
        [0, 0, 0, 0, 0, 0],
        [0], [0],
        [5488]/* 4 */, [3]
      ]
    ];

    await e.set_preset_data(presets);
    var val = await e.f88(v1/* target_nums */);
    console.log("68c");

    var exp_vals = [
      bgN(10, 16), bgN(30, 16), bgN(9, 16), 404, 4074, 23412
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //3 exchanges, 1 buy
    var presets = [
      [1, 300, 1, 7, bgN(10, 16)],
      [1, 300, 1, 10, 404],
      [1, 7777, 1, 7, bgN(30, 16)],
      [1, 7777, 1, 10, 4074],
      [1, 5488, 1, 7, bgN(9, 16)],
      [1, 5488, 1, 10, 23412]
    ];

    var v1/* target_nums */ = [
      [
        [0],
        [0, 0, 0, 0, 0, 0],
        [0], [0],
        [300, 7777]/* 4 */, [400, 5000]
      ],
      [
        [0],
        [2, 0, 0, 0, 0, 0],
        [0], [0],
        [5488]/* 4 */, [3]
      ],
      [
        [0],
        [0, 0, 0, 0, 0, 0],
        [0], [0],
        [5488]/* 4 */, [3]
      ]
    ];

    await e.set_preset_data(presets);
    var val = await e.f88(v1/* target_nums */);
    console.log("68d");

    var exp_vals = [
      bgN(10, 16), bgN(30, 16), bgN(9, 16), bgN(9, 16), 404, 4074, 23412, 23412
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //3 exchanges, 1 buy, 1 reconfig
    var presets = [
      [1, 300, 1, 7, bgN(10, 16)],
      [1, 300, 1, 10, 404],
      [1, 7777, 1, 7, bgN(30, 16)],
      [1, 7777, 1, 10, 4074],
      [1, 5488, 1, 7, bgN(9, 16)],
      [1, 5488, 1, 10, 23412]
    ];

    var v1/* target_nums */ = [
      [
        [0],
        [0, 0, 0, 0, 0, 0],
        [0], [0],
        [300, 7777]/* 4 */, [400, 5000]
      ],
      [
        [0],
        [2, 0, 0, 0, 0, 0],
        [0], [0],
        [5488]/* 4 */, [3]
      ],
      [
        [0],
        [1, 0, 0, 0, 0, 0],
        [0], [0],
        [5488]/* 4 */, [3]
      ]
    ];

    await e.set_preset_data(presets);
    var val = await e.f88(v1/* target_nums */);
    console.log("68d");

    var exp_vals = [
      bgN(10, 16), bgN(30, 16), bgN(9, 16), 404, 4074, 23412, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* ?????? ????????? */
  xit("?????? ?????????", async () => {
    /* ?????? ????????? */
    console.log("?????? ?????????");
  });





  /* REMOVED: get_current_balances(): gets the current balances of sender*/
  xit("70. can run f89", async () => {
    //1 exchange
    var presets = [
      [2, 300, 1, 1555, 404000]
    ];

    var v1/* exchange_ids */ = [[1], [300], [], [], []];

    await e.set_preset_data(presets);
    var val = await e.f89(v1/* exchange_ids */, 1555);
    console.log("70a");

    var exp_vals = [404000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //2 exchanges
    var presets = [
      [2, 300, 1, 1555, 404000], [2, 1300, 1, 1555, 65000]
    ];

    var v1/* exchange_ids */ = [[1, 1], [300, 1300], [], [], []];

    await e.set_preset_data(presets);
    var val = await e.f89(v1/* exchange_ids */, 1555);
    console.log("70b");

    var exp_vals = [404000, 65000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //4 exchanges, 1 duplicate
    var presets = [
      [2, 300, 1, 1555, 404000], [2, 1300, 1, 1555, 65000]
    ];

    var v1/* exchange_ids */ = [[1, 1, 1, 1], [300, 1300, 300, 444], [], [], []];

    await e.set_preset_data(presets);
    var val = await e.f89(v1/* exchange_ids */, 1555);
    console.log("70c");

    var exp_vals = [404000, 65000, 404000, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //2 exchanges, sender in sender_accounts list
    var presets = [
      [2, 300, 1, 1555, 404001], [2, 1300, 1, 1555, 65000]
    ];

    var v1/* exchange_ids */ = [[1, 1], [300, 1300], [], [], [1555, 1555]];

    await e.set_preset_data(presets);
    var val = await e.f89(v1/* exchange_ids */, 15554);
    console.log("70d");

    var exp_vals = [404001, 65000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //2 exchanges, 1 buy
    var presets = [
      [2, 300, 1, 15556, 404010], [2, 1300, 1, 15556, 65004]
    ];

    var v1/* exchange_ids */ = [[0, 1], [300, 1300], [], [15556, 0], []];

    await e.set_preset_data(presets);
    var val = await e.f89(v1/* exchange_ids */, 1555);
    console.log("70e");

    var exp_vals = [404010, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //3 exchanges, 1 buy
    var presets = [
      [2, 300, 1, 1555, 404000], [2, 1300, 1, 1555, 65000]
    ];

    var v1/* exchange_ids */ = [[1, 0, 1], [300, 300, 1300], [], [0, 1555, 0], []];

    await e.set_preset_data(presets);
    var val = await e.f89(v1/* exchange_ids */, 1555);
    console.log("70f");

    var exp_vals = [404000, 404000, 65000, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //3 exchanges, 1 buy
    var presets = [
      [2, 300, 1, 1555, 404000], [2, 1300, 1, 1555, 65000]
    ];

    var v1/* exchange_ids */ = [[1, 0, 1], [300, 300, 1300], [], [0, 1555, 0], [1555, 0, 1555]];

    await e.set_preset_data(presets);
    var val = await e.f89(v1/* exchange_ids */, 155599);
    console.log("70g");

    var exp_vals = [404000, 404000, 65000, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //2 exchanges, 1 buy
    var presets = [
      [2, 300, 1, 1555, 404000], [2, 1300, 1, 1555, 65000]
    ];

    var v1/* exchange_ids */ = [[1, 0], [1300, 300], [], [0, 1555], [1555, 0]];

    await e.set_preset_data(presets);
    var val = await e.f89(v1/* exchange_ids */, 155599);
    console.log("70h");

    var exp_vals = [65000, 404000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* run_exchange_transfer_setters(): gets sender accounts, receiver accounts and exchange data in 3d array for exchange transfers */
  xit("71. can run f90", async () => {
    //1 exchange
    var v1/* data */ = [[0], [300], [10]/* 2 */, [], [15555]];
    var v2/* tokens_to_receive */ = [];
    var v3/* exchange_nums */ = [
      [[0], [0], [0,0,0,0,0,0,0,0], [300]/* 3 */, [1001], [0]]
    ];

    var val = await e.f90(v1/* data */, v2/* tokens_to_receive */, v3/* exchange_nums */, 1555);
    console.log("71a");

    var exp_vals = [10010, 15555, 300, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect( val[j]).to.equal(exp_vals[j]);
    }


    //3 exchange
    var v1/* data */ = [[0, 0, 0], [300, 400, 500], [10, 20, 33]/* 2 */, [], [15555, 1553, 550043]];
    var v2/* tokens_to_receive */ = [];
    var v3/* exchange_nums */ = [
      [[0], [0], [0,0,0,0,0,0,0,0], [300]/* 3 */, [1001], [0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300, 225, 433]/* 3 */, [1001, 2000, 3000], [0,0,0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300]/* 3 */, [1000], [0]]
    ];

    var val = await e.f90(v1/* data */, v2/* tokens_to_receive */, v3/* exchange_nums */, 1555);
    console.log("71b");

    var exp_vals = [
      10010, 15555, 300, 0,
      20020, 1553, 400, 0, 40000, 1553, 400, 0, 60000, 1553, 400, 0,
      33000, 550043, 500, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect( val[j]).to.equal(exp_vals[j]);
    }


    //3 exchange
    var v1/* data */ = [[0, 0, 0], [300, 400, 500], [10, 20, 33]/* 2 */, [], []];
    var v2/* tokens_to_receive */ = [];
    var v3/* exchange_nums */ = [
      [[0], [0], [0,0,0,0,0,0,0,0], [300]/* 3 */, [1001], [0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300, 225, 433]/* 3 */, [1001, 2000, 3000], [0,0,0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300]/* 3 */, [1000], [0]]
    ];

    var val = await e.f90(v1/* data */, v2/* tokens_to_receive */, v3/* exchange_nums */, 1555);
    console.log("71c");

    var exp_vals = [
      10010, 1555, 300, 0,
      20020, 1555, 400, 0, 40000, 1555, 400, 0, 60000, 1555, 400, 0,
      33000, 1555, 500, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect( val[j]).to.equal(exp_vals[j]);
    }


    //3 exchange, 1 sell
    var v1/* data */ = [[0, 0, 1], [300, 400, 500], [10, 20, 0]/* 2 */, [0, 0, 550043], [15555, 1553, 0]];
    var v2/* tokens_to_receive */ = [0, 0, 33];
    var v3/* exchange_nums */ = [
      [[0], [0], [0,0,0,0,0,0,0,0], [300]/* 3 */, [1001], [0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300, 225, 433]/* 3 */, [1001, 2000, 3000], [0,0,0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300]/* 3 */, [1000], [0]]
    ];

    var val = await e.f90(v1/* data */, v2/* tokens_to_receive */, v3/* exchange_nums */, 1555);
    console.log("71d");

    var exp_vals = [
      10010, 15555, 300, 0,
      20020, 1553, 400, 0, 40000, 1553, 400, 0, 60000, 1553, 400, 0,
      33000, 500, 550043, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect( val[j]).to.equal(exp_vals[j]);
    }


    //3 exchange, 1 sell
    var v1/* data */ = [[0, 0, 1], [300, 400, 500], [10, 20, 0]/* 2 */, [0, 0, 550043], []];
    var v2/* tokens_to_receive */ = [0, 0, 33];
    var v3/* exchange_nums */ = [
      [[0], [0], [0,0,0,0,0,0,0,0], [300]/* 3 */, [1001], [0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300, 225, 433]/* 3 */, [1001, 2000, 3000], [0,0,0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300]/* 3 */, [1000], [0]]
    ];

    var val = await e.f90(v1/* data */, v2/* tokens_to_receive */, v3/* exchange_nums */, 6604);
    console.log("71e");

    var exp_vals = [
      10010, 6604, 300, 0,
      20020, 6604, 400, 0, 40000, 6604, 400, 0, 60000, 6604, 400, 0,
      33000, 500, 550043, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
       expect( val[j]).to.equal(exp_vals[j]);
    }


    //3 exchanges, 1 sell
    var v1/* data */ = [[0, 0, 1], [300, 400, 500], [10, 20, 0]/* 2 */, [0, 0, 550043], []];
    var v2/* tokens_to_receive */ = [0, 0, 33];
    var v3/* exchange_nums */ = [
      [[0], [0], [0,0,0,0,0,0,0,0], [300]/* 3 */, [1001], [0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300, 225, 433]/* 3 */, [1001, 2000, 3000], [0, 0, 0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300, 266]/* 3 */, [1000, 10], [0, 0]]
    ];

    var val = await e.f90(v1/* data */, v2/* tokens_to_receive */, v3/* exchange_nums */, 6604);
    console.log("71f");

    var exp_vals = [
      10010, 6604, 300, 0,
      20020, 6604, 400, 0, 40000, 6604, 400, 0, 60000, 6604, 400, 0,
      33000, 500, 550043, 0, 330, 500, 550043, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect( val[j]).to.equal(exp_vals[j]);
    }


    //3 exchanges, 1 sell
    var v1/* data */ = [[0, 0, 1], [300, 400, 500], [10, 20, 0]/* 2 */, [0, 0, 550043], []];
    var v2/* tokens_to_receive */ = [0, 0, 33];
    var v3/* exchange_nums */ = [
      [[0], [0], [0,0,0,0,0,0,0,0], [300]/* 3 */, [1001], [0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300, 225, 433]/* 3 */, [1001, 2000, 3000], [0,0,0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300, 266]/* 3 */, [1000, 0], [0]]
    ];

    var val = await e.f90(v1/* data */, v2/* tokens_to_receive */, v3/* exchange_nums */, 6604);
    console.log("71g");

    var exp_vals = [
      10010, 6604, 300, 0,
      20020, 6604, 400, 0, 40000, 6604, 400, 0, 60000, 6604, 400, 0,
      33000, 500, 550043, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect( val[j]).to.equal(exp_vals[j]);
    }


    //3 exchanges, 1 sell
    var v1/* data */ = [[0, 0, 1], [300, 400, 500], [10, 20, 0]/* 2 */, [0, 0, 550043], []];
    var v2/* tokens_to_receive */ = [0, 0, 33];
    var v3/* exchange_nums */ = [
      [[0], [0], [0,0,0,0,0,0,0,0], [300]/* 3 */, [1001], [0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300, 225, 433]/* 3 */, [1001, 2000, 3000], [0,0,0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300, 266]/* 3 */, [0, 10], [0,0]]
    ];

    var val = await e.f90(v1/* data */, v2/* tokens_to_receive */, v3/* exchange_nums */, 6604);
    console.log("71h");
    var exp_vals = [
      10010, 6604, 300, 0,
      20020, 6604, 400, 0, 40000, 6604, 400, 0, 60000, 6604, 400, 0,
      0, 0, 0, 0, 330, 500, 550043, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect( val[j]).to.equal(exp_vals[j]);
    }


    //3 exchanges, 1 sell
    var v1/* data */ = [[0, 0, 1], [310, 40000, 520], [10, 20, 0]/* 2 */, [0, 0, 552043], []];
    var v2/* tokens_to_receive */ = [0, 0, 34];
    var v3/* exchange_nums */ = [
      [[0], [0], [0,0,0,0,0,0,0,0], [300]/* 3 */, [1001], [0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300, 225, 433]/* 3 */, [1001, 2000, 3000], [0,0,0]],
      [[0], [0], [0,0,0,0,0,0,0,0], [300, 266]/* 3 */, [0, 10], [0,0]]
    ];

    var val = await e.f90(v1/* data */, v2/* tokens_to_receive */, v3/* exchange_nums */, 6604);
    console.log("71i");
    var exp_vals = [
      10010, 6604, 310, 0,
      20020, 6604, 40000, 0, 40000, 6604, 40000, 0, 60000, 6604, 40000, 0,
      0, 0, 0, 0, 340, 520, 552043, 0,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect( val[j]).to.equal(exp_vals[j]);
    }
  });

  /* ?????? ????????? */
  xit("?????? ?????????", async () => {
    console.log("?????? ?????????");
  });


  //
  //
  //
  //
  //
  //
  //-----------------------~~~~~~STATE-MODIFY-FUNCTIONS~~~~~~-------------------
  /* make_account_for_sender/make_account(): creates account id for sender's address */
  xit("72. can run f91/f92", async () => {
    const [signer, addr1, addr2, addr3] = await ethers.getSigners();

    /* account: 445588 */
    await expect(e.f92(signer.address, 445588)).to.not.be.reverted;
    console.log("72a");
    var val = await e.f922(signer.address);
    expect(await val).to.equal(445588);

    await e.f923(signer.address);
    var val2 = await e.f922(signer.address);
    expect(await val2).to.equal(0);


    /* account: 454647 */
    await expect(e.f92(signer.address, 454647)).to.not.be.reverted;
    console.log("72b");
    var val = await e.f922(signer.address);
    expect(await val).to.equal(454647);

    await e.f923(signer.address);
    var val2 = await e.f922(signer.address);
    expect(await val2).to.equal(0);



    /* account: 90000001 */
    await expect(e.f92(addr1.address, 90000001)).to.not.be.reverted;
    console.log("72c");
    var val = await e.f922(addr1.address);
    expect(await val).to.equal(90000001);

    await e.f923(addr1.address);
    var val2 = await e.f922(addr1.address);
    expect(await val2).to.equal(0);


    /* account: 90003001 */
    await expect(e.f92(addr2.address, 90003001)).to.not.be.reverted;
    console.log("72d");
    var val = await e.f922(addr2.address);
    expect(await val).to.equal(90003001);

    await e.f923(addr2.address);
    var val2 = await e.f922(addr2.address);
    expect(await val2).to.equal(0);



    /* account: 90003001 */
    await expect(e.f92(addr2.address, 44)).to.not.be.reverted;
    console.log("72e");
    var val = await e.f922(addr2.address);
    expect(await val).to.equal(44);

    await e.f923(addr2.address);
    var val2 = await e.f922(addr2.address);
    expect(await val2).to.equal(0);

  });

  /* update_main_contract_limit_data(): updates main contract data stored in E5 contract */
  xit("73. can run f93", async () => {
    //set pos 26
    var presets = [
      [1, 2, 1, 26, 0]
    ];
    var v1/* new_main_contract_config */ = [0, 0, 0, 0/* 3 */, 0, 0, 0, 0/* 7 */, 0, 0, 0, 0, 0/* 12 */, 0, 0, 0, 0, 0/* 17 */, 0, 0, 0, 0/* 21 */, 0, 0, 0, 0/* 25 */, 77, 0, 0, 0, 0, 0, 55/* 32 */, 0, 0, 0, 0/* 36 */, 0, 0, 0, 0];

    await e.set_preset_data(presets);
    await expect(e.f93(v1/* new_main_contract_config */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    console.log("73a");

    var exp_vals = [77];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //set pos 26, 11
    var presets = [
      [1, 2, 1, 26, 0],
      [1, 2, 1, 11, 0]
    ];
    var v1/* new_main_contract_config */ = [0, 0, 0, 0/* 3 */, 0, 0, 0, 0/* 7 */, 0, 0, 0, 4, 0/* 12 */, 0, 0, 0, 0, 0/* 17 */, 0, 0, 0, 0/* 21 */, 0, 0, 0, 0/* 25 */, 77, 0, 0, 0, 0, 0, 55/* 32 */, 0, 0, 0, 0/* 36 */, 0, 0, 0, 0];

    await e.set_preset_data(presets);
    await expect(e.f93(v1/* new_main_contract_config */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    console.log("73b");

    var exp_vals = [77, 4];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //set pos 26, 11, 14
    var presets = [
      [1, 2, 1, 26, 0],
      [1, 2, 1, 11, 0],
      [1, 2, 1, 14, 0]
    ];
    var v1/* new_main_contract_config */ = [0, 0, 0, 0/* 3 */, 0, 0, 0, 0/* 7 */, 0, 0, 0, 4, 0/* 12 */, 0, 900, 0, 0, 0/* 17 */, 0, 0, 0, 0/* 21 */, 0, 0, 0, 0/* 25 */, 77, 0, 0, 0, 0, 0, 55/* 32 */, 0, 0, 0, 0/* 36 */, 0, 0, 0, 0];

    await e.set_preset_data(presets);
    await expect(e.f93(v1/* new_main_contract_config */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    console.log("73c");

    var exp_vals = [77, 4, 900];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //set pos 26, 11, 14, 24
    var presets = [
      [1, 2, 1, 26, 0],
      [1, 2, 1, 11, 0],
      [1, 2, 1, 14, 0],
      [1, 2, 1, 24, 0]
    ];
    var v1/* new_main_contract_config */ = [0, 0, 0, 0/* 3 */, 0, 0, 0, 0/* 7 */, 0, 0, 0, 4, 0/* 12 */, 0, 900, 0, 0, 0/* 17 */, 0, 0, 0, 0/* 21 */, 0, 0, 89, 0/* 25 */, 77, 0, 0, 0, 0, 0, 55/* 32 */, 0, 0, 0, 0/* 36 */, 0, 0, 0, 0];

    await e.set_preset_data(presets);
    await expect(e.f93(v1/* new_main_contract_config */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    console.log("73d");

    var exp_vals = [77, 4, 900, 89];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //set pos 26, 11, 14, 24, 0
    var presets = [
      [1, 2, 1, 26, 0],
      [1, 2, 1, 11, 0],
      [1, 2, 1, 14, 0],
      [1, 2, 1, 24, 0],
      [1, 2, 1, 0, 0]
    ];
    var v1/* new_main_contract_config */ = [22, 0, 0, 0/* 3 */, 0, 0, 0, 0/* 7 */, 0, 0, 0, 4, 0/* 12 */, 0, 900, 0, 0, 0/* 17 */, 0, 0, 0, 0/* 21 */, 0, 0, 89, 0/* 25 */, 77, 0, 0, 0, 0, 0, 55/* 32 */, 0, 0, 0, 0/* 36 */, 0, 0, 0, 0];

    await e.set_preset_data(presets);
    await expect(e.f93(v1/* new_main_contract_config */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    console.log("73e");

    var exp_vals = [77, 4, 900, 89, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //set pos 26, 11, 14, 24, 0
    var presets = [
      [1, 2, 1, 32, 0],
      [1, 2, 1, 26, 0],
      [1, 2, 1, 11, 0],
      [1, 2, 1, 14, 0],
      [1, 2, 1, 24, 0],
      [1, 2, 1, 0, 0],
      [1, 2, 1, 39, 0]
    ];
    var v1/* new_main_contract_config */ = [22, 0, 0, 0/* 3 */, 0, 0, 0, 0/* 7 */, 0, 0, 0, 4, 0/* 12 */, 0, 9090, 0, 0, 0/* 17 */, 0, 0, 0, 0/* 21 */, 0, 0, 89, 0/* 25 */, 770, 0, 0, 0, 0, 0, 55/* 32 */, 0, 0, 0, 0/* 36 */, 0, 0, 1003, 0];

    await e.set_preset_data(presets);
    await expect(e.f93(v1/* new_main_contract_config */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    console.log("73f");

    var exp_vals = [55, 770, 4, 9090, 89, 0, 1003];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);

  });

  /* update_main_contract_limit_data(): updates main contract data stored in E52 contract */
  xit("73. can run f94", async () => {
    //set pos 16
    console.log("73f");
    var presets = [
      [1, 2, 1, 16, 0]
    ];
    var v1/* new_main_contract_config */ = [0, 0, 0, 0/* 3 */, 0, 0, 0, 0/* 7 */, 0, 0, 0, 0, 0/* 12 */, 0, 0, 0, 9, 0/* 17 */, 0, 0, 0, 0/* 21 */, 0, 0, 0, 0/* 25 */, 0];

    await e.set_preset_data(presets);
    await expect(e.f94(v1/* new_main_contract_config */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);

    var exp_vals = [9];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    console.log("73g");
    var presets = [
      [1, 2, 1, 16, 3]
    ];
    var v1/* new_main_contract_config */ = [0, 0, 0, 2/* 3 */, 0, 0, 0, 0/* 7 */, 0, 0, 0, 0, 0/* 12 */, 0, 0, 0, 0, 0/* 17 */, 0, 0, 0, 0/* 21 */, 0, 0, 0, 0/* 25 */, 0];

    await e.set_preset_data(presets);
    await expect(e.f94(v1/* new_main_contract_config */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);

    var exp_vals = [0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    console.log("73h");
    var presets = [
      [1, 2, 1, 16, 8]
    ];
    var v1/* new_main_contract_config */ = [0, 0, 0, 0/* 3 */, 0, 0, 0, 0/* 7 */, 0, 0, 0, 0, 0/* 12 */, 0, 0, 0, 9, 0/* 17 */, 0, 0, 0, 0/* 21 */, 0, 0, 0, 0/* 25 */, 0];

    await e.set_preset_data(presets);
    await expect(e.f94(v1/* new_main_contract_config */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);

    var exp_vals = [9];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    console.log("73i");
    var presets = [
      [1, 2, 1, 16, 10]
    ];
    var v1/* new_main_contract_config */ = [0, 0, 0, 0/* 3 */, 0, 0, 0, 0/* 7 */, 0, 0, 0, 0, 0/* 12 */, 0, 0, 0, 10, 0/* 17 */, 0, 0, 0, 0/* 21 */, 0, 0, 0, 0/* 25 */, 0];

    await e.set_preset_data(presets);
    await expect(e.f94(v1/* new_main_contract_config */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);

    var exp_vals = [10];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });




  /* account_transaction_check(): checks to ensure transaction sent by account is valid */
  xit("74. can run f95", async () => {
    const [signer, addr1, addr2, addr3] = await ethers.getSigners();

    //2 txs, new user account
    var presets = [
      [1, 2, 1, 24, bgN(90, 16)/* <24>gas_reduction_proportion */],
      [1, 2, 1, 11, 1000000 /* <11>tx_gas_limit */],
      [1, 2, 1, 25, bgN(1, 9)/* <25>tx_gas_anchor_price */],
      [1, 2, 1, 26, 35/* <26>tx_gas_lower_limit */],
      [1, 2, 1, 12, 1 /* <12>contract_block_invocation_limit*/],
      [1, 2, 1, 13, 1/* <13>contract_time_invocation_limit */],
      [1, 2, 1, 14, 1/* minimum_entered_contracts */],
      [1, 2, 1, 19, 1/* minimum_transaction_count */],

      [2, 345600, 1, 4, 1/* entered_contracts */],
      [2, 345600, 1, 3, 1/* transaction_count */]
    ];

    var vv = [
      [[10000], [0], [0]],
      [[10000], [0], [0]]
    ];

    await e.set_preset_data(presets);
    console.log("74a");
    await expect(e.connect(signer).f95(1000, 345600, vv, 1000)).to.not.be.reverted;

    var val = await e.f952(signer.address);
    var exp_vals = [345600, 2, 2, 345600];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    expect(await val[4]).to.not.equal(0);
    expect(await val[5]).to.not.equal(0);

    await e.f953(signer.address);
    await e.delete_preset_data(presets);



    //2 txs, new user account, can_sender_vote_in_main_contract = false
    var presets = [
      [1, 2, 1, 24, bgN(90, 16)/* <24>gas_reduction_proportion */],
      [1, 2, 1, 11, 1000000 /* <11>tx_gas_limit */],
      [1, 2, 1, 25, bgN(1, 9)/* <25>tx_gas_anchor_price */],
      [1, 2, 1, 26, 35/* <26>tx_gas_lower_limit */],
      [1, 2, 1, 12, 1 /* <12>contract_block_invocation_limit*/],
      [1, 2, 1, 13, 1/* <13>contract_time_invocation_limit */],
      [1, 2, 1, 14, 1/* minimum_entered_contracts */],
      [1, 2, 1, 19, 1/* minimum_transaction_count */],

      [2, 345600, 1, 4, 1/* entered_contracts */],
      [2, 345600, 1, 3, 0/* transaction_count */]
    ];

    var vv = [
      [[10000], [0], [0]],
      [[10000], [0], [0]]
    ];

    await e.set_preset_data(presets);
    console.log("74b");
    await expect(e.connect(signer).f95(1000, 345600, vv, 1000)).to.not.be.reverted;

    var val = await e.f952(signer.address);
    var exp_vals = [345600, 3, 2, 345600];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    expect(await val[4]).to.not.equal(0);
    expect(await val[5]).to.not.equal(0);

    await e.f953(signer.address);
    await e.delete_preset_data(presets);



    //2 txs, new user account, can_sender_vote_in_main_contract = false
    var presets = [
      [1, 2, 1, 24, bgN(90, 16)/* <24>gas_reduction_proportion */],
      [1, 2, 1, 11, 1000000 /* <11>tx_gas_limit */],
      [1, 2, 1, 25, bgN(1, 9)/* <25>tx_gas_anchor_price */],
      [1, 2, 1, 26, 35/* <26>tx_gas_lower_limit */],
      [1, 2, 1, 12, 1 /* <12>contract_block_invocation_limit*/],
      [1, 2, 1, 13, 1/* <13>contract_time_invocation_limit */],
      [1, 2, 1, 14, 1/* minimum_entered_contracts */],
      [1, 2, 1, 19, 1/* minimum_transaction_count */],

      [2, 345600, 1, 4, 0/* entered_contracts */],
      [2, 345600, 1, 3, 1/* transaction_count */]
    ];

    var vv = [
      [[10000], [0], [0]],
      [[10000], [0], [0]]
    ];

    await e.set_preset_data(presets);
    console.log("74c");
    await expect(e.connect(signer).f95(1000, 345600, vv, 1000)).to.not.be.reverted;

    var val = await e.f952(signer.address);
    var exp_vals = [345600, 3, 2, 345600];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    expect(await val[4]).to.not.equal(0);
    expect(await val[5]).to.not.equal(0);

    await e.f953(signer.address);
    await e.delete_preset_data(presets);



    //2 txs, new user account, exceeded gas limit
    var presets = [
      [1, 2, 1, 24, bgN(90, 16)/* <24>gas_reduction_proportion */],
      [1, 2, 1, 11, 1000000 /* <11>tx_gas_limit */],
      [1, 2, 1, 25, bgN(1, 9)/* <25>tx_gas_anchor_price */],
      [1, 2, 1, 26, 35/* <26>tx_gas_lower_limit */],
      [1, 2, 1, 12, 1 /* <12>contract_block_invocation_limit*/],
      [1, 2, 1, 13, 1/* <13>contract_time_invocation_limit */],
      [1, 2, 1, 14, 1/* minimum_entered_contracts */],
      [1, 2, 1, 19, 1/* minimum_transaction_count */],

      [2, 345600, 1, 4, 1/* entered_contracts */],
      [2, 345600, 1, 3, 0/* transaction_count */]
    ];

    var vv = [
      [[10000], [0], [0]],
      [[10000], [0], [0]]
    ];

    await e.set_preset_data(presets);
    console.log("74d");
    await expect(e.connect(signer).f95(100000000000, 345600, vv, 1000)).to.be.reverted;

    await e.delete_preset_data(presets);


    //2 txs, new user account, last_transaction_block limit exceeded
    var presets = [
      [1, 2, 1, 24, bgN(90, 16)/* <24>gas_reduction_proportion */],
      [1, 2, 1, 11, 1000000 /* <11>tx_gas_limit */],
      [1, 2, 1, 25, bgN(1, 9)/* <25>tx_gas_anchor_price */],
      [1, 2, 1, 26, 35/* <26>tx_gas_lower_limit */],
      [1, 2, 1, 12, 1 /* <12>contract_block_invocation_limit*/],
      [1, 2, 1, 13, 1/* <13>contract_time_invocation_limit */],
      [1, 2, 1, 14, 1/* minimum_entered_contracts */],
      [1, 2, 1, 19, 1/* minimum_transaction_count */],

      [2, 345600, 1, 1, bgN(55, 44)/* last_transaction_block */],
      [2, 345600, 1, 2, 0/* last_transaction_time */],
      [2, 345600, 1, 4, 1/* entered_contracts */],
      [2, 345600, 1, 3, 0/* transaction_count */]
    ];

    var vv = [
      [[10000], [0], [0]],
      [[10000], [0], [0]]
    ];

    await e.set_preset_data(presets);
    console.log("74e");
    await expect(e.connect(signer).f95(1000, 345600, vv, 1000)).to.be.reverted;

    await e.delete_preset_data(presets);



    //2 txs, new user account, can_sender_vote_in_main_contract = false
    var presets = [
      [1, 2, 1, 24, bgN(90, 16)/* <24>gas_reduction_proportion */],
      [1, 2, 1, 11, 1000000 /* <11>tx_gas_limit */],
      [1, 2, 1, 25, bgN(1, 9)/* <25>tx_gas_anchor_price */],
      [1, 2, 1, 26, 35/* <26>tx_gas_lower_limit */],
      [1, 2, 1, 12, 1 /* <12>contract_block_invocation_limit*/],
      [1, 2, 1, 13, 1/* <13>contract_time_invocation_limit */],
      [1, 2, 1, 14, 1/* minimum_entered_contracts */],
      [1, 2, 1, 19, 1/* minimum_transaction_count */],

      [2, 345600, 1, 1, 0/* last_transaction_block */],
      [2, 345600, 1, 2, bgN(3, 30)/* last_transaction_time */],
      [2, 345600, 1, 4, 1/* entered_contracts */],
      [2, 345600, 1, 3, 0/* transaction_count */]
    ];

    var vv = [
      [[10000], [0], [0]],
      [[10000], [0], [0]]
    ];

    await e.set_preset_data(presets);
    console.log("74f");
    await expect(e.connect(signer).f95(1000, 345600, vv, 1000)).to.be.reverted;
    await e.delete_preset_data(presets);



    var gaslimit = await e.get_block_gaslimit();
    console.log(nWC(gaslimit)); //80,000,000


    //2 txs, new user account, tx_gas_limit set to 0
    var presets = [
      [1, 2, 1, 24, bgN(100, 16)/* <24>gas_reduction_proportion */],
      [1, 2, 1, 11, 0 /* <11>tx_gas_limit */],
      [1, 2, 1, 25, bgN(1, 9)/* <25>tx_gas_anchor_price */],
      [1, 2, 1, 26, 35/* <26>tx_gas_lower_limit */],
      [1, 2, 1, 12, 1 /* <12>contract_block_invocation_limit*/],
      [1, 2, 1, 13, 1/* <13>contract_time_invocation_limit */],
      [1, 2, 1, 14, 1/* minimum_entered_contracts */],
      [1, 2, 1, 19, 1/* minimum_transaction_count */],

      [2, 345600, 1, 4, 1/* entered_contracts */],
      [2, 345600, 1, 3, 1/* transaction_count */]
    ];

    var vv = [
      [[10000], [0], [0]],
      [[10000], [0], [0]]
    ];

    await e.set_preset_data(presets);
    console.log("74g");
    await expect(e.connect(signer).f95(80_000_000, 345600, vv, 1000)).to.not.be.reverted;

    var val = await e.f952(signer.address);
    var exp_vals = [345600, 2, 2, 345600];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    expect(await val[4]).to.not.equal(0);
    expect(await val[5]).to.not.equal(0);

    await e.f953(signer.address);
    await e.delete_preset_data(presets);




    //2 txs, new user account, tx_gas_lower_limit set to 0
    var presets = [
      [1, 2, 1, 24, bgN(100, 16)/* <24>gas_reduction_proportion */],
      [1, 2, 1, 11, 1_000_000 /* <11>tx_gas_limit */],
      [1, 2, 1, 25, bgN(1, 9)/* <25>tx_gas_anchor_price */],
      [1, 2, 1, 26, 0/* <26>tx_gas_lower_limit */],
      [1, 2, 1, 12, 1 /* <12>contract_block_invocation_limit*/],
      [1, 2, 1, 13, 1/* <13>contract_time_invocation_limit */],
      [1, 2, 1, 14, 1/* minimum_entered_contracts */],
      [1, 2, 1, 19, 1/* minimum_transaction_count */],

      [2, 345600, 1, 4, 1/* entered_contracts */],
      [2, 345600, 1, 3, 1/* transaction_count */]
    ];

    var vv = [
      [[10000], [0], [0]],
      [[10000], [0], [0]]
    ];

    await e.set_preset_data(presets);
    console.log("74h");
    await expect(e.connect(signer).f95(80_000_000, 345600, vv, 1000)).to.not.be.reverted;

    var val = await e.f952(signer.address);
    var exp_vals = [345600, 2, 2, 345600];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    expect(await val[4]).to.not.equal(0);
    expect(await val[5]).to.not.equal(0);

    await e.f953(signer.address);
    await e.delete_preset_data(presets);



    //2 txs, new user account
    var time = parseInt(await e.time());
    var presets = [
      [1, 2, 1, 24, bgN(90, 16)/* <24>gas_reduction_proportion */],
      [1, 2, 1, 11, 1000000 /* <11>tx_gas_limit */],
      [1, 2, 1, 25, bgN(1, 9)/* <25>tx_gas_anchor_price */],
      [1, 2, 1, 26, 35/* <26>tx_gas_lower_limit */],
      [1, 2, 1, 12, 1 /* <12>contract_block_invocation_limit*/],
      [1, 2, 1, 13, 1/* <13>contract_time_invocation_limit */],
      [1, 2, 1, 14, 1/* minimum_entered_contracts */],
      [1, 2, 1, 19, 1/* minimum_transaction_count */],

      [1, 2, 1, 39, 345600/* primary_tx_account */],
      [1, 2, 1, 40, bgN(5,30)/* primary_account_tx_period */],

      [2, 345600, 1, 4, 1/* entered_contracts */],
      [2, 345600, 1, 3, 1/* transaction_count */],
      [2, 345600, 1, 2, time/* last_transaction_time */]
    ];

    var vv = [
      [[10000], [0], [0]],
      [[10000], [0], [0]]
    ];

    await e.set_preset_data(presets);
    console.log("74i");
    await expect(e.connect(signer).f95(1000, 345600, vv, 1000)).to.not.be.reverted;

    var val = await e.f952(signer.address);
    var exp_vals = [345600, 2, 2, 345600];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    expect(await val[4]).to.not.equal(0);
    expect(await val[5]).to.not.equal(0);

    await e.f953(signer.address);
    await e.delete_preset_data(presets);




    //2 txs, new user account
    var time = parseInt(await e.time());
    var presets = [
      [1, 2, 1, 24, bgN(90, 16)/* <24>gas_reduction_proportion */],
      [1, 2, 1, 11, 1000000 /* <11>tx_gas_limit */],
      [1, 2, 1, 25, bgN(1, 9)/* <25>tx_gas_anchor_price */],
      [1, 2, 1, 26, 35/* <26>tx_gas_lower_limit */],
      [1, 2, 1, 12, 1 /* <12>contract_block_invocation_limit*/],
      [1, 2, 1, 13, 1/* <13>contract_time_invocation_limit */],
      [1, 2, 1, 14, 1/* minimum_entered_contracts */],
      [1, 2, 1, 19, 1/* minimum_transaction_count */],

      [1, 2, 1, 39, 345600/* primary_tx_account */],
      [1, 2, 1, 40, 1000/* primary_account_tx_period */],

      [2, 345600, 1, 4, 1/* entered_contracts */],
      [2, 345600, 1, 3, 1/* transaction_count */],
      [2, 345600, 1, 2, time-10_000/* last_transaction_time */]
    ];

    var vv = [
      [[10000], [0], [0]],
      [[10000], [0], [0]]
    ];

    await e.set_preset_data(presets);
    console.log("74j");
    await expect(e.connect(signer).f95(1000, 345600, vv, 1000)).to.not.be.reverted;

    var val = await e.f952(signer.address);
    var exp_vals = [345600, 2, 2, 345600];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    expect(await val[4]).to.not.equal(0);
    expect(await val[5]).to.not.equal(0);

    await e.f953(signer.address);
    await e.delete_preset_data(presets);






    //2 txs, new user account
    var time = parseInt(await e.time());
    var presets = [
      [1, 2, 1, 24, bgN(90, 16)/* <24>gas_reduction_proportion */],
      [1, 2, 1, 11, 1000000 /* <11>tx_gas_limit */],
      [1, 2, 1, 25, bgN(1, 9)/* <25>tx_gas_anchor_price */],
      [1, 2, 1, 26, 35/* <26>tx_gas_lower_limit */],
      [1, 2, 1, 12, 1 /* <12>contract_block_invocation_limit*/],
      [1, 2, 1, 13, 1/* <13>contract_time_invocation_limit */],
      [1, 2, 1, 14, 1/* minimum_entered_contracts */],
      [1, 2, 1, 19, 1/* minimum_transaction_count */],

      [1, 2, 1, 39, 345601/* primary_tx_account */],
      [1, 2, 1, 40, 1500/* primary_account_tx_period */],

      [2, 345600, 1, 4, 1/* entered_contracts */],
      [2, 345600, 1, 3, 1/* transaction_count */],
      [2, 345601, 1, 2, time-10_000/* last_transaction_time */]
    ];

    var vv = [
      [[10000], [0], [0]],
      [[10000], [0], [0]]
    ];

    await e.set_preset_data(presets);
    console.log("74k");
    await expect(e.connect(signer).f95(1000, 345600, vv, 1000)).to.be.reverted;
    await e.delete_preset_data(presets);
  });

  /* archive_data(): deletes data type and author_owner data in E52 */
  xit("75. can run f96", async () => {
    /* 1:num , 2:int_int_int , 3:num_str_metas */
    console.log("75a");
    var presets = [
      [1, 300, 0, 0, 32],
      [2, 300, 0, 0, 5000]
    ];

    var v1/* contract_proposal_ids */ = [300];

    await e.set_preset_data(presets);
    await expect(e.f96(v1/* contract_proposal_ids */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);


    var exp_vals = [0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas */
    console.log("75b");
    var presets = [
      [1, 300, 0, 0, 32],
      [2, 300, 0, 0, 5000],
      [1, 557788, 0, 0, 30],
      [2, 557788, 0, 0, 5000]
    ];

    var v1/* contract_proposal_ids */ = [300, 557788];

    await e.set_preset_data(presets);
    await expect(e.f96(v1/* contract_proposal_ids */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);


    var exp_vals = [0, 0, 0, 0,];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //invalid id_type
    /* 1:num , 2:int_int_int , 3:num_str_metas */
    console.log("75c");
    var presets = [
      [1, 300, 0, 0, 35],
      [2, 300, 0, 0, 5000],
      [1, 557788, 0, 0, 30],
      [2, 557788, 0, 0, 5000]
    ];

    var v1/* contract_proposal_ids */ = [300, 557788];

    await e.set_preset_data(presets);
    await expect(e.f96(v1/* contract_proposal_ids */)).to.be.reverted;



    //invalid id type
    /* 1:num , 2:int_int_int , 3:num_str_metas */
    console.log("75d");
    var presets = [
      [1, 300, 0, 0, 32],
      [2, 300, 0, 0, 5000],
      [1, 557788, 0, 0, 34],
      [2, 557788, 0, 0, 5000]
    ];

    var v1/* contract_proposal_ids */ = [300, 557788];

    await e.set_preset_data(presets);
    await expect(e.f96(v1/* contract_proposal_ids */)).to.be.reverted;


    //two in between untargeted ids
    /* 1:num , 2:int_int_int , 3:num_str_metas */
    console.log("75e");
    var presets = [
      [1, 44332, 0, 0, 30],
      [2, 44332, 0, 0, 5000],

      [1, 300, 0, 0, 32],
      [2, 300, 0, 0, 5000],

      [1, 557788, 0, 0, 30],
      [2, 557788, 0, 0, 5000],

      [1, 44333, 0, 0, 30],
      [2, 44333, 0, 0, 50001]
    ];

    var v1/* contract_proposal_ids */ = [300, 557788];

    await e.set_preset_data(presets);
    await expect(e.f96(v1/* contract_proposal_ids */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);

    var exp_vals = [30, 5000, 0, 0, 0, 0, 30, 50001];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    /* 1:num , 2:int_int_int , 3:num_str_metas */
    console.log("75f");
    var presets = [
      [1, 44332, 0, 0, 30],
      [2, 44332, 0, 0, 5000],

      [1, 300, 0, 0, 32],
      [2, 300, 0, 0, 5000],

      [1, 4009, 0, 0, 32],
      [2, 4009, 0, 0, 501],

      [1, 557788, 0, 0, 30],
      [2, 557788, 0, 0, 5000],

      [1, 44333, 0, 0, 30],
      [2, 44333, 0, 0, 50001]
    ];

    var v1/* contract_proposal_ids */ = [300, 557788];

    await e.set_preset_data(presets);
    await expect(e.f96(v1/* contract_proposal_ids */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);

    var exp_vals = [30, 5000, 0, 0, 32, 501, 0, 0, 30, 50001];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas */
    console.log("75g");
    var presets = [
      [1, 300, 0, 0, 32],
      [2, 300, 0, 0, 5000],
      [1, 300, 0, 2, 1],
    ];

    var v1/* contract_proposal_ids */ = [300];

    await e.set_preset_data(presets);
    await expect(e.f96(v1/* contract_proposal_ids */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);


    var exp_vals = [0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);

  });

  /* run_indexing_block_count_checker(): ensures sender can index a given data type and updates indexing count */
  xit("76. can run f97", async () => {
    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("76a");
    var presets = [
      [1, 2, 1, 16, 9],

      [2, 14, 40002, 35, 0],
      [2, 13, 40002, 35, 0]
    ];

    await expect(e.f97(35, 40002, presets)).to.not.be.reverted;
    var val = await e.read_preset_data(presets);
    var exp_vals = [9, 1];

    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    expect(await val[2]).to.not.equal(0);
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("76b");
    var presets = [
      [1, 2, 1, 16, 9],

      [2, 14, 40002, 0, 11],
      [2, 13, 40002, 0, 0]
    ];

    await expect(e.f97(0, 40002, presets)).to.not.be.reverted;
    var val = await e.read_preset_data(presets);
    var exp_vals = [9, 1];

    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    expect(await val[2]).to.not.equal(0);
    console.log("" + val[2]);
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("76c");
    var presets = [
      [1, 2, 1, 16, 9],

      [2, 14, 40002, 32, 9],
      [2, 13, 40002, 32, 0, 1]
    ];

    await expect(e.f97(32, 40002, presets)).to.be.reverted;



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("76d");
    var presets = [
      [1, 2, 1, 16, 9],

      [2, 14, 40002, 0, 9],
      [2, 13, 40002, 0, 0, 1]
    ];

    await expect(e.f97(0, 40002, presets)).to.not.be.reverted;
    var val = await e.read_preset_data(presets);

    var exp_vals = [9, 10];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    expect(await val[2]).to.not.equal(0);
    await e.delete_preset_data(presets);


    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("76e");
    var presets = [
      [1, 2, 1, 16, 9],

      [2, 14, 40002, 0, 81],
      [2, 13, 40002, 0, 0, 1]
    ];

    await expect(e.f97(0, 40002, presets)).to.be.reverted;
  });





  /* execute_record_item_in_tag(): ensures sender is author of target or target is 0, then runs run_indexing_blockcount_checker work */
  xit("77. can run f98", async () => {
    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("77a");
    var presets = [
      [1, 2, 1, 16, 9],

      [2, 14, 40002, 35, 0],
      [2, 13, 40002, 35, 0],

      [1, 23948, 0, 0, 35],
      [2, 23948, 0, 0, 40002]
    ];
    var v1/* target_id_data */ = [[23948], [], [], [], []];
    await expect(e.f98(v1/* target_id_data */, 40002, presets)).to.not.be.reverted;
    var val = await e.read_preset_data(presets);
    var exp_vals = [9, 1, 0, 35, 40002];

    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 2) {
        expect(await val[j]).to.equal(exp_vals[j]);
      }
    }
    expect(await val[2]).to.not.equal(0);
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("77b");
    var presets = [
      [1, 2, 1, 16, 9],

      [2, 14, 40002, 0, 0],
      [2, 13, 40002, 0, 0]

    ];
    var v1/* target_id_data */ = [[0], [], [], [], []];

    await expect(e.f98(v1/* target_id_data */, 40002, presets)).to.not.be.reverted;
    var val = await e.read_preset_data(presets);
    var exp_vals = [9, 1, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 2) {
        expect(await val[j]).to.equal(exp_vals[j]);
      }
    }
    expect(await val[2]).to.not.equal(0);
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("77c");
    var presets = [
      [1, 2, 1, 16, 9],

      [2, 14, 40002, 35, 0],
      [2, 13, 40002, 35, 0],

      [1, 23948, 0, 0, 35],
      [2, 23948, 0, 0, 444893]
    ];
    var v1/* target_id_data */ = [[23948], [], [], [], []];
    await expect(e.f98(v1/* target_id_data */, 40002, presets)).to.be.reverted;



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("77d");
    var presets = [
      [1, 2, 1, 16, 9],

      [2, 14, 40002, 35, 0],
      [2, 13, 40002, 35, 0],

      [1, 23948, 0, 0, 0]
    ];

    var v1/* target_id_data */ = [[23948], [], [], [], []];
    await expect(e.f98(v1/* target_id_data */, 40002, presets)).to.be.reverted;



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("77e");
    var presets = [
      [1, 2, 1, 16, 9],

      [2, 14, 40002, 35, 0],
      [2, 13, 40002, 35, 0],

      [1, 23948, 0, 0, 35],
      [2, 23948, 0, 0, 40002],


      [2, 14, 40002, 32, 0],
      [2, 13, 40002, 32, 0],

      [1, 1667788, 0, 0, 32],
      [2, 1667788, 0, 0, 40002]
    ];

    var v1/* target_id_data */ = [[23948, 1667788], [], [], [], []];
    await expect(e.f98(v1/* target_id_data */, 40002, presets)).to.not.be.reverted;
    var val = await e.read_preset_data(presets);
    var exp_vals = [9, 1, 0, 35, 40002, 1, 0, 32, 40002];

    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 2 && j != 6) {
        expect(await val[j]).to.equal(exp_vals[j]);
      } else {
        expect(await val[j]).to.not.equal(0);
      }
    }

    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("77f");
    var presets = [
      [1, 2, 1, 16, 9],

      [2, 14, 40002, 35, 0],
      [2, 13, 40002, 35, 0],

      [1, 23948, 0, 0, 35],
      [2, 23948, 0, 0, 40002],

      [2, 14, 40002, 32, 0],
      [2, 13, 40002, 32, 0],

      [1, 1667788, 0, 0, 32],
      [2, 1667788, 0, 0, 40001]
    ];

    var v1/* target_id_data */ = [[23948, 1667788], [], [], [], []];
    await expect(e.f98(v1/* target_id_data */, 40002, presets)).to.be.reverted;




    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("77g");
    var presets = [
      [1, 2, 1, 16, 9],

      [2, 14, 40002, 35, 0],
      [2, 13, 40002, 35, 0],

      [1, 23948, 0, 0, 35],
      [2, 23948, 0, 0, 40002],


      [2, 14, 40002, 32, 0],
      [2, 13, 40002, 32, 0],

      [1, 1667788, 0, 0, 32],
      [2, 1667788, 0, 0, 40002],

      [2, 14, 40002, 0, 0],
      [2, 13, 40002, 0, 0]
    ];

    var v1/* target_id_data */ = [[23948, 1667788, 0], [], [], [], []];

    await expect(e.f98(v1/* target_id_data */, 40002, presets)).to.not.be.reverted;
    var val = await e.read_preset_data(presets);
    var exp_vals = [9, 1, 0, 35, 40002, 1, 0, 32, 40002, 1, 0];

    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 2 && j != 6 && j != 10) {
        expect(await val[j]).to.equal(exp_vals[j]);
      } else {
        expect(await val[j]).to.not.equal(0);
      }
    }
    await e.delete_preset_data(presets);

  });

  /* modify_interactibles(): it enables/disables interactible checkers and aa/modifies interactible accounts*/
  xit("78. can run f99", async () => {
    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //action = 5 (enable/disable interactible checkers)
    console.log("78a");
    var presets = [
      [1, 23948, 1, 40002, 1],
      [1, 23948, 0, 1, 0]
    ];
    var v1/* target_id_data */ = [[23948], [], [], [], []];
    await expect(e.f99(v1/* target_id_data */, 40002, 5, presets)).to.not.be.reverted;

    var val = await e.f992();
    var exp_vals = [0, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //action = 1 (add interactible account)
    console.log("78b");
    var presets = [
      [1, 23948, 1, 40002, 1],
      [1, 23948, 2, 340033, 0]
    ];
    var v1/* target_id_data */ = [[23948], [340033], [4000000], [], []];
    await expect(e.f99(v1/* target_id_data */, 40002, 1, presets)).to.not.be.reverted;

    var val = await e.f992();
    var exp_vals = [340033, 4000000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 4000000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //action = 1 (add interactible account) , sender not moderator
    console.log("78c");
    var presets = [
      [1, 23948, 1, 40002, 0],
      [1, 23948, 2, 340033, 0]
    ];
    var v1/* target_id_data */ = [[23948], [340033], [4000000], [], []];
    await expect(e.f99(v1/* target_id_data */, 40002, 1, presets)).to.be.reverted;
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //action = 5 (enable/disable interactible checkers)
    console.log("78d");
    var presets = [
      [1, 23948, 1, 40002, 1],
      [1, 23948, 0, 1, 0],

      [1, 50049, 1, 40002, 1],
      [1, 50049, 0, 1, 0]
    ];
    var v1/* target_id_data */ = [[23948, 50049], [], [], [], []];
    await expect(e.f99(v1/* target_id_data */, 40002, 5, presets)).to.not.be.reverted;

    var val = await e.f992();
    var exp_vals = [0, 1,  0, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 1, 1, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //action = 1 (add interactible account)
    console.log("78e");
    var presets = [
      [1, 23948, 1, 40002, 1],
      [1, 23948, 2, 340033, 0],

      [1, 447788, 1, 40002, 1],
      [1, 447788, 2, 3400464, 0]
    ];
    var v1/* target_id_data */ = [[23948, 447788], [340033, 3400464], [4000000, 8999000], [], []];
    await expect(e.f99(v1/* target_id_data */, 40002, 1, presets)).to.not.be.reverted;

    var val = await e.f992();
    var exp_vals = [340033, 4000000,  3400464, 8999000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 4000000, 1, 8999000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //action = 5 (enable/disable interactible checkers)
    console.log("78f");
    var presets = [
      [1, 23948, 1, 40002, 1],
      [1, 23948, 0, 1, 0],

      [1, 50049, 1, 40002, 0],
      [1, 50049, 0, 1, 0]
    ];
    var v1/* target_id_data */ = [[23948, 50049], [], [], [], []];
    await expect(e.f99(v1/* target_id_data */, 40002, 5, presets)).to.be.reverted;



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //action = 5 (enable/disable interactible checkers)
    console.log("78g");
    var presets = [
      [1, 23948, 1, 40002, 1],
      [1, 23948, 0, 1, 0]
    ];
    var v1/* target_id_data */ = [[23948], [], [], [40002], []];
    await expect(e.f99(v1/* target_id_data */, 0, 5, presets)).to.not.be.reverted;

    var val = await e.f992();
    var exp_vals = [0, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //action = 5 (enable/disable interactible checkers)
    console.log("78h");
    var presets = [
      [1, 23948, 1, 40002, 1],
      [1, 23948, 0, 1, 0]
    ];
    var v1/* target_id_data */ = [[2], [], [], [40002], []];
    await expect(e.f99(v1/* target_id_data */, 0, 5, presets)).to.be.reverted;




    //action = 5 (enable/disable interactible checkers as author)
    console.log("78i");
    var presets = [
      [2, 23948, 0, 0, 40002],
      [1, 23948, 0, 1, 0]
    ];
    var v1/* target_id_data */ = [[23948], [], [], [], []];
    await expect(e.f99(v1/* target_id_data */, 40002, 5, presets)).to.not.be.reverted;

    var val = await e.f992();
    var exp_vals = [0, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.read_preset_data(presets);
    var exp_vals = [40002, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //action = 5 (enable/disable interactible checkers as author, author privelages disabled)
    console.log("78j");
    var presets = [
      [2, 23948, 0, 0, 40002],
      [1, 23948, 0, 2, 1],
      [1, 23948, 0, 1, 0]
    ];
    var v1/* target_id_data */ = [[23948], [], [], [], []];
    await expect(e.f99(v1/* target_id_data */, 40002, 5, presets)).to.be.reverted;




    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //action = 17 (block accounts)
    console.log("78k");
    var presets = [
      [1, 23948, 1, 40002, 1],
      [1, 23948, 3, 340033, 0]
    ];
    var v1/* target_id_data */ = [[23948], [340033], [4000000], [], []];
    await expect(e.f99(v1/* target_id_data */, 40002, 17, presets)).to.not.be.reverted;

    var val = await e.f992();
    var exp_vals = [340033, 4000000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 4000000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //action = 17 (block accounts)
    console.log("78l");
    var presets = [
      [1, 23948, 1, 40002, 1],
      [1, 23948, 3, 340033, 0],
      [1, 23948, 3, 400392, 0]
    ];
    var v1/* target_id_data */ = [[23948, 23948], [340033, 400392], [4000000, 80000], [], []];
    await expect(e.f99(v1/* target_id_data */, 40002, 17, presets)).to.not.be.reverted;

    var val = await e.f992();
    var exp_vals = [340033, 4000000,  400392, 80000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 4000000, 80000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* modify_moderators(): changes status of a given account as a moderator */
  xit("79. can run f100", async () => {
    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //modify mods as author
    console.log("79a");
    var presets = [
      [1, 23948, 0, 0, 27],
      [2, 23948, 0, 0, 40002],
      [1, 23948, 1, 40002, 0],

      [1, 23948, 1, 3000003, 0]
    ];
    var v1/* target_id_data */ = [[23948], [3000003], [], [], []];
    await expect(e.f100(v1/* target_id_data */, 40002, presets)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [27, 40002, 0, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //modify mods as moderator
    console.log("79b");
    var presets = [
      [1, 23948, 0, 0, 27],
      [2, 23948, 0, 0, 30002],
      [1, 23948, 1, 40002, 1],

      [1, 23948, 1, 3000003, 0]
    ];
    var v1/* target_id_data */ = [[23948], [3000003], [], [], []];
    await expect(e.f100(v1/* target_id_data */, 40002, presets)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [27, 30002, 1, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //modify mods as moderator, invalid target type
    console.log("79c");
    var presets = [
      [1, 23948, 0, 0, 29],
      [2, 23948, 0, 0, 30002],
      [1, 23948, 1, 40002, 1],

      [1, 23948, 1, 3000003, 0]
    ];
    var v1/* target_id_data */ = [[23948], [3000003], [], [], []];
    await expect(e.f100(v1/* target_id_data */, 40002, presets)).to.be.reverted;


    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //modify mods as moderator, invalid target type
    console.log("79d");
    var presets = [
      [1, 23948, 0, 0, 32],
      [2, 23948, 0, 0, 30002],
      [1, 23948, 1, 40002, 1],

      [1, 23948, 1, 3000003, 0]
    ];
    var v1/* target_id_data */ = [[23948], [3000003], [], [], []];
    await expect(e.f100(v1/* target_id_data */, 40002, presets)).to.be.reverted;


    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //modify mods as moderator, invalid target type
    console.log("79e");
    var presets = [
      [1, 23948, 0, 0, 35],
      [2, 23948, 0, 0, 30002],
      [1, 23948, 1, 40002, 1],

      [1, 23948, 1, 3000003, 0]
    ];
    var v1/* target_id_data */ = [[23948], [3000003], [], [], []];
    await expect(e.f100(v1/* target_id_data */, 40002, presets)).to.be.reverted;


    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //modify mods as moderator, invalid target type
    console.log("79f");
    var presets = [
      [1, 23948, 0, 0, 24],
      [2, 23948, 0, 0, 30002],
      [1, 23948, 1, 40002, 1],

      [1, 23948, 1, 3000003, 0]
    ];
    var v1/* target_id_data */ = [[23948], [3000003], [], [], []];
    await expect(e.f100(v1/* target_id_data */, 40002, presets)).to.be.reverted;



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //modify mods as moderator, sender not author and not moderator
    console.log("79g");
    var presets = [
      [1, 23948, 0, 0, 20],
      [2, 23948, 0, 0, 30002],
      [1, 23948, 1, 40002, 0],

      [1, 23948, 1, 3000003, 0]
    ];
    var v1/* target_id_data */ = [[23948], [3000003], [], [], []];
    await expect(e.f100(v1/* target_id_data */, 40002, presets)).to.be.reverted;



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //modify mods as author and mod
    console.log("79h");
    var presets = [
      [1, 23948, 0, 0, 27],
      [2, 23948, 0, 0, 40002],
      [1, 23948, 1, 40002, 1],

      [1, 23948, 1, 3000003, 0]
    ];
    var v1/* target_id_data */ = [[23948], [3000003], [], [], []];
    await expect(e.f100(v1/* target_id_data */, 40002, presets)).to.not.be.reverted;
    var val = await e.read_preset_data(presets);
    var exp_vals = [27, 40002, 1, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //modify mods as author and mod
    console.log("79i");
    var presets = [
      [1, 23948, 0, 0, 27],
      [2, 23948, 0, 0, 40002],
      [1, 23948, 1, 40002, 0],

      [1, 23948, 1, 3000003, 0],


      [1, 775648, 0, 0, 30],
      [2, 775648, 0, 0, 10002],
      [1, 775648, 1, 40002, 1],

      [1, 775648, 1, 8927772, 0]
    ];
    var v1/* target_id_data */ = [[23948, 775648], [3000003, 8927772], [], [], []];
    await expect(e.f100(v1/* target_id_data */, 40002, presets)).to.not.be.reverted;
    var val = await e.read_preset_data(presets);
    var exp_vals = [27, 40002, 0, 1, 30, 10002, 1, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //modify mods as author and mod
    console.log("79j");
    var presets = [
      [1, 23948, 0, 0, 27],
      [2, 23948, 0, 0, 40003],
      [1, 23948, 1, 40002, 0],

      [1, 23948, 1, 3000003, 0],


      [1, 775648, 0, 0, 30],
      [2, 775648, 0, 0, 10002],
      [1, 775648, 1, 40002, 1],

      [1, 775648, 1, 8927772, 0]
    ];
    var v1/* target_id_data */ = [[23948, 775648], [3000003, 8927772], [], [], []];
    await expect(e.f100(v1/* target_id_data */, 40002, presets)).to.be.reverted;


    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //modify mods as author
    console.log("79k");
    var presets = [
      [1, 23948, 0, 0, 27],
      [2, 23948, 0, 0, 40002],
      [1, 23948, 1, 40002, 0],

      [1, 23948, 1, 3000003, 0]
    ];
    var v1/* target_id_data */ = [[23948], [3000003], [40002], [], []];
    await expect(e.f100(v1/* target_id_data */, 0, presets)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [27, 40002, 0, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //modify mods as moderator
    console.log("79l");
    var presets = [
      [1, 23948, 0, 0, 27],
      [2, 23948, 0, 0, 30002],
      [1, 23948, 1, 40002, 1],

      [1, 23948, 1, 3000003, 0]
    ];
    var v1/* target_id_data */ = [[2], [3000003], [], [], []];
    await expect(e.f100(v1/* target_id_data */, 40002, presets)).to.be.reverted;


    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    //modify mods as author, author privelages revoked
    console.log("79m");
    var presets = [
      [1, 23948, 0, 0, 27],
      [2, 23948, 0, 0, 40002],
      [1, 23948, 1, 40002, 0],

      [1, 23948, 1, 3000003, 0],

      [1, 23948, 0, 2, 1],
    ];
    var v1/* target_id_data */ = [[23948], [3000003], [], [], []];
    await expect(e.f100(v1/* target_id_data */, 40002, presets)).to.be.reverted;
  });






  /* record_obj_type_and_creator(): records object type and sender account as author of new object */
  xit("80. can run f101", async () => {
    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("80a");
    var vv = [
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 17, 0], [], []]
    ];
    var v1/* temp_transaction_data */ = [10001];
    var v2/* record_obj_type_skip_data */ = [0];
    await expect(e.f101(vv, 0, 40002, v1/* temp_transaction_data */, v2/* record_obj_type_skip_data */)).to.not.be.reverted;

    var v3/* obj_ids */ = [10001];
    var val = await e.f1012(v3/* obj_ids */);
    var exp_vals = [0, 17, 40002];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    var presets = [
      [1, 10001, 0, 0, 0],
      [2, 10001, 0, 0, 0]
    ];
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("80b");
    var vv = [
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 18, 0], [], []]
    ];
    var v1/* temp_transaction_data */ = [10001];
    var v2/* record_obj_type_skip_data */ = [0];
    await expect(e.f101(vv, 0, 40102, v1/* temp_transaction_data */, v2/* record_obj_type_skip_data */)).to.not.be.reverted;

    var v3/* obj_ids */ = [10001];
    var val = await e.f1012(v3/* obj_ids */);
    var exp_vals = [0, 18, 40102];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    var presets = [
      [1, 10001, 0, 0, 0],
      [2, 10001, 0, 0, 0]
    ];
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("80c");
    var vv = [
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 19, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 18, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 17, 0], [], []]
    ];
    var v1/* temp_transaction_data */ = [10001, 10002, 10003];
    var v2/* record_obj_type_skip_data */ = [0, 0, 0];
    await expect(e.f101(vv, 0, 40102, v1/* temp_transaction_data */, v2/* record_obj_type_skip_data */)).to.not.be.reverted;

    var v3/* obj_ids */ = [10001, 10002, 10003];
    var val = await e.f1012(v3/* obj_ids */);
    var exp_vals = [0, 1, 1, 19, 40102, 18, 40102, 17, 40102];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    var presets = [
      [1, 10001, 0, 0, 0],
      [2, 10001, 0, 0, 0],

      [1, 10002, 0, 0, 0],
      [2, 10002, 0, 0, 0],

      [1, 10003, 0, 0, 0],
      [2, 10003, 0, 0, 0]
    ];
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("80d");
    var vv = [
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 19, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 18, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 17, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 20, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 22, 0], [], []]
    ];
    var v1/* temp_transaction_data */ = [10001, 10002, 10003, 10004, 10005];
    var v2/* record_obj_type_skip_data */ = [0, 0, 0, 0, 0];
    await expect(e.f101(vv, 0, 40102, v1/* temp_transaction_data */, v2/* record_obj_type_skip_data */)).to.not.be.reverted;

    var v3/* obj_ids */ = [10001, 10002, 10003, 10004, 10005];
    var val = await e.f1012(v3/* obj_ids */);
    var exp_vals = [0, 1, 1, 1, 1, 19, 40102, 18, 40102, 17, 40102, 20, 40102, 22, 40102];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    var presets = [
      [1, 10001, 0, 0, 0],
      [2, 10001, 0, 0, 0],

      [1, 10002, 0, 0, 0],
      [2, 10002, 0, 0, 0],

      [1, 10003, 0, 0, 0],
      [2, 10003, 0, 0, 0],

      [1, 10004, 0, 0, 0],
      [2, 10004, 0, 0, 0],

      [1, 10005, 0, 0, 0],
      [2, 10005, 0, 0, 0]
    ];
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("80e");
    var vv = [
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 19, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 18, 0], [], []],

      [[20000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 17, 0], [], []],

      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 20, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 22, 0], [], []]
    ];
    var v1/* temp_transaction_data */ = [10001, 10002, 10003, 10004, 10005];
    var v2/* record_obj_type_skip_data */ = [0, 0, 0, 0, 0];
    await expect(e.f101(vv, 0, 40102, v1/* temp_transaction_data */, v2/* record_obj_type_skip_data */)).to.not.be.reverted;

    var v3/* obj_ids */ = [10001, 10002, 10003, 10004, 10005];
    var val = await e.f1012(v3/* obj_ids */);
    var exp_vals = [0, 1, 0, 1, 1, 19, 40102, 18, 40102, 0, 0, 20, 40102, 22, 40102];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    var presets = [
      [1, 10001, 0, 0, 0],
      [2, 10001, 0, 0, 0],

      [1, 10002, 0, 0, 0],
      [2, 10002, 0, 0, 0],

      [1, 10003, 0, 0, 0],
      [2, 10003, 0, 0, 0],

      [1, 10004, 0, 0, 0],
      [2, 10004, 0, 0, 0],

      [1, 10005, 0, 0, 0],
      [2, 10005, 0, 0, 0]
    ];
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("80f");
    var vv = [
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 19, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 11, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 17, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 20, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 22, 0], [], []]
    ];
    var v1/* temp_transaction_data */ = [10001, 10002, 10003, 10004, 10005];
    var v2/* record_obj_type_skip_data */ = [0, 0, 0, 0, 0];
    await expect(e.f101(vv, 0, 40102, v1/* temp_transaction_data */, v2/* record_obj_type_skip_data */)).to.be.reverted;



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("80g");
    var vv = [
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 19, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 18, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 17, 0], [], []],

      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 29, 0], [], []],

      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 22, 0], [], []]
    ];
    var v1/* temp_transaction_data */ = [10001, 10002, 10003, 10004, 10005];
    var v2/* record_obj_type_skip_data */ = [0, 0, 0, 0, 0];
    await expect(e.f101(vv, 0, 40102, v1/* temp_transaction_data */, v2/* record_obj_type_skip_data */)).to.not.be.reverted;

    var v3/* obj_ids */ = [10001, 10002, 10003, 10004, 10005];
    var val = await e.f1012(v3/* obj_ids */);
    var exp_vals = [0, 1, 1, 1, 1, 19, 40102, 18, 40102, 17, 40102, 0, 0, 22, 40102];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    var presets = [
      [1, 10001, 0, 0, 0],
      [2, 10001, 0, 0, 0],

      [1, 10002, 0, 0, 0],
      [2, 10002, 0, 0, 0],

      [1, 10003, 0, 0, 0],
      [2, 10003, 0, 0, 0],

      [1, 10004, 0, 0, 0],
      [2, 10004, 0, 0, 0],

      [1, 10005, 0, 0, 0],
      [2, 10005, 0, 0, 0]
    ];
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("80h");
    var vv = [
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 19, 0], [], []],

      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 24, 0], [], []],

      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 17, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 16, 0], [], []],
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0/* 7 */, 0, 22, 0], [], []]
    ];
    var v1/* temp_transaction_data */ = [10001, 10002, 10003, 10004, 10005];
    var v2/* record_obj_type_skip_data */ = [0, 0, 0, 0, 0];
    await expect(e.f101(vv, 0, 40102, v1/* temp_transaction_data */, v2/* record_obj_type_skip_data */)).to.not.be.reverted;

    var v3/* obj_ids */ = [10001, 10002, 10003, 10004, 10005];
    var val = await e.f1012(v3/* obj_ids */);
    var exp_vals = [0, 1, 1, 1, 1, 19, 40102, 24, 0, 17, 40102, 16, 40102, 22, 40102];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    var presets = [
      [1, 10001, 0, 0, 0],
      [2, 10001, 0, 0, 0],

      [1, 10002, 0, 0, 0],
      [2, 10002, 0, 0, 0],

      [1, 10003, 0, 0, 0],
      [2, 10003, 0, 0, 0],

      [1, 10004, 0, 0, 0],
      [2, 10004, 0, 0, 0],

      [1, 10005, 0, 0, 0],
      [2, 10005, 0, 0, 0]
    ];
    await e.delete_preset_data(presets);

  });

  /* record_boot_id_types(): records entity types for boot objects */
  xit("81. can run f102", async () => {
    console.log("81a");
    var v1/* boot_id_data_type_data */ = [[2, 30]];
    await expect(e.f102(v1/* boot_id_data_type_data */)).to.not.be.reverted;
    var presets = [
      [1, 2, 0, 0, 0]
    ];
    var val = await e.read_preset_data(presets);
    var exp_vals = [30];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    console.log("81b");
    var v1/* boot_id_data_type_data */ = [[2, 30], [3, 31]];
    await expect(e.f102(v1/* boot_id_data_type_data */)).to.not.be.reverted;
    var presets = [
      [1, 2, 0, 0, 0],
      [1, 3, 0, 0, 0]
    ];
    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 31];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    console.log("81c");
    var v1/* boot_id_data_type_data */ = [[2, 30], [3, 31], [5, 31]];
    await expect(e.f102(v1/* boot_id_data_type_data */)).to.not.be.reverted;
    var presets = [
      [1, 2, 0, 0, 0],
      [1, 3, 0, 0, 0],
      [1, 5, 0, 0, 0]
    ];
    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 31, 31];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    console.log("81d");
    var v1/* boot_id_data_type_data */ = [[2, 30], [3], [5, 31]];
    await expect(e.f102(v1/* boot_id_data_type_data */)).to.be.reverted;

  });

  /* record_new_objects_data(): records data for subscription data object */
  xit("82. can run f103", async () => {
    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("82a");
    var v1/* new_obj_id_num_data */ = [
      [0, 0, 0],
      [3, 2, 1],
      [3, 5],
      [100, 200]
    ];
    await expect(e.f103(34588, v1/* new_obj_id_num_data */)).to.not.be.reverted;
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 0], [1, 34588, 2, 1, 0],
      [1, 34588, 3, 0, 0], [1, 34588, 3, 1, 0],

      [3, 34588, 1, 2, 0]
    ];
    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 3, 2, 1, 3, 5, 100, 200, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("82b");
    var v1/* new_obj_id_num_data */ = [
      [0, 0, 0],
      [3, 200, 1],
      [3, 5],
      [100, 200]
    ];
    await expect(e.f103(34588, v1/* new_obj_id_num_data */)).to.not.be.reverted;
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 0], [1, 34588, 2, 1, 0],
      [1, 34588, 3, 0, 0], [1, 34588, 3, 1, 0],

      [3, 34588, 1, 2, 0]
    ];
    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 3, 200, 1, 3, 5, 100, 200, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("82c");
    var v1/* new_obj_id_num_data */ = [
      [0, 0, 0],
      [3, 2, 1],
      [3, 5, 40000, 500000],
      [100, 200, 1000000, 34459000]
    ];
    await expect(e.f103(34588, v1/* new_obj_id_num_data */)).to.not.be.reverted;
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 0], [1, 34588, 2, 1, 0], [1, 34588, 2, 2, 0], [1, 34588, 2, 3, 0],
      [1, 34588, 3, 0, 0], [1, 34588, 3, 1, 0], [1, 34588, 3, 2, 0], [1, 34588, 3, 3, 0],

      [3, 34588, 1, 2, 0]
    ];
    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 3, 2, 1, 3, 5, 40000, 500000, 100, 200, 1000000, 34459000, 4];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp */
    console.log("82d");
    var v1/* new_obj_id_num_data */ = [
      [0, 0, 0],
      [3, 2, 1]
    ];
    await expect(e.f103(34588, v1/* new_obj_id_num_data */)).to.be.reverted;
  });





  /* modify_subscription(): modifies data in subscription object */
  xit("83. can run f104", async () => {
    console.log("83a");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var data = [[34588], [1], [1], [900005], []];
    await expect(e.f104(data, 400002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 400002, 900005, 0, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    console.log("83b");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var data = [[34588], [1], [1], [900004], [400002]];
    await expect(e.f104(data, 4040404)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 400002, 900004, 0, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    console.log("83c");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5], [1, 34588, 2, 2, 0],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var data = [[34588], [2], [2], [450], [400002]];
    await expect(e.f104(data, 4040404)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 400002, 0, 0, 3, 5, 450, 5000, 3000, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    console.log("83d");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5], [1, 34588, 2, 2, 0],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000], [1, 34588, 3, 2, 0],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var data = [[34588, 34588], [2, 3], [2, 2], [450, 1000], [400002, 400002]];
    await expect(e.f104(data, 4040404)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 400002, 0, 0, 3, 5, 450, 5000, 3000, 1000, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //target less than 1000
    console.log("83e");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5], [1, 34588, 2, 2, 0],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000], [1, 34588, 3, 2, 0],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var data = [[34588, 2], [2, 3], [2, 2], [450, 1000], [400002, 400002]];
    await expect(e.f104(data, 4040404)).to.be.reverted;
    await e.delete_preset_data(presets);



    //sender is not authority
    console.log("83f");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 40002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5], [1, 34588, 2, 2, 0],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000], [1, 34588, 3, 2, 0],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var data = [[34588, 34588], [2, 3], [2, 2], [450, 1000], [400002, 400002]];
    await expect(e.f104(data, 4040404)).to.be.reverted;
    await e.delete_preset_data(presets);


    //invalid target array pos
    console.log("83g");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5], [1, 34588, 2, 2, 0],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000], [1, 34588, 3, 2, 0],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var data = [[34588, 34588], [0, 3], [2, 2], [450, 1000], [400002, 400002]];
    await expect(e.f104(data, 4040404)).to.be.reverted;
    await e.delete_preset_data(presets);


    //targeting can_cancel_subscription value change
    console.log("83h");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5], [1, 34588, 2, 2, 0],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000], [1, 34588, 3, 2, 0],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var data = [[34588, 34588], [1, 3], [2, 2], [450, 1000], [400002, 400002]];
    await expect(e.f104(data, 4040404)).to.be.reverted;
    await e.delete_preset_data(presets);


    //revert if can_cancel_subscription is true and exchange or amount items are targeted
    console.log("83i");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5], [1, 34588, 2, 2, 0],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000], [1, 34588, 3, 2, 0],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var data = [[34588, 34588], [2, 3], [2, 2], [450, 1000], [400002, 400002]];
    await expect(e.f104(data, 4040404)).to.be.reverted;
    await e.delete_preset_data(presets);


    //invalid add exchange item 
    console.log("83j");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5], [1, 34588, 2, 2, 0],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000], [1, 34588, 3, 2, 0],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var data = [[34588, 34588], [2, 3], [5, 2], [450, 1000], [400002, 400002]];
    await expect(e.f104(data, 4040404)).to.be.reverted;
    await e.delete_preset_data(presets);



    console.log("83k");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2],


      [1, 400393, 0, 0, 0], [1, 400393, 0, 1, 0], [1, 400393, 0, 2, 0],
      [1, 400393, 1, 0, 400002], [1, 400393, 1, 1, 0], [1, 400393, 1, 2, 0],
      [1, 400393, 2, 0, 3], [1, 400393, 2, 1, 5],
      [1, 400393, 3, 0, 2000], [1, 400393, 3, 1, 4000],

      [3, 400393, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var data = [[34588, 400393, 400393], [1, 3, 1], [1, 1, 1], [900005, 3999, 144243], []];
    await expect(e.f104(data, 400002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      0, 0, 0, 400002, 900005, 0, 3, 5, 5000, 3000, 2,
      0, 0, 0, 400002, 144243, 0, 3, 5, 2000, 3999, 2
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //
    console.log("83l");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 0]
    ];
    await e.set_preset_data(presets);

    var data = [[34588], [1], [1], [900005], []];
    await expect(e.f104(data, 400002)).to.be.reverted;
    await e.delete_preset_data(presets);


    //attempting to modify time unit for a cancellable subscription
    console.log("83m");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1], [1, 34588, 1, 5, 2],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var data = [[34588], [1], [5], [900005], []];
    await expect(e.f104(data, 400002)).to.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 400002, 0, 1, 2, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //attempting to set invalid time unit
    console.log("83n");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 2],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var data = [[34588], [1], [5], [bgN(1,72)], []];
    await expect(e.f104(data, 400002)).to.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 400002, 0, 0, 2, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //modify exchange item
    console.log("83o");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 33], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var data = [[34588], [2], [1], [3], []];
    await expect(e.f104(data, 400002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 400002, 33, 0, 3, 3, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* get_collectible_amount(): gets time amount that can be claimed or collected */
  xit("84. can run f105", async () => {
    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp  ||   3: less , 5: add   */
    //account paid for 100 seconds, 10,000 seconds ago
    console.log("84a");
    var presets = [
      [2, 70090, 1, 400002, 0, 2, 3/* less */, 10000],
      [2, 70090, 2, 400002, 100],
      [2, 70090, 3, 400002, 100]
    ];
    await e.set_preset_data(presets);
    await expect(e.f105(70090, 400002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = await e.f1052();

    expect(await val[0]).to.equal(exp_vals[0]); /* last_time_paid */
    expect(await val[1]).to.equal(exp_vals[1]);/* time_paid_for */
    expect(0).to.equal(exp_vals[2]);/* unclaimed_time_paid */
    expect(await exp_vals[3]).to.equal(100);/* time_amount */

    await e.delete_preset_data(presets);


    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp  ||   3: less , 5: add   */
    //account paid for 1000 seconds, 100 seconds ago
    console.log("84b");
    var presets = [
      [2, 70090, 1, 400002, 0, 2, 3/* less */, 100],/* last_time_paid */
      [2, 70090, 2, 400002, 1000],/* time_paid_for */
      [2, 70090, 3, 400002, 1000]/* unclaimed_time_paid */
    ];
    await e.set_preset_data(presets);
    await expect(e.f105(70090, 400002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = await e.f1052();

    expect(await val[0]).to.equal(exp_vals[0]); /* last_time_paid */
    expect(await val[1]).to.equal(exp_vals[1]);/* time_paid_for */
    expect(899).to.equal(exp_vals[2]);/* unclaimed_time_paid */
    expect(await exp_vals[3]).to.equal(101);/* time_amount */

    await e.delete_preset_data(presets);


    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp   ||    3: less , 5: add   */
    //account paid for 10000 seconds, 1000 seconds ago
    console.log("84c");
    var presets = [
      [2, 70090, 1, 400002, 0, 2, 3/* less */, 1000],
      [2, 70090, 2, 400002, 10000],
      [2, 70090, 3, 400002, 10000]
    ];
    await e.set_preset_data(presets);
    await expect(e.f105(70090, 400002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = await e.f1052();

    expect(await val[0]).to.equal(exp_vals[0]); /* last_time_paid */
    expect(await val[1]).to.equal(exp_vals[1]);/* time_paid_for */
    expect(8999).to.equal(exp_vals[2]);/* unclaimed_time_paid */
    expect(await exp_vals[3]).to.equal(1001);/* time_amount */

    await e.delete_preset_data(presets);


    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp   ||    3: less , 5: add   */
    //account paid for 10000 seconds, 6000 seconds ago
    console.log("84d");
    var presets = [
      [2, 70090, 1, 400002, 0, 2, 3/* less */, 6000],
      [2, 70090, 2, 400002, 10000],
      [2, 70090, 3, 400002, 5000]
    ];
    await e.set_preset_data(presets);
    await expect(e.f105(70090, 400002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = await e.f1052();

    expect(await val[0]).to.equal(exp_vals[0]); /* last_time_paid */
    expect(await val[1]).to.equal(exp_vals[1]);/* time_paid_for */
    expect(3999).to.equal(exp_vals[2]);/* unclaimed_time_paid */
    expect(await exp_vals[3]).to.equal(1001);/* time_amount */

    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp   ||    3: less , 5: add   */
    //account paid for 10000 seconds, 9000 seconds ago
    console.log("84e");
    var presets = [
      [2, 70090, 1, 400002, 0, 2, 3/* less */, 9000],
      [2, 70090, 2, 400002, 10000],
      [2, 70090, 3, 400002, 3000]
    ];
    await e.set_preset_data(presets);
    await expect(e.f105(70090, 400002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = await e.f1052();

    expect(await val[0]).to.equal(exp_vals[0]); /* last_time_paid */
    expect(await val[1]).to.equal(exp_vals[1]);/* time_paid_for */
    expect(999).to.equal(exp_vals[2]);/* unclaimed_time_paid */
    expect(await exp_vals[3]).to.equal(2001);/* time_amount */

    await e.delete_preset_data(presets);


    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp  ||   3: less , 5: add   */
    //account paid for 150 seconds, 10000 seconds ago, 50 seconds claimed
    console.log("84f");
    var presets = [
      [2, 70090, 1, 400002, 0, 2, 3/* less */, 10000],
      [2, 70090, 2, 400002, 150],
      [2, 70090, 3, 400002, 100]
    ];
    await e.set_preset_data(presets);
    await expect(e.f105(70090, 400002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = await e.f1052();

    expect(await val[0]).to.equal(exp_vals[0]); /* last_time_paid */
    expect(await val[1]).to.equal(exp_vals[1]);/* time_paid_for */
    expect(0).to.equal(exp_vals[2]);/* unclaimed_time_paid */
    expect(await exp_vals[3]).to.equal(100);/* time_amount */

    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp  ||   3: less , 5: add   */
    //account paid for 150 seconds, 10,000 seconds ago, already claimed
    console.log("84g");
    var presets = [
      [2, 70090, 1, 400002, 0, 2, 3/* less */, 10000],
      [2, 70090, 2, 400002, 150],
      [2, 70090, 3, 400002, 0]
    ];
    await e.set_preset_data(presets);
    await expect(e.f105(70090, 400002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = await e.f1052();

    expect(await val[0]).to.equal(exp_vals[0]); /* last_time_paid */
    expect(await val[1]).to.equal(exp_vals[1]);/* time_paid_for */
    expect(0).to.equal(exp_vals[2]);/* unclaimed_time_paid */
    expect(await exp_vals[3]).to.equal(0);/* time_amount */

    await e.delete_preset_data(presets);


    /* 1:num , 2:int_int_int , 3:num_str_metas     ||     1: block.number , 2: block.timestamp  ||   3: less , 5: add   */
    //claim account that has not paid for subscription
    console.log("84h");
    var presets = [
      [2, 70090, 1, 400002, 0],
      [2, 70090, 2, 400002, 150],
      [2, 70090, 3, 400002, 0]
    ];
    await e.set_preset_data(presets);
    await expect(e.f105(70090, 400002)).to.be.reverted;
  });

  /* collect_subscriptions(): gets total amounts for collection in specified targets and sets data in 4 arrays for transfer actions */
  xit("85. can run f106", async () => {
    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("85a");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1],
      [1, 34588, 2, 0, 3],
      [1, 34588, 3, 0, 100],
      [1, 34588, 4, 0, 35],

      [3, 34588, 1, 2, 1],

      [2, 34588, 1, 80002, 0, 2, 3/* less */, 31800],
      [2, 34588, 2, 80002, 4180],
      [2, 34588, 3, 80002, 4180]
    ];
    var v1/* targets */ = [34588];
    var v2/* payer_accounts */ = [[80002]];
    var v3/* sender_accounts */ = [400002];
    await e.set_preset_data(presets);
    await expect(e.f106(v1/* targets */, v2/* payer_accounts */, 0, v3/* sender_accounts */)).to.not.be.reverted;

    var val = await e.f1062();
    var exp_vals = [3, 100, 34588, 400002, 35];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("85b");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 200],
      [1, 34588, 4, 0, 35],[1, 34588, 4, 1, 36],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 80002, 0, 2, 3/* less */, 31800],
      [2, 34588, 2, 80002, 4180],
      [2, 34588, 3, 80002, 4180]
    ];
    var v1/* targets */ = [34588];
    var v2/* payer_accounts */ = [[80002]];
    var v3/* sender_accounts */ = [400002];
    await e.set_preset_data(presets);
    await expect(e.f106(v1/* targets */, v2/* payer_accounts */, 0, v3/* sender_accounts */)).to.not.be.reverted;

    var val = await e.f1062();
    var exp_vals = [3, 5,  100, 200,  34588, 34588,  400002, 400002,  35, 36];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("85c");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 200],
      [1, 34588, 4, 0, 35],[1, 34588, 4, 1, 36],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 80002, 0, 2, 3/* less */, 31800],
      [2, 34588, 2, 80002, 1180],
      [2, 34588, 3, 80002, 1180]
    ];
    var v1/* targets */ = [34588];
    var v2/* payer_accounts */ = [[80002]];
    var v3/* sender_accounts */ = [400002];
    await e.set_preset_data(presets);
    await expect(e.f106(v1/* targets */, v2/* payer_accounts */, 0, v3/* sender_accounts */)).to.not.be.reverted;

    var val = await e.f1062();
    var exp_vals = [3, 5,  0, 0,  34588, 34588,  400002, 400002,   35, 36];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("85d");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 200],

      [3, 34588, 1, 2, 0],

      [2, 34588, 1, 80002, 0, 2, 3/* less */, 31800],
      [2, 34588, 2, 80002, 4180],
      [2, 34588, 3, 80002, 4180]
    ];
    var v1/* targets */ = [34588];
    var v2/* payer_accounts */ = [[80002]];
    var v3/* sender_accounts */ = [400002];
    await e.set_preset_data(presets);
    await expect(e.f106(v1/* targets */, v2/* payer_accounts */, 0, v3/* sender_accounts */)).to.be.reverted;

    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("85e");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400003], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 200],

      [3, 34588, 1, 2, 0],

      [2, 34588, 1, 80002, 0, 2, 3/* less */, 31800],
      [2, 34588, 2, 80002, 4180],
      [2, 34588, 3, 80002, 4180]
    ];
    var v1/* targets */ = [34588];
    var v2/* payer_accounts */ = [[80002]];
    var v3/* sender_accounts */ = [];
    await e.set_preset_data(presets);
    await expect(e.f106(v1/* targets */, v2/* payer_accounts */, 400002, v3/* sender_accounts */)).to.be.reverted;

    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("85f");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 200],

      [3, 34588, 1, 2, 0],

      [2, 34588, 1, 80002, 0, 2, 3/* less */, 31800],
      [2, 34588, 2, 80002, 4180],
      [2, 34588, 3, 80002, 4180]
    ];
    var v1/* targets */ = [34588];
    var v2/* payer_accounts */ = [[80002]];
    var v3/* sender_accounts */ = [];
    await e.set_preset_data(presets);
    await expect(e.f106(v1/* targets */, v2/* payer_accounts */, 400002, v3/* sender_accounts */)).to.be.reverted;

    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("85g");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1],
      [1, 34588, 2, 0, 3],
      [1, 34588, 3, 0, 100],
      [1, 34588, 4, 0, 10],

      [3, 34588, 1, 2, 1],

      [2, 34588, 1, 80002, 0, 2, 3/* less */, 31800],
      [2, 34588, 2, 80002, 4180],
      [2, 34588, 3, 80002, 4180],

      //
      [1, 776644, 0, 0, 0], [1, 776644, 0, 1, 0], [1, 776644, 0, 2, 0],
      [1, 776644, 1, 0, 400002], [1, 776644, 1, 1, 0], [1, 776644, 1, 2, 1],
      [1, 776644, 2, 0, 3], [1, 776644, 2, 1, 5],
      [1, 776644, 3, 0, 100], [1, 776644, 3, 1, 500],
      [1, 776644, 4, 0, 10],[1, 776644, 4, 1, 11],

      [3, 776644, 1, 2, 2],

      [2, 776644, 1, 80003, 0, 2, 3/* less */, 31800],
      [2, 776644, 2, 80003, 4180],
      [2, 776644, 3, 80003, 4180],

      [2, 776644, 1, 170003, 0, 2, 3/* less */, 31800],
      [2, 776644, 2, 170003, 4180],
      [2, 776644, 3, 170003, 4180]
    ];
    var v1/* targets */ = [34588, 776644];
    var v2/* payer_accounts */ = [[80002], [80003, 170003]];
    var v3/* sender_accounts */ = [400002, 400002];
    await e.set_preset_data(presets);
    await expect(e.f106(v1/* targets */, v2/* payer_accounts */, 400002, v3/* sender_accounts */)).to.not.be.reverted;

    var val = await e.f1062();
    var exp_vals = [3, 3, 5,  100, 200, 1000,  34588, 776644, 776644,  400002, 400002, 400002,  10, 10, 11];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("85h");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1], [1, 34588, 1, 5, 1000],
      [1, 34588, 2, 0, 3],
      [1, 34588, 3, 0, 100],
      [1, 34588, 4, 0, 35],

      [3, 34588, 1, 2, 1],

      [2, 34588, 1, 80002, 0, 2, 3/* less */, 11800],
      [2, 34588, 2, 80002, 1180],
      [2, 34588, 3, 80002, 1180]
    ];
    var v1/* targets */ = [34588];
    var v2/* payer_accounts */ = [[80002]];
    var v3/* sender_accounts */ = [];
    await e.set_preset_data(presets);
    await expect(e.f106(v1/* targets */, v2/* payer_accounts */, 400002, v3/* sender_accounts */)).to.not.be.reverted;

    var val = await e.f1062();
    var exp_vals = [3, 100, 34588, 400002, 35];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("85i");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 400002], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1], [1, 34588, 1, 5, 100000],
      [1, 34588, 2, 0, 3],
      [1, 34588, 3, 0, 100],
      [1, 34588, 4, 0, 35],

      [3, 34588, 1, 2, 1],

      [2, 34588, 1, 80002, 0, 2, 3/* less */, 31800],
      [2, 34588, 2, 80002, 4180],
      [2, 34588, 3, 80002, 4180]
    ];
    var v1/* targets */ = [34588];
    var v2/* payer_accounts */ = [[80002]];
    var v3/* sender_accounts */ = [];
    await e.set_preset_data(presets);
    await expect(e.f106(v1/* targets */, v2/* payer_accounts */, 400002, v3/* sender_accounts */)).to.not.be.reverted;

    var val = await e.f1062();
    var exp_vals = [3, 0, 34588, 400002, 35];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);

  });





  /* execute_pay_or_cancel_subscription(): updates account data set for paid subscriptions given a pay or cancel action, returns the 4 data arrays used to make final transfers */
  xit("86. can run f107", async () => {
    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("86a");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3],
      [1, 34588, 3, 0, 100],

      [3, 34588, 1, 2, 1],

      [2, 34588, 1, 400002, 0],/* last_time_paid */
      [2, 34588, 2, 400002, 0],/* time_paid_for */
      [2, 34588, 3, 400002, 0] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588];
    var v2/* amounts */ = [10];
    var v3/* senders */ = [400002];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 0, 0, v3/* senders */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 4008802, 0, 0, 3, 100, 1, 0/* 9 */, 31800, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 9) {
        expect(await val[j]).to.equal(exp_vals[j]);
      }
    }

    val = await e.f1072();
    exp_vals = [3, 1000, 400002, 4008802];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("86b");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 1000],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 400002, 0],/* last_time_paid */
      [2, 34588, 2, 400002, 0],/* time_paid_for */
      [2, 34588, 3, 400002, 0] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588];
    var v2/* amounts */ = [100];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 0, v3/* senders */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 4008802, 0, 0, 3, 5, 100, 1000, 2, 0/* 11 */, 318000, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 11) {
        expect(await val[j]).to.equal(exp_vals[j]);
      }
    }

    val = await e.f1072();
    exp_vals = [3, 5, 10000, 100000, 400002, 400002, 4008802, 4008802];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //buy amount less than minimum
    console.log("86c");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 101], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 1000],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 400002, 0],/* last_time_paid */
      [2, 34588, 2, 400002, 0],/* time_paid_for */
      [2, 34588, 3, 400002, 0] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588];
    var v2/* amounts */ = [100];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 0, v3/* senders */)).to.be.reverted;

    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //invalid buy amount
    console.log("86d");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 1000],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 400002, 0],/* last_time_paid */
      [2, 34588, 2, 400002, 0],/* time_paid_for */
      [2, 34588, 3, 400002, 0] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588];
    var v2/* amounts */ = [0];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 0, v3/* senders */)).to.be.reverted;

    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //buy amount exceeds maximum buy amount
    console.log("86e");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 99],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 1000],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 400002, 0],/* last_time_paid */
      [2, 34588, 2, 400002, 0],/* time_paid_for */
      [2, 34588, 3, 400002, 0] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588];
    var v2/* amounts */ = [100];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 0, v3/* senders */)).to.be.reverted;
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //if can_cancel_subscription is true
    console.log("86f");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 1000],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 400002, 0],/* last_time_paid */
      [2, 34588, 2, 400002, 0],/* time_paid_for */
      [2, 34588, 3, 400002, 0] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588];
    var v2/* amounts */ = [100];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 0, v3/* senders */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 4008802, 0, 1, 3, 5, 100, 1000, 2, 0/* 11 */, 318000, 318000];
    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 11) {
        expect(await val[j]).to.equal(exp_vals[j]);
      }
    }

    val = await e.f1072();
    exp_vals = [3, 5, 10000, 100000, 400002, 400002, 34588, 34588];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //action = 1 cancel
    console.log("86g");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 1000],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 400002, 0, 2],/* last_time_paid */
      [2, 34588, 2, 400002, 31800],/* time_paid_for */
      [2, 34588, 3, 400002, 31800] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588];
    var v2/* amounts */ = [1];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 1, v3/* senders */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 4008802, 0, 1, 3, 5, 100, 1000, 2, 0/* 11 */, 28620, 28620];
    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 11) {
        expect(await val[j]).to.equal(exp_vals[j]);
      }
    }

    val = await e.f1072();
    exp_vals = [3, 5, 100, 1000, 34588, 34588, 400002, 400002];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);





    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //action = 1 cancel
    console.log("86h");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 1000],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 400002, 0, 2],/* last_time_paid */
      [2, 34588, 2, 400002, 31800],/* time_paid_for */
      [2, 34588, 3, 400002, 31800] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588];
    var v2/* amounts */ = [2];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 1, v3/* senders */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 4008802, 0, 1, 3, 5, 100, 1000, 2, 0/* 11 */, 25440, 25440];
    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 11) {
        expect(await val[j]).to.equal(exp_vals[j]);
      }
    }

    val = await e.f1072();
    exp_vals = [3, 5, 200, 2000, 34588, 34588, 400002, 400002];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //action = 1 cancel, cancel subscription thats already expired
    console.log("86i");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 1000],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 400002, 0, 2, 3/* less */, 100000],/* last_time_paid */
      [2, 34588, 2, 400002, 31800],/* time_paid_for */
      [2, 34588, 3, 400002, 31800] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588];
    var v2/* amounts */ = [1];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 1, v3/* senders */)).to.be.reverted;
    await e.delete_preset_data(presets);





    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //action = 1 cancel, can_cancel_subscription set to false
    console.log("86j");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 1000],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 400002, 0, 2],/* last_time_paid */
      [2, 34588, 2, 400002, 31800],/* time_paid_for */
      [2, 34588, 3, 400002, 31800] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588];
    var v2/* amounts */ = [1];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 1, v3/* senders */)).to.be.reverted;
    await e.delete_preset_data(presets);





    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //action = 1 cancel, remaining balance less than default time units
    console.log("86k");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 1000],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 400002, 0, 2],/* last_time_paid */
      [2, 34588, 2, 400002, 4180],/* time_paid_for */
      [2, 34588, 3, 400002, 4180] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588];
    var v2/* amounts */ = [1];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 1, v3/* senders */)).to.be.reverted;
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //action = 1 cancel, amount larger than set balance
    console.log("86l");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 1000],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 400002, 0, 2],/* last_time_paid */
      [2, 34588, 2, 400002, 31800],/* time_paid_for */
      [2, 34588, 3, 400002, 31800] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588];
    var v2/* amounts */ = [20];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 1, v3/* senders */)).to.be.reverted;
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //action = 1 cancel, invalid amount passed
    console.log("86m");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 1000],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 400002, 0, 2],/* last_time_paid */
      [2, 34588, 2, 400002, 31800],/* time_paid_for */
      [2, 34588, 3, 400002, 31800] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588];
    var v2/* amounts */ = [0];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 1, v3/* senders */)).to.be.reverted;
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("86n");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3],
      [1, 34588, 3, 0, 100],

      [3, 34588, 1, 2, 1],

      [2, 34588, 1, 400002, 0],/* last_time_paid */
      [2, 34588, 2, 400002, 0],/* time_paid_for */
      [2, 34588, 3, 400002, 0], /* unclaimed_time_paid */


      [1, 448899, 0, 0, 0], [1, 448899, 0, 1, 0], [1, 448899, 0, 2, 0],
      [1, 448899, 1, 0, 4033402], [1, 448899, 1, 1, 0], [1, 448899, 1, 2, 1],
      [1, 448899, 2, 0, 30029],
      [1, 448899, 3, 0, 200],

      [3, 448899, 1, 2, 1],

      [2, 448899, 1, 400002, 0],/* last_time_paid */
      [2, 448899, 2, 400002, 0],/* time_paid_for */
      [2, 448899, 3, 400002, 0] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588, 448899];
    var v2/* amounts */ = [10, 1];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 0, v3/* senders */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      0, 0, 0, 4008802, 0, 0, 3, 100, 1, 0/* 9 */, 31800, 0,
      0, 0, 0, 4033402, 0, 1, 30029, 200, 1, 0/* 21 */, 3180, 3180
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 9 && j != 21) {
        expect(await val[j]).to.equal(exp_vals[j]);
      }
    }

    val = await e.f1072();
    exp_vals = [3, 30029, 1000, 200, 400002, 400002, 4008802, 448899];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //invalid subscription object passed
    console.log("86o");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0],
      [1, 34588, 2, 0, 3],
      [1, 34588, 3, 0, 100],

      [3, 34588, 1, 2, 0],

      [2, 34588, 1, 400002, 0],/* last_time_paid */
      [2, 34588, 2, 400002, 0],/* time_paid_for */
      [2, 34588, 3, 400002, 0], /* unclaimed_time_paid */


      [1, 448899, 0, 0, 0], [1, 448899, 0, 1, 0], [1, 448899, 0, 2, 0],
      [1, 448899, 1, 0, 4033402], [1, 448899, 1, 1, 0], [1, 448899, 1, 2, 1],
      [1, 448899, 2, 0, 30029],
      [1, 448899, 3, 0, 200],

      [3, 448899, 1, 2, 1],

      [2, 448899, 1, 400002, 0],/* last_time_paid */
      [2, 448899, 2, 400002, 0],/* time_paid_for */
      [2, 448899, 3, 400002, 0] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588, 448899];
    var v2/* amounts */ = [10, 1];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 0, v3/* senders */)).to.be.reverted;
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //action = 1 cancel, remaining balance less than minimum_cancellable_balance_amount time units
    console.log("86p");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 4008802], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 1], [1, 34588, 1, 4, 30],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 100], [1, 34588, 3, 1, 1000],

      [3, 34588, 1, 2, 2],

      [2, 34588, 1, 400002, 0, 2],/* last_time_paid */
      [2, 34588, 2, 400002, 8180],/* time_paid_for */
      [2, 34588, 3, 400002, 8180] /* unclaimed_time_paid */
    ];
    var v1/* targets */ = [34588];
    var v2/* amounts */ = [1];
    var v3/* senders */ = [];
    await e.set_preset_data(presets);
    await expect(e.f107(v1/* targets */, v2/* amounts */, 400002, 1, v3/* senders */)).to.be.reverted;
    await e.delete_preset_data(presets);
  });

  /* G3.boot(): sets boot data for main contract object during boot process */
  xit("87. can run f108", async () => {
    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("87a");
    var presets = [
      [1, 2, 0, 0, 0], [1, 2, 0, 1, 0], [1, 2, 0, 2, 0],
      [1, 2, 1, 0, 0], [1, 2, 1, 1, 0], [1, 2, 1, 2, 0], [1, 2, 1, 5, 0]
    ];
    var v1/* boot_data */ = [
      [[0, 0, 0], [16, 0, 500/* 2 */, 0, 0, 4499]]
    ];
    var v2/* boot_id_data_type_data */ = [[2, 30]];
    await e.set_preset_data(presets);
    await expect(e.f108(v1/* boot_data */, v2/* boot_id_data_type_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 0, 0, 16, 0, 500, 4499];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("87b");
    var presets = [
      [1, 2, 0, 0, 0], [1, 2, 0, 1, 0], [1, 2, 0, 2, 0],
      [1, 2, 1, 0, 0], [1, 2, 1, 1, 0], [1, 2, 1, 2, 0], [1, 2, 1, 5, 0],

      [1, 50000, 0, 0, 0], [1, 50000, 0, 1, 0], [1, 50000, 0, 2, 0],
      [1, 50000, 1, 0, 0], [1, 50000, 1, 1, 0], [1, 50000, 1, 2, 0], [1, 50000, 1, 5, 0]
    ];
    var v1/* boot_data */ = [
      [[0, 0, 0], [16, 0, 500/* 2 */, 0, 0, 4499]],
      [[0, 0, 0], [488, 8, 3/* 2 */, 0, 0, 19]]
    ];
    var v2/* boot_id_data_type_data */ = [[2, 30], [50000, 30]];
    await e.set_preset_data(presets);
    await expect(e.f108(v1/* boot_data */, v2/* boot_id_data_type_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 0, 0, 16, 0, 500, 4499, 30, 0, 0, 488, 8, 3, 19];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //one object not type contract
    console.log("87c");
    var presets = [
      [1, 2, 0, 0, 0], [1, 2, 0, 1, 0], [1, 2, 0, 2, 0],
      [1, 2, 1, 0, 0], [1, 2, 1, 1, 0], [1, 2, 1, 2, 0], [1, 2, 1, 5, 0],

      [1, 50000, 0, 0, 0], [1, 50000, 0, 1, 0], [1, 50000, 0, 2, 0],
      [1, 50000, 1, 0, 0], [1, 50000, 1, 1, 0], [1, 50000, 1, 2, 0], [1, 50000, 1, 5, 0]
    ];
    var v1/* boot_data */ = [
      [[0, 0, 0], [16, 0, 500/* 2 */, 0, 0, 4499]],
      [[0, 0, 0], [488, 8, 3/* 2 */, 0, 0, 19]]
    ];
    var v2/* boot_id_data_type_data */ = [[2, 30], [50000, 32]];
    await e.set_preset_data(presets);
    await expect(e.f108(v1/* boot_data */, v2/* boot_id_data_type_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 0, 0, 16, 0, 500, 4499, 0, 0, 0, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    console.log("87d");
    var presets = [
      [1, 2, 0, 0, 0], [1, 2, 0, 1, 0], [1, 2, 0, 2, 0],
      [1, 2, 1, 0, 0], [1, 2, 1, 1, 0], [1, 2, 1, 2, 0], [1, 2, 1, 5, 0]
    ];
    var v1/* boot_data */ = [
      [[0, 0, 0], [6, 0, 500/* 2 */, 0, 0, 4499]]
    ];
    var v2/* boot_id_data_type_data */ = [[2, 30]];
    await e.set_preset_data(presets);
    await expect(e.f108(v1/* boot_data */, v2/* boot_id_data_type_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 0, 0, 6, 0, 500, 4499];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


  });

  /* G3.record(): records new contract or proposal data into new object ids storage location */
  xit("88. can run f109", async () => {
    console.log("88a");
    var v1/* new_obj_id_num_data */ = [
      [0],
      [16, 0, 500/* 2 */, 0, 0, 4499, 0/* 6 */, 0, 0, 0, 0/* 10 */, 0, 0, 0, 0/* 14 */, 0],
      [3, 5],
      [100, 1000]
    ];
    await expect(e.f109(v1/* new_obj_id_num_data */, 25345233, 30)).to.not.be.reverted;
    var val = await e.f1092(25345233);
    var exp_vals = [
      30,
      16, 0, 500/* 2 */, 0, 0, 4499, 0/* 6 */, 0, 0, 0, 0/* 10 */, 0, 0, 0, 0/* 14 */, 0,
      3, 5,
      100, 1000,
      0, 0,
      2, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1093(25345233);



    console.log("88b");
    var v1/* new_obj_id_num_data */ = [
      [0],
      [16, 0, 500/* 2 */, 0, 0, 4499, 0/* 6 */, 0, 1, 0, 0/* 10 */, 0, 0, 0, 0/* 14 */, 0],
      [3, 5],
      [100, 10001]
    ];
    await expect(e.f109(v1/* new_obj_id_num_data */, 253452330, 30)).to.not.be.reverted;
    var val = await e.f1092(253452330);
    var exp_vals = [
      30,
      16, 0, 500/* 2 */, 0, 0, 4499, 0/* 6 */, 0, 1, 0, 0/* 10 */, 0, 0, 0, 0/* 14 */, 0,
      3, 5,
      100, 10001,
      0, 0,
      2, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1093(253452330);



    console.log("88c");
    var v1/* new_obj_id_num_data */ = [
      [0],
      [16, 0, 500/* 2 */, 0, 0, 4499, 0/* 6 */, 0, 0, 0, 0/* 10 */, 0, 0, 444, 0/* 14 */, 0],
      [3, 5, 7000193],
      [100, 1000, 3488922]
    ];
    await expect(e.f109(v1/* new_obj_id_num_data */, 253452331, 30)).to.not.be.reverted;
    var val = await e.f1092(253452331);
    var exp_vals = [
      30,
      16, 0, 500/* 2 */, 0, 0, 4499, 0/* 6 */, 0, 0, 0, 0/* 10 */, 0, 0, 444, 0/* 14 */, 0,
      3, 5, 7000193,
      100, 1000, 3488922,
      0, 0, 0,
      3, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1093(253452331);



    console.log("88d");
    var v1/* new_obj_id_num_data */ = [
      [0],
      [169, 0, 500/* 2 */, 0, 0, 4499, 0/* 6 */, 0, 0, 0, 0/* 10 */, 0, 0, 444, 0/* 14 */, 0],
      [3, 5, 7000193],
      [100, 1000, 3488922],

      [1, 2, 3],
      [4, 5, 6],
      [7, 9, 8]
    ];
    await expect(e.f109(v1/* new_obj_id_num_data */, 25349992331, 32)).to.not.be.reverted;

    var val = await e.f1092(25349992331);
    // console.log(val);
    var exp_vals = [
      32,
      169, 0, 500/* 2 */, 0, 0, 4499, 0/* 6 */, 0, 0, 0, 0/* 10 */, 0, 0, 444, 0/* 14 */, 0,
      1, 2, 3, 4, 5, 6, 7, 9, 8,  0,0,0, 0,0,0, 0,0,0,
      0, 3
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1093(25349992331);



    console.log("88e");
    var v1/* new_obj_id_num_data */ = [
      [0],
      [169, 0, 500/* 2 */, 0, 0, 4499, 0/* 6 */, 0, 1, 0, 0/* 10 */, 0, 0, 444, 0/* 14 */, 0],
      [3, 5, 7000193],
      [100, 1000, 3488922],

      [1, 2, 3],
      [4, 9, 6],
      [7, 9, 8]
    ];
    await expect(e.f109(v1/* new_obj_id_num_data */, 253499923310, 32)).to.not.be.reverted;

    var val = await e.f1092(253499923310);
    var exp_vals = [
      32,
      169, 0, 500/* 2 */, 0, 0, 4499, 0/* 6 */, 0, 1, 0, 0/* 10 */, 0, 0, 444, 0/* 14 */, 0,
      1, 2, 3, 4, 9, 6, 7, 9, 8,  0,0,0, 0,0,0, 0,0,0,
      0, 3
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1093(253499923310);



    console.log("88f");
    var v1/* new_obj_id_num_data */ = [
      [0],
      [169, 0, 500/* 2 */, 0, 0, 449900, 0/* 6 */, 0, 1, 0, 0/* 10 */, 0, 0, 444, 0/* 14 */, 0],
      [3, 5, 7000193],
      [100, 1000, 3488922],

      [1, 2],
      [4, 19],
      [7, 9]
    ];
    await expect(e.f109(v1/* new_obj_id_num_data */, 2534999233100, 32)).to.not.be.reverted;

    var val = await e.f1092(2534999233100);
    var exp_vals = [
      32,
      169, 0, 500/* 2 */, 0, 0, 449900, 0/* 6 */, 0, 1, 0, 0/* 10 */, 0, 0, 444, 0/* 14 */, 0,
      1, 2, 4, 19, 7, 9,  0,0, 0,0, 0,0,
      0, 2
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1093(2534999233100);




    console.log("88g");
    var v1/* new_obj_id_num_data */ = [
      [0],
      [169, 0, 500/* 2 */, 0, 0, 4499, 0/* 6 */, 0, 1, 0, 0/* 10 */, 0, 0, 444, 0/* 14 */, 0],
      [3, 5, 7000193, 688],
      [100, 1000, 3488922, 68800],

      [1, 2, 3, 44],
      [4, 9, 6, 55],
      [7, 9, 8, 66]
    ];
    await expect(e.f109(v1/* new_obj_id_num_data */, 1253499923310, 32)).to.not.be.reverted;

    var val = await e.f1092(1253499923310);
    var exp_vals = [
      32,
      169, 0, 500/* 2 */, 0, 0, 4499, 0/* 6 */, 0, 1, 0, 0/* 10 */, 0, 0, 444, 0/* 14 */, 0,
      1, 2, 3, 44, 4, 9, 6, 55, 7, 9, 8, 66,   0,0,0,0, 0,0,0,0, 0,0,0,0,
      0, 4
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1093(1253499923310);

  });






  /* modify_contract(): modifies data set in a given contract */
  xit("89. can run f110", async () => {
    console.log("89a");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [1], [1], [900005], []];
    await expect(e.f110(v1/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 0, 0, 0, 900005, 0, 40000, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    var v2/* update_val */ = await e.f1102();
    expect(await v2/* update_val */).to.equal(false);
    await e.delete_preset_data(presets);


    console.log("89b");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [1], [1], [9005], []];
    await expect(e.f110(v1/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 0, 0, 0, 9005, 0, 40000, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    var v2/* update_val */ = await e.f1102();
    expect(await v2/* update_val */).to.equal(false);
    await e.delete_preset_data(presets);


    console.log("89c");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [1], [2], [2], []];
    await expect(e.f110(v1/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 0, 0, 0, 0, 2, 40000, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    var v2/* update_val */ = await e.f1102();
    expect(await v2/* update_val */).to.equal(false);

    await e.delete_preset_data(presets);



    console.log("89d");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 34588], [1, 1], [1, 2], [900005, 30029], []];
    await expect(e.f110(v1/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 0, 0, 0, 900005, 30029, 40000, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    var v2/* update_val */ = await e.f1102();
    expect(await v2/* update_val */).to.equal(false);

    await e.delete_preset_data(presets);



    //target is not contract
    console.log("89e");
    var presets = [
      [1, 34588, 0, 0, 0], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 34588], [1, 1], [1, 2], [900005, 30029], []];
    await expect(e.f110(v1/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //modify invalid array pos
    console.log("89f");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 34588], [0, 1], [0, 2], [32, 30029], []];
    await expect(e.f110(v1/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);


    //modify invalid array pos for main contract obj
    console.log("89g");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 2], [1, 3], [1, 2], [900005, 30029], []];
    await expect(e.f110(v1/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //modify end spend entry amount
    console.log("89h");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 34588], [1, 3], [1, 0], [900005, 4], []];
    await expect(e.f110(v1/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //attempt changing contract expiry time in main contract
    console.log("89j");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 2], [1, 1], [1, 15], [900005, 5], []];
    await expect(e.f110(v1/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);


    //add source token in invalid pos
    console.log("89k");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 34588], [1, 2], [1, 4], [900005, 30029], []];
    await expect(e.f110(v1/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);


    //add new exchange for entry fee
    console.log("89l");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5], [1, 34588, 2, 2, 0],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [2], [2], [300], []];
    await expect(e.f110(v1/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 0, 0, 0, 0, 0, 40000, 3, 5, 300, 5000, 3000, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    var v2/* update_val */ = await e.f1102();
    expect(await v2/* update_val */).to.equal(false);

    await e.delete_preset_data(presets);



    //modify tx gas limit
    console.log("89m");
    var presets = [
      [1, 2, 0, 0, 30], [1, 2, 0, 1, 0], [1, 2, 0, 2, 0],
      [1, 2, 1, 0, 0], [1, 2, 1, 1, 0], [1, 2, 1, 2, 0], [1, 2, 1, 5, 40000], [1, 2, 1, 11, 1]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[2], [1], [11], [300], []];
    await expect(e.f110(v1/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 0, 0, 0, 0, 0, 40000, 300];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    var v2/* update_val */ = await e.f1102();
    expect(await v2/* update_val */).to.equal(true);

    await e.delete_preset_data(presets);


    //attempting to modify end/spend entry amount
    console.log("89n");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [3], [0], [90000], []];
    await expect(e.f110(v1/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //attempting to modify end/spend entry amount depth
    console.log("89o");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [4], [0], [90000], []];
    await expect(e.f110(v1/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    console.log("89p");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 90], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [2], [1], [900005], []];
    await expect(e.f110(v1/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 0, 0, 0, 90, 0, 40000, 3, 900005, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    var v2/* update_val */ = await e.f1102();
    expect(await v2/* update_val */).to.equal(false);
    await e.delete_preset_data(presets);

  });

  /* archive_proposal_data(): deletes all data stored in specified targets */
  xit("90. can run f111", async () => {
    console.log("90a");
    var presets = [
      [1, 34588, 0, 0, 30],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    await expect(e.f111(v1/* targets */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    console.log("90b");
    var presets = [
      [1, 34588, 0, 0, 30],
      [1, 34588, 1, 0, 33], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 59494], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 33333], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 20]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    await expect(e.f111(v1/* targets */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    console.log("90c");
    var presets = [
      [1, 34588, 0, 0, 30],
      [1, 34588, 1, 0, 33], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 59494], [1, 34588, 1, 5, 40000],
      [1, 34588, 2, 0, 33333], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 20],


      [1, 49903, 0, 0, 30],
      [1, 49903, 1, 0, 2], [1, 49903, 1, 1, 0], [1, 49903, 1, 3, 3456], [1, 49903, 1, 4, 900],
      [1, 49903, 2, 0, 393], [1, 49903, 2, 1, 5],
      [1, 49903, 3, 0, 5000], [1, 49903, 3, 1, 399],

      [3, 49903, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 49903];
    await expect(e.f111(v1/* targets */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    console.log("90d");
    var presets = [
      [1, 34588, 0, 0, 30],
      [1, 34588, 1, 0, 33], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 59494], [1, 34588, 1, 50, 40000],
      [1, 34588, 2, 0, 33333], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 20]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    await expect(e.f111(v1/* targets */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 0, 40000, 0, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    console.log("90e");
    var presets = [
      [1, 2, 0, 0, 30],
      [1, 2, 1, 0, 33], [1, 2, 1, 1, 0], [1, 2, 1, 2, 59494], [1, 2, 1, 50, 40000]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [2];
    await expect(e.f111(v1/* targets */)).to.be.reverted;
    await e.delete_preset_data(presets);



    console.log("90f");
    var presets = [
      [1, 34588, 0, 0, 35],
      [1, 34588, 1, 0, 33], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 59494], [1, 34588, 1, 50, 40000],
      [1, 34588, 2, 0, 33333], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 20]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    await expect(e.f111(v1/* targets */)).to.be.reverted;
    await e.delete_preset_data(presets);

  });

  /* execute_enter_contract_work(): sets data required for entering a contract */
  xit("91. can run f112", async () => {
    console.log("91a");
    var presets = [
      [2, 34588, 2, 40002, 0],
      [2, 34588, 1, 1, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* expiry */ = [bgN(5, 10)];
    var v3/* target_authors */ = [40001];
    var v4/* targets_data */ = [
      [[30], [0, 0, 0, 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, bgN(5, 14), 0/* 16 */]]
    ];
    await expect(e.f112(v1/* targets */, v2/* expiry */, 40002, v3/* target_authors */, v4/* targets_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 10), 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //if sender is author and max_enter_contract_duration is 0
    console.log("91b");
    var presets = [
      [2, 34588, 2, 40002, 0],
      [2, 34588, 1, 1, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* expiry */ = [bgN(5, 10)];
    var v3/* target_authors */ = [40002];
    var v4/* targets_data */ = [
      [[30], [0, 0, 0, 0/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, bgN(5, 14), 0/* 16 */]]
    ];

    await expect(e.f112(v1/* targets */, v2/* expiry */, 40002, v3/* target_authors */, v4/* targets_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 10), 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //if auto_wait_for_all_proposals_for_all_voters is true
    console.log("91c");
    var presets = [
      [2, 34588, 2, 40002, 0],
      [2, 34588, 1, 1, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* expiry */ = [bgN(1, 69)];
    var v3/* target_authors */ = [40001];
    var v4/* targets_data */ = [
      [[30], [0, 0, 0, 0/* 3 */, 0, 0, 0/* 6 */, 0, 1/* 8 */, 0, 0, 0, 12, 0, 0, bgN(5, 14), 0/* 16 */]]
    ];
    await expect(e.f112(v1/* targets */, v2/* expiry */, 40002, v3/* target_authors */, v4/* targets_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(1, 69), 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //if contract has expired but sender is author
    console.log("91d");
    var presets = [
      [2, 34588, 2, 40002, 0],
      [2, 34588, 1, 1, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* expiry */ = [bgN(5, 10)];
    var v3/* target_authors */ = [40002];
    var v4/* targets_data */ = [
      [[30], [0, 0, 0, 0/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 1000, 0/* 16 */]]
    ];
    await expect(e.f112(v1/* targets */, v2/* expiry */, 40002, v3/* target_authors */, v4/* targets_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 10), 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    console.log("91e");
    var presets = [
      [2, 34588, 2, 40002, 0],
      [2, 34588, 1, 1, 100]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* expiry */ = [bgN(5, 10)];
    var v3/* target_authors */ = [40001];
    var v4/* targets_data */ = [
      [[30], [0, 0, 0, 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, bgN(5, 14), 0/* 16 */]]
    ];
    await expect(e.f112(v1/* targets */, v2/* expiry */, 40002, v3/* target_authors */, v4/* targets_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 10), 101];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //revert if target is invalid
    console.log("91f");
    var presets = [
      [2, 34588, 2, 40002, 0],
      [2, 34588, 1, 1, 100]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [3];
    var v2/* expiry */ = [bgN(5, 10)];
    var v3/* target_authors */ = [40001];
    var v4/* targets_data */ = [
      [[30], [0, 0, 0, 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, bgN(5, 14), 0/* 16 */]]
    ];
    await expect(e.f112(v1/* targets */, v2/* expiry */, 40002, v3/* target_authors */, v4/* targets_data */)).to.be.reverted;


    //revert if target type is invalid
    console.log("91g");
    var presets = [
      [2, 34588, 2, 40002, 0],
      [2, 34588, 1, 1, 100]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* expiry */ = [bgN(5, 10)];
    var v3/* target_authors */ = [40001];
    var v4/* targets_data */ = [
      [[32], [0, 0, 0, 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, bgN(5, 14), 0/* 16 */]]
    ];
    await expect(e.f112(v1/* targets */, v2/* expiry */, 40002, v3/* target_authors */, v4/* targets_data */)).to.be.reverted;


    //revert if v2/* expiry */ time is invalid
    console.log("91h");
    var presets = [
      [2, 34588, 2, 40002, 0],
      [2, 34588, 1, 1, 100]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* expiry */ = [300];
    var v3/* target_authors */ = [40001];
    var v4/* targets_data */ = [
      [[30], [0, 0, 0, 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, bgN(5, 14), 0/* 16 */]]
    ];
    await expect(e.f112(v1/* targets */, v2/* expiry */, 40002, v3/* target_authors */, v4/* targets_data */)).to.be.reverted;


    //revert if sender has alredy entered the contract
    console.log("91i");
    var presets = [
      [2, 34588, 2, 40002, 1],
      [2, 34588, 1, 1, 100]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* expiry */ = [bgN(5, 10)];
    var v3/* target_authors */ = [40001];
    var v4/* targets_data */ = [
      [[30], [0, 0, 0, 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, bgN(5, 14), 0/* 16 */]]
    ];
    await expect(e.f112(v1/* targets */, v2/* expiry */, 40002, v3/* target_authors */, v4/* targets_data */)).to.be.reverted;


    //revert if v2/* expiry */ exceeds max entering duration
    console.log("91j");
    var presets = [
      [2, 34588, 2, 40002, 0],
      [2, 34588, 1, 1, 100]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* expiry */ = [bgN(5, 20)];
    var v3/* target_authors */ = [40001];
    var v4/* targets_data */ = [
      [[30], [0, 0, 0, 0/* 3 */, 0, 0, bgN(5, 9)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, bgN(5, 14), 0/* 16 */]]
    ];
    await expect(e.f112(v1/* targets */, v2/* expiry */, 40002, v3/* target_authors */, v4/* targets_data */)).to.be.reverted;



    //enter contract thats already expired
    console.log("91l");
    var presets = [
      [2, 34588, 2, 40002, 0],
      [2, 34588, 1, 1, 100]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* expiry */ = [bgN(5, 10)];
    var v3/* target_authors */ = [40001];
    var v4/* targets_data */ = [
      [[30], [0, 0, 0, 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 5000, 0/* 16 */]]
    ];
    await expect(e.f112(v1/* targets */, v2/* expiry */, 40002, v3/* target_authors */, v4/* targets_data */)).to.be.reverted;



    console.log("91m");
    var presets = [
      [2, 34588, 2, 40002, 0],
      [2, 34588, 1, 1, 100],

      [2, 478388, 2, 40002, 0],
      [2, 478388, 1, 1, 35]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588, 478388];
    var v2/* expiry */ = [bgN(5, 10), bgN(6, 10)];
    var v3/* target_authors */ = [40001, 40003];
    var v4/* targets_data */ = [
      [[30], [0, 0, 0, 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, bgN(5, 14), 0/* 16 */]],
      [[30], [0, 0, 0, 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, bgN(5, 14), 0/* 16 */]]
    ];
    await expect(e.f112(v1/* targets */, v2/* expiry */, 40002, v3/* target_authors */, v4/* targets_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 10), 101, bgN(6, 10), 36];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);

  });






  /* execute_extend_enter_contract_work(): sets data required for extending stay in a given contract */
  xit("92. can run f113", async () => {
    console.log("92a");
    var presets = [
      [2, 34588, 2, 40002, bgN(5, 10)]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* extension */ = [bgN(6, 10)];
    var v3/* targets_data */ = [
      [[30], [0, 0, bgN(5, 20), 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */, 0,0,0,0,0/* 21 */,0,0,0,0,0,0/* 27 */,0,0]]
    ];
    await expect(e.f113(v1/* targets */, v2/* extension */, 40002, v3/* targets_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(6, 10)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    console.log("92b");
    var presets = [
      [2, 34588, 2, 40002, bgN(122, 9)]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* extension */ = [bgN(124, 9)];
    var v3/* targets_data */ = [
      [[30], [0, 0, bgN(5, 20), 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */, 0,0,0,0,0/* 21 */,0,0,0,0,0,0/* 27 */,0,0]]
    ];
    await expect(e.f113(v1/* targets */, v2/* extension */, 40002, v3/* targets_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(124, 9)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    console.log("92c");
    var presets = [
      [2, 34588, 2, 40002, bgN(122, 9)],
      [2, 3888929, 2, 40002, bgN(122, 9)]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588, 3888929];
    var v2/* extension */ = [bgN(124, 9), bgN(6, 10)];
    var v3/* targets_data */ = [
      [[30], [0, 0, bgN(5, 20), 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */, 0,0,0,0,0/* 21 */,0,0,0,0,0,0/* 27 */,0,0]],
      [[30], [0, 0, bgN(5, 20), 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */, 0,0,0,0,0/* 21 */,0,0,0,0,0,0/* 27 */,0,0]]
    ];
    await expect(e.f113(v1/* targets */, v2/* extension */, 40002, v3/* targets_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(124, 9), bgN(6, 10)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //target is not valid
    console.log("92d");
    var presets = [
      [2, 34588, 2, 40002, bgN(5, 10)]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [20];
    var v2/* extension */ = [bgN(6, 10)];
    var v3/* targets_data */ = [
      [[30], [0, 0, bgN(5, 20), 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */, 0,0,0,0,0/* 21 */,0,0,0,0,0,0/* 27 */,0,0]]
    ];
    await expect(e.f113(v1/* targets */, v2/* extension */, 40002, v3/* targets_data */)).to.be.reverted;
    await e.delete_preset_data(presets);


    //target is not a contract
    console.log("92e");
    var presets = [
      [2, 34588, 2, 40002, bgN(5, 10)]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* extension */ = [bgN(6, 10)];
    var v3/* targets_data */ = [
      [[22], [0, 0, bgN(5, 20), 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */, 0,0,0,0,0/* 21 */,0,0,0,0,0,0/* 27 */,0,0]]
    ];
    await expect(e.f113(v1/* targets */, v2/* extension */, 40002, v3/* targets_data */)).to.be.reverted;
    await e.delete_preset_data(presets);


    //attempting to extend stay when contract is not about to expire
    console.log("92f");
    var presets = [
      [2, 34588, 2, 40002, bgN(5, 30)]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* extension */ = [bgN(6, 10)];
    var v3/* targets_data */ = [
      [[30], [0, 0, bgN(5, 20), 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */, 0,0,0,0,0/* 21 */,0,0,0,0,0,0/* 27 */,0,0]]
    ];
    await expect(e.f113(v1/* targets */, v2/* extension */, 40002, v3/* targets_data */)).to.be.reverted;
    await e.delete_preset_data(presets);


    //attempting to extend stay using a time thats greater than the contract's max entry time amount
    console.log("92g");
    var presets = [
      [2, 34588, 2, 40002, bgN(5, 10)]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* extension */ = [bgN(6, 30)];
    var v3/* targets_data */ = [
      [[30], [0, 0, bgN(5, 20), 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */, 0,0,0,0,0/* 21 */,0,0,0,0,0,0/* 27 */,0,0]]
    ];
    await expect(e.f113(v1/* targets */, v2/* extension */, 40002, v3/* targets_data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    console.log("92h");
    var presets = [
      [2, 34588, 2, 40002, bgN(5, 30)]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* extension */ = [bgN(6, 10)];
    var v3/* targets_data */ = [
      [[30], [0, 0, bgN(5, 20), 0/* 3 */, 0, 0, bgN(5, 14)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */, 0,0,0,0,0/* 21 */,0,0,0,0,0,0/* 27 */,0,1]]
    ];
    await expect(e.f113(v1/* targets */, v2/* extension */, 40002, v3/* targets_data */)).to.not.be.reverted;
    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(6, 10)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* execute_exit_contract_work(): executes actions involving exiting contracts */
  xit("93. can run f114", async () => {
    console.log("93a");
    var presets = [
      [2, 34588, 2, 40002, 500],
      [2, 34588, 1, 1, 3]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    await expect(e.f114(v1/* targets */, 40002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    console.log("93b");
    var presets = [
      [2, 34588, 2, 40002, 500],
      [2, 34588, 1, 1, 3],

      [2, 66833, 2, 40002, 223500],
      [2, 66833, 1, 1, 123]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 66833];
    await expect(e.f114(v1/* targets */, 40002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 2, 0, 122];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    console.log("93c");
    var presets = [
      [2, 34588, 2, 40002, 500],
      [2, 34588, 1, 1, 3],

      [2, 66833, 2, 40002, 223500],
      [2, 66833, 1, 1, 123],

      [2, 900234, 2, 40002, 223900],
      [2, 900234, 1, 1, 32]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 66833, 900234];
    await expect(e.f114(v1/* targets */, 40002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 2, 0, 122, 0, 31];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    console.log("93d");
    var presets = [
      [2, 34588, 2, 40002, 500],
      [2, 34588, 1, 1, 3],

      [2, 66833, 2, 40002, 0],
      [2, 66833, 1, 1, 123],

      [2, 900234, 2, 40002, 223900],
      [2, 900234, 1, 1, 32]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 66833, 900234];
    await expect(e.f114(v1/* targets */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);



    console.log("93e");
    var presets = [
      [2, 34588, 2, 40002, 500],
      [2, 34588, 1, 1, 3],

      [2, 66833, 2, 40002, 223500],
      [2, 66833, 1, 1, 123],

      [2, 900234, 2, 40002, 223900],
      [2, 900234, 1, 1, 32]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [3, 66833, 900234];
    await expect(e.f114(v1/* targets */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);



    console.log("93f");
    var presets = [
      [2, 34588, 2, 40002, 500],
      [2, 34588, 1, 1, 3],

      [2, 66833, 2, 40002, 223500],
      [2, 66833, 1, 1, 123],

      [2, 900234, 2, 40002, 223900],
      [2, 900234, 1, 1, 0]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 66833, 900234];
    await expect(e.f114(v1/* targets */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);



    //force exit accounts
    console.log("93g");
    var presets = [
      [2, 34588, 2, 40002, 500],
      [2, 34588, 1, 1, 3]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    var v2/* targets_data */ = [
      [[],[0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,1,  0,0,0]]
    ]
    var v3/* target_force_exit_accounts */ = [40002];
    await expect(e.f1142(v1/* targets */, 40003, v2/* targets_data */, v3/* target_force_exit_accounts */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    //force exit accounts, contract force exit disabled
    console.log("93h");
    var presets = [
      [2, 34588, 2, 40002, 500],
      [2, 34588, 1, 1, 3]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    var v2/* targets_data */ = [
      [[],[0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0,  0,0,0]]
    ]
    var v3/* target_force_exit_accounts */ = [40002];
    await expect(e.f1142(v1/* targets */, 40003, v2/* targets_data */, v3/* target_force_exit_accounts */)).to.be.reverted;
    await e.delete_preset_data(presets);

  });

  /* update_vote_data(): updates vote data set in consensus objects */
  xit("94. can run f115", async () => {
    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //first time voting, voting yes
    console.log("94a");
    var presets = [
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* votes */ = [1];
    var v3/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f115(v1/* targets */, 40002, v2/* votes */, v3/* target_bounty_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 0, 1, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1152();
    exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //first time voting, voting wait
    console.log("94b");
    var presets = [
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 5],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* votes */ = [2];
    var v3/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f115(v1/* targets */, 40002, v2/* votes */, v3/* target_bounty_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [2, 1, 5, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1152();
    exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //first time voting, voting no
    console.log("94c");
    var presets = [
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 190],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* votes */ = [3];
    var v3/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f115(v1/* targets */, 40002, v2/* votes */, v3/* target_bounty_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [3, 0, 0, 191, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1152();
    exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //not first time voting, voting yes
    console.log("94d");
    var presets = [
      [2, 34588, 3, 40002, 2],
      [2, 34588, 1, 2, 1],/* wait */[2, 34588, 1, 3, 10],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* votes */ = [1];
    var v3/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f115(v1/* targets */, 40002, v2/* votes */, v3/* target_bounty_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 0, 11, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1152();
    exp_vals = [0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //not first time voting, voting no
    console.log("94e");
    var presets = [
      [2, 34588, 3, 40002, 1],
      [2, 34588, 1, 2, 1],/* wait */[2, 34588, 1, 3, 10],/* yes */[2, 34588, 1, 4, 14],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* votes */ = [3];
    var v3/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f115(v1/* targets */, 40002, v2/* votes */, v3/* target_bounty_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [3, 1, 9, 15, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1152();
    exp_vals = [0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //first time voting, voting yes, auto_waits_set
    console.log("94f");
    var presets = [
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 4],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 3]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* votes */ = [1];
    var v3/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f115(v1/* targets */, 40002, v2/* votes */, v3/* target_bounty_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 3, 1, 0, 2];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1152();
    exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //not first time voting, voting no, broken counter, underflow attempt
    console.log("94g");
    var presets = [
      [2, 34588, 3, 40002, 1],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* votes */ = [3];
    var v3/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f115(v1/* targets */, 40002, v2/* votes */, v3/* target_bounty_exchanges */)).to.be.reverted;
    await e.delete_preset_data(presets);




    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //first time voting, voting yes, multiple
    console.log("94h");
    var presets = [
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0],/* auto_waits_set */

      [2, 488893, 3, 40002, 0],
      [2, 488893, 1, 2, 0],/* wait */[2, 488893, 1, 3, 0],/* yes */[2, 488893, 1, 4, 0],/* no */
      [2, 488893, 1, 7, 0],/* auto_waits_set */

      [2, 884493, 3, 40002, 0],
      [2, 884493, 1, 2, 0],/* wait */[2, 884493, 1, 3, 0],/* yes */[2, 884493, 1, 4, 0],/* no */
      [2, 884493, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588, 488893, 884493];
    var v2/* votes */ = [1, 2, 3];
    var v3/* target_bounty_exchanges */ = [[3, 5], [3, 5], []];
    await expect(e.f115(v1/* targets */, 40002, v2/* votes */, v3/* target_bounty_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      1, 0, 1, 0, 0,
      2, 1, 0, 0, 0,
      3, 0, 0, 1, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1152();
    exp_vals = [1, 1, 0, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //first time voting 2, not first time voting 1, voting yes, multiple
    console.log("94i");
    var presets = [
      [2, 34588, 3, 40002, 2],
      [2, 34588, 1, 2, 1],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0],/* auto_waits_set */

      [2, 488893, 3, 40002, 0],
      [2, 488893, 1, 2, 0],/* wait */[2, 488893, 1, 3, 0],/* yes */[2, 488893, 1, 4, 0],/* no */
      [2, 488893, 1, 7, 0],/* auto_waits_set */

      [2, 884493, 3, 40002, 0],
      [2, 884493, 1, 2, 0],/* wait */[2, 884493, 1, 3, 0],/* yes */[2, 884493, 1, 4, 0],/* no */
      [2, 884493, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588, 488893, 884493];
    var v2/* votes */ = [1, 2, 3];
    var v3/* target_bounty_exchanges */ = [[3, 5], [3, 5], []];
    await expect(e.f115(v1/* targets */, 40002, v2/* votes */, v3/* target_bounty_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      1, 0, 1, 0, 0,
      2, 1, 0, 0, 0,
      3, 0, 0, 1, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1152();
    exp_vals = [0, 1, 0, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //first time voting, voting yes, double targeting
    console.log("94j");
    var presets = [
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0],/* auto_waits_set */

      [2, 488893, 3, 40002, 0],
      [2, 488893, 1, 2, 0],/* wait */[2, 488893, 1, 3, 0],/* yes */[2, 488893, 1, 4, 0],/* no */
      [2, 488893, 1, 7, 0]/* auto_waits_set */

    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588, 488893, 34588];
    var v2/* votes */ = [1, 2, 3];
    var v3/* target_bounty_exchanges */ = [[3, 5], [3, 5], [3, 5]];
    await expect(e.f115(v1/* targets */, 40002, v2/* votes */, v3/* target_bounty_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      3, 0, 0, 1, 0,
      2, 1, 0, 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1152();
    exp_vals = [1, 1, 0, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //first time voting, voting yes, vote weight enabled
    console.log("94k");
    var presets = [
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 4, 40002, 0]/* account_vote_weights */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* votes */ = [1];
    var v3/* target_bounty_exchanges */ = [[3, 5]];
    var v4/* voter_weight_exchanges */ = [1005];
    var v5/* voter_weight_balances */ = [5005];
    await expect(e.f1153(v1/* targets */, 40002, v2/* votes */, v3/* target_bounty_exchanges */, v4/* voter_weight_exchanges */, v5/* voter_weight_balances */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 0, 5005, 0, 5005];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1152();
    exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //first time voting, voting yes, voter weight enabled, sender already voted
    console.log("94l");
    var presets = [
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 4, 40002, 78]/* account_vote_weights */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* votes */ = [1];
    var v3/* target_bounty_exchanges */ = [[3, 5]];
    var v4/* voter_weight_exchanges */ = [1005];
    var v5/* voter_weight_balances */ = [50051];
    await expect(e.f1153(v1/* targets */, 40002, v2/* votes */, v3/* target_bounty_exchanges */, v4/* voter_weight_exchanges */, v5/* voter_weight_balances */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 0, 78, 0, 78];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1152();
    exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //first time voting, voting yes, senders balance at 0
    console.log("94m");
    var presets = [
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 4, 40002, 0]/* account_vote_weights */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* votes */ = [1];
    var v3/* target_bounty_exchanges */ = [[3, 5]];
    var v4/* voter_weight_exchanges */ = [1005];
    var v5/* voter_weight_balances */ = [0];
    await expect(e.f1153(v1/* targets */, 40002, v2/* votes */, v3/* target_bounty_exchanges */, v4/* voter_weight_exchanges */, v5/* voter_weight_balances */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 0, 1, 0, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1152();
    exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);
  });







  /* execute_vote_proposal_checkers(): runs requires for each proposal and updates vote data */
  xit("95. can run f116", async () => {
    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //targeting 1 consensus object
    console.log("95a");
    var presets = [
      [2, 457778, 2, 40002, bgN(5, 18)],
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* votes */ = [1];
    var v3/* target_nums_data */ = [
      [[32], [0, bgN(5, 14), bgN(5, 14), 0/* 3 */, 0, 457778, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v4/* target_bounty_exchanges */ = [[3, 5]];
    // await e.f116(v1/* targets */, 40002, v2/* votes */, false, v3/* target_nums_data */, v4/* target_bounty_exchanges */)
    await expect(e.f116(v1/* targets */, 40002, v2/* votes */, false, v3/* target_nums_data */, v4/* target_bounty_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 18), 1, 0, 1, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1162();
    exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //invalid target
    console.log("95b");
    var presets = [
      [2, 457778, 2, 40002, bgN(5, 18)],
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var targets = [3];
    var v2/* votes */ = [1];
    var v3/* target_nums_data */ = [
      [[32], [0, bgN(5, 14), bgN(5, 14), 0/* 3 */, 0, 457778, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v4/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f116(targets, 40002, v2/* votes */, false, v3/* target_nums_data */, v4/* target_bounty_exchanges */)).to.be.reverted;
    await e.delete_preset_data(presets);


    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //invalid target type
    console.log("95c");
    var presets = [
      [2, 457778, 2, 40002, bgN(5, 18)],
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var targets = [34588];
    var v2/* votes */ = [1];
    var v3/* target_nums_data */ = [
      [[30], [0, bgN(5, 14), bgN(5, 14), 0/* 3 */, 0, 457778, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v4/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f116(targets, 40002, v2/* votes */, false, v3/* target_nums_data */, v4/* target_bounty_exchanges */)).to.be.reverted;

    await e.delete_preset_data(presets);


    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //consensus request has already expired
    console.log("95d");
    var presets = [
      [2, 457778, 2, 40002, bgN(5, 18)],
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var targets = [34588];
    var v2/* votes */ = [1];
    var v3/* target_nums_data */ = [
      [[32], [0, bgN(5, 2), bgN(5, 14), 0/* 3 */, 0, 457778, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v4/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f116(targets, 40002, v2/* votes */, false, v3/* target_nums_data */, v4/* target_bounty_exchanges */)).to.be.reverted;
    await e.delete_preset_data(presets);



    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //invalid vote
    console.log("95e");
    var presets = [
      [2, 457778, 2, 40002, bgN(5, 18)],
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var targets = [34588];
    var v2/* votes */ = [0];
    var v3/* target_nums_data */ = [
      [[32], [0, bgN(5, 14), bgN(5, 14), 0/* 3 */, 0, 457778, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v4/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f116(targets, 40002, v2/* votes */, false, v3/* target_nums_data */, v4/* target_bounty_exchanges */)).to.be.reverted;
    await e.delete_preset_data(presets);



    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //invalid vote
    console.log("95f");
    var presets = [
      [2, 457778, 2, 40002, bgN(5, 18)],
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var targets = [34588];
    var v2/* votes */ = [1000];
    var v3/* target_nums_data */ = [
      [[32], [0, bgN(5, 14), bgN(5, 14), 0/* 3 */, 0, 457778, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v4/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f116(targets, 40002, v2/* votes */, false, v3/* target_nums_data */, v4/* target_bounty_exchanges */)).to.be.reverted;
    await e.delete_preset_data(presets);


    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //consensus request expired by block number
    console.log("95g");
    var presets = [
      [2, 457778, 2, 40002, bgN(5, 18)],
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var targets = [34588];
    var v2/* votes */ = [1];
    var v3/* target_nums_data */ = [
      [[32], [0, bgN(5, 14), bgN(5, 2), 0/* 3 */, 0, 457778, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v4/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f116(targets, 40002, v2/* votes */, false, v3/* target_nums_data */, v4/* target_bounty_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 18), 1, 0, 1, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1162();
    exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //sender can't vote in main contract
    console.log("95h");
    var presets = [
      [2, 457778, 2, 40002, bgN(5, 18)],
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var targets = [34588];
    var v2/* votes */ = [1];
    var v3/* target_nums_data */ = [
      [[32], [0, bgN(5, 14), bgN(5, 14), 0/* 3 */, 0, 2, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v4/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f116(targets, 40002, v2/* votes */, false, v3/* target_nums_data */, v4/* target_bounty_exchanges */)).to.be.reverted;
    await e.delete_preset_data(presets);


    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //sender cannot vote in proposal
    console.log("95i");
    var presets = [
      [2, 457778, 2, 40002, 2000],
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var targets = [34588];
    var v2/* votes */ = [1];
    var v3/* target_nums_data */ = [
      [[32], [0, bgN(5, 14), bgN(5, 14), 0/* 3 */, 0, 457778, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v4/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f116(targets, 40002, v2/* votes */, false, v3/* target_nums_data */, v4/* target_bounty_exchanges */)).to.be.reverted;
    await e.delete_preset_data(presets);





    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //sender can vote in main contract
    console.log("95j");
    var presets = [
      [2, 457778, 2, 40002, bgN(5, 18)],
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var targets = [34588];
    var v2/* votes */ = [1];
    var v3/* target_nums_data */ = [
      [[32], [0, bgN(5, 14), bgN(5, 14), 0/* 3 */, 0, 2, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v4/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f116(targets, 40002, v2/* votes */, true, v3/* target_nums_data */, v4/* target_bounty_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 18), 1, 0, 1, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1162();
    exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);


    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //proposal_expiry_block ignored
    console.log("95k");
    var presets = [
      [2, 457778, 2, 40002, bgN(5, 18)],
      [2, 34588, 3, 40002, 0],
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 7, 0]/* auto_waits_set */
    ];
    await e.set_preset_data(presets);

    var targets = [34588];
    var v2/* votes */ = [1];
    var v3/* target_nums_data */ = [
      [[32], [0, bgN(5, 14), 0, 0/* 3 */, 0, 457778, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v4/* target_bounty_exchanges */ = [[3, 5]];
    await expect(e.f116(targets, 40002, v2/* votes */, false, v3/* target_nums_data */, v4/* target_bounty_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 18), 1, 0, 1, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1162();
    exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);





    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //targeting 1 consensus object, voter weight enabled
    console.log("95l");
    var presets = [
      [2, 457778, 2, 40002, bgN(5, 18)],
      [2, 34588, 3, 40002, 0],/* account_vote */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 4, 40002, 0]/* account_vote_weights */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* votes */ = [1];
    var v3/* target_nums_data */ = [
      [[32], [0, bgN(5, 14), bgN(5, 14), 0/* 3 */, 0, 457778, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v4/* target_bounty_exchanges */ = [[3, 5]];
    var v5/* voter_weight_exchanges */ = [100023];
    var v6/* voter_weight_balances */ = [100];
    await expect(e.f1163(v1/* targets */, 40002, v2/* votes */, false, v3/* target_nums_data */, v4/* target_bounty_exchanges */, v5/* voter_weight_exchanges */, v6/* voter_weight_balances */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 18), 1,  0, 100, 0,  100];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1162();
    exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);





    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //targeting 1 consensus object, voter weight enabled, account vote weight recorded
    console.log("95m");
    var presets = [
      [2, 457778, 2, 40002, bgN(5, 18)],
      [2, 34588, 3, 40002, 0],/* account_vote */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 4, 40002, 51]/* account_vote_weights */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* votes */ = [1];
    var v3/* target_nums_data */ = [
      [[32], [0, bgN(5, 14), bgN(5, 14), 0/* 3 */, 0, 457778, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v4/* target_bounty_exchanges */ = [[3, 5]];
    var v5/* voter_weight_exchanges */ = [100023];
    var v6/* voter_weight_balances */ = [1000];
    await expect(e.f1163(v1/* targets */, 40002, v2/* votes */, false, v3/* target_nums_data */, v4/* target_bounty_exchanges */, v5/* voter_weight_exchanges */, v6/* voter_weight_balances */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 18), 1,  0, 51, 0,  51];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1162();
    exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);





    /* 1: vote yes , 2: vote wait , 3: vote_no */
    //targeting 1 consensus object, voter weight enabled, balance of sender is 0
    console.log("95n");
    var presets = [
      [2, 457778, 2, 40002, bgN(5, 18)],
      [2, 34588, 3, 40002, 0],/* account_vote */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 4, 40002, 0]/* account_vote_weights */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* votes */ = [1];
    var v3/* target_nums_data */ = [
      [[32], [0, bgN(5, 14), bgN(5, 14), 0/* 3 */, 0, 457778, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v4/* target_bounty_exchanges */ = [[3, 5]];
    var v5/* voter_weight_exchanges */ = [100023];
    var v6/* voter_weight_balances */ = [0];
    await expect(e.f1163(v1/* targets */, 40002, v2/* votes */, false, v3/* target_nums_data */, v4/* target_bounty_exchanges */, v5/* voter_weight_exchanges */, v6/* voter_weight_balances */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 18), 1,  0, 1, 0,  1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1162();
    exp_vals = [1, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);
  });

  /* run_all_consensus_checkers(): runs requires for each proposal being submitted */
  xit("96. can run f117", async () => {
    //targeting 1 consensus object
    console.log("96a");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 1, 0, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1172();
    exp_vals = [  2, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //targeting 3 consensus object
    console.log("96b");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 6, 0],/* consumed */

      [2, 559493, 1, 1, 0],/* target_payer_for_buy */
      [2, 559493, 1, 2, 0],/* wait */[2, 559493, 1, 3, 1],/* yes */[2, 559493, 1, 4, 0],/* no */
      [2, 559493, 1, 6, 0],/* consumed */

      [2, 292910, 1, 1, 0],/* target_payer_for_buy */
      [2, 292910, 1, 2, 0],/* wait */[2, 292910, 1, 3, 1],/* yes */[2, 292910, 1, 4, 0],/* no */
      [2, 292910, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588, 559493, 292910];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]],
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3], [3000]],
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5, 4000], [3, 5, 4003]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      0, 0, 1, 0, 1,
      0, 0, 1, 0, 1,
      0, 0, 1, 0, 1
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1172();
    exp_vals = [6, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //targeting 3 consensus object, 1 is type buy
    console.log("96c");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 6, 0],/* consumed */

      [2, 559493, 1, 1, 400022],/* target_payer_for_buy */
      [2, 559493, 1, 2, 0],/* wait */[2, 559493, 1, 3, 1],/* yes */[2, 559493, 1, 4, 0],/* no */
      [2, 559493, 1, 6, 0],/* consumed */

      [2, 292910, 1, 1, 0],/* target_payer_for_buy */
      [2, 292910, 1, 2, 0],/* wait */[2, 292910, 1, 3, 1],/* yes */[2, 292910, 1, 4, 0],/* no */
      [2, 292910, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588, 559493, 292910];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]],
      [[32], [1, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3], [3000]],
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5, 4000], [3, 5, 4003]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      0, 0, 1, 0, 1,
      400022, 0, 1, 0, 1,
      0, 0, 1, 0, 1
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1172();
    exp_vals = [  5, 1, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //targeting 1 consensus object
    //invalid target
    console.log("96d");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [2];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 consensus object
    //invalid target object type
    console.log("96e");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_nums_data */ = [
      [[30], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.be.reverted;
    await e.delete_preset_data(presets);


    //targeting 1 consensus object
    //already consumed
    console.log("96f");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 6, 1]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.be.reverted;
    await e.delete_preset_data(presets);


    //targeting 1 consensus object
    //no unanimous yes
    console.log("96g");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 0],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 consensus object
    //one vote no
    console.log("96h");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 1],/* no */
      [2, 34588, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 consensus object
    //ten vote waits
    console.log("96i");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 10],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 consensus object
    //proposal hasn't expired yet
    console.log("96j");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_nums_data */ = [
      [[32], [0, bgN(4, 18), 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 consensus object
    //submit expiry time alredy passed
    console.log("96k");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, 1, bgN(5, 2)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 consensus object
    //expiry block already passed
    console.log("96l");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, bgN(5, 14), bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 2 consensus objects, one repeated
    console.log("96m");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 6, 0],/* consumed */

      [2, 559493, 1, 1, 0],/* target_payer_for_buy */
      [2, 559493, 1, 2, 0],/* wait */[2, 559493, 1, 3, 1],/* yes */[2, 559493, 1, 4, 0],/* no */
      [2, 559493, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588, 559493, 34588];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]],
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3], [3000]],
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5, 4000], [3, 5, 4003]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 consensus object, majority consensus at 100%, target 90%
    console.log("96n");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, bgN(90, 16)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 1, 0, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1172();
    exp_vals = [  2, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //targeting 1 consensus object, majority consensus at 57%, target at 50%
    console.log("96o");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 4],/* yes */[2, 34588, 1, 4, 3],/* no */
      [2, 34588, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, bgN(50, 16)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 4, 3, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1172();
    exp_vals = [2, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //targeting 1 consensus object, majority consensus at 57%, target 80%
    console.log("96p");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 4],/* yes */[2, 34588, 1, 4, 3],/* no */
      [2, 34588, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, bgN(80, 16)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 consensus object, majority consensus at 50%, target 51%
    console.log("96p");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 1],/* wait */[2, 34588, 1, 3, 4],/* yes */[2, 34588, 1, 4, 3],/* no */
      [2, 34588, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_nums_data */ = [
      [[32], [0, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, bgN(51, 16)/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.be.reverted;
    await e.delete_preset_data(presets);





    //targeting 1 consensus object
    console.log("96q");
    var presets = [
      [2, 34588, 1, 1, 0],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 1, 6, 0]/* consumed */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_nums_data */ = [
      [[32], [9, 1000, 1, bgN(5, 18)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */], [], [], [3, 5], [3, 5]]
    ];
    await expect(e.f117(v1/* targets */, v2/* target_nums_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 1, 0, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1172();
    exp_vals = [   0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1173();
    exp_vals = [true, false, false];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);
  });

  /* archive_data(): deletes voter data and consensus data set in contract and proposal objects */
  xit("97. can run f118", async () => {
    //targeting 1 consensus object
    console.log("97a");
    var presets = [
      [2, 34588, 3, 4455004, 3],/* account vote */[2, 34588, 1, 1, 4455004],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0]/* no */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_data */ = [
      [[32], [0, 1000, 1, bgN(5, 3)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v3/* accounts_exchanges */ = [
      [[4455004]],/* accounts */
      [[3, 5]],/* exchanges */
      [[0,0]]/* depths */
    ];
    await expect(e.f118(v1/* targets */, v2/* target_data */, v3/* accounts_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    expect(await e.f1182()).to.equal(true);
    await e.delete_preset_data(presets);




    //targeting 1 contract object
    console.log("97b");
    var presets = [
      [2, 34588, 2, 4455004, 1],/* participant_account */
      [2, 34588, 1, 1, 300]/* voter_count */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_data */ = [
      [[30], [0, 1000, 1, bgN(5, 3)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 5000, 0/* 16 */]]
    ];
    var v3/* accounts_exchanges */ = [
      [[4455004]],/* accounts */
      [[3, 5]],/* exchanges */
      [[0,0]]/* depths */
    ];
    await expect(e.f118(v1/* targets */, v2/* target_data */, v3/* accounts_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    expect(await e.f1182()).to.equal(true);
    await e.delete_preset_data(presets);




    //targeting 1 contract object, no balance exchanges
    console.log("97c");
    var presets = [
      [2, 34588, 2, 4455004, 1],/* participant_account */
      [2, 34588, 1, 1, 300]/* voter_count */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_data */ = [
      [[30], [0, 1000, 1, bgN(5, 3)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 5000, 0/* 16 */]]
    ];
    var v3/* accounts_exchanges */ = [
      [[4455004]],/* accounts */
      [[]],/* exchanges */
      [[]]/* depths */
    ];
    await expect(e.f118(v1/* targets */, v2/* target_data */, v3/* accounts_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    expect(await e.f1182()).to.equal(false);
    await e.delete_preset_data(presets);



    //targeting 1 consensus object
    //invalid target id
    console.log("97d");
    var presets = [
      [2, 34588, 3, 4455004, 3],/* account vote */[2, 34588, 1, 1, 4455004],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0]/* no */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34];
    var v2/* target_data */ = [
      [[32], [0, 1000, 1, bgN(5, 3)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v3/* accounts_exchanges */ = [
      [[4455004]],/* accounts */
      [[3, 5]],/* exchanges */
      [[0,0]]/* depths */
    ];
    await expect(e.f118(v1/* targets */, v2/* target_data */, v3/* accounts_exchanges */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 consensus object
    //invalid target type
    console.log("97e");
    var presets = [
      [2, 34588, 3, 4455004, 3],/* account vote */[2, 34588, 1, 1, 4455004],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0]/* no */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_data */ = [
      [[27], [0, 1000, 1, bgN(5, 3)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v3/* accounts_exchanges */ = [
      [[4455004]],/* accounts */
      [[3, 5]],/* exchanges */
      [[0,0]]/* depths */
    ];
    await expect(e.f118(v1/* targets */, v2/* target_data */, v3/* accounts_exchanges */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 consensus object
    //consensus has not expired yet
    console.log("97f");
    var presets = [
      [2, 34588, 3, 4455004, 3],/* account vote */[2, 34588, 1, 1, 4455004],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0]/* no */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_data */ = [
      [[32], [0, 1000, 1, bgN(5, 23)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v3/* accounts_exchanges */ = [
      [[4455004]],/* accounts */
      [[3, 5]],/* exchanges */
      [[0,0]]/* depths */
    ];
    await expect(e.f118(v1/* targets */, v2/* target_data */, v3/* accounts_exchanges */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 contract object
    //invalid contract expiry time
    console.log("97g");
    var presets = [
      [2, 34588, 2, 4455004, 1],/* participant_account */
      [2, 34588, 1, 1, 300]/* voter_count */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_data */ = [
      [[30], [0, 1000, 1, bgN(5, 3)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, bgN(5, 20), 0/* 16 */]]
    ];
    var v3/* accounts_exchanges */ = [
      [[4455004]],/* accounts */
      [[3, 5]],/* exchanges */
      [[0,0]]/* depths */
    ];
    await expect(e.f118(v1/* targets */, v2/* target_data */, v3/* accounts_exchanges */)).to.be.reverted;
    await e.delete_preset_data(presets);




    //targeting 1 contract object
    //invalid contract expiry time
    console.log("97h");
    var presets = [
      [2, 34588, 2, 4455004, 1],/* participant_account */
      [2, 34588, 1, 1, 300]/* voter_count */
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_data */ = [
      [[30], [0, 1000, 1, bgN(5, 3)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v3/* accounts_exchanges */ = [
      [[4455004]],/* accounts */
      [[3, 5]],/* exchanges */
      [[0,0]]/* depths */
    ];
    await expect(e.f118(v1/* targets */, v2/* target_data */, v3/* accounts_exchanges */)).to.be.reverted;
    await e.delete_preset_data(presets);




    //targeting 1 consensus object, voter weight recorded
    console.log("97i");
    var presets = [
      [2, 34588, 3, 4455004, 3],/* account vote */[2, 34588, 1, 1, 4455004],/* target_payer_for_buy */
      [2, 34588, 1, 2, 0],/* wait */[2, 34588, 1, 3, 1],/* yes */[2, 34588, 1, 4, 0],/* no */
      [2, 34588, 4, 4455004, 71]
    ];
    await e.set_preset_data(presets);

    var v1/* targets */ = [34588];
    var v2/* target_data */ = [
      [[32], [0, 1000, 1, bgN(5, 3)/* 3 */, 0, 0, 0/* 6 */, 0, 0/* 8 */, 0, 0, 0, 12, 0, 0, 0, 0/* 16 */]]
    ];
    var v3/* accounts_exchanges */ = [
      [[4455004]],/* accounts */
      [[3, 5]],/* exchanges */
      [[0,0]]/* depths */
    ];
    await expect(e.f118(v1/* targets */, v2/* target_data */, v3/* accounts_exchanges */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    expect(await e.f1182()).to.equal(true);
    await e.delete_preset_data(presets);
  });






  /* record_voter_work(): records voter data for new proposal object */
  xit("98. can run f119", async () => {
    //targeting 1 consensus object
    console.log("98a");
    var presets = [
      [2, 34588, 2, 40002, bgN(5, 13)],/* participant_accounts */
      [2, 34588, 1, 1, 3],/* voter_count */
      [2, 392019, 1, 2, 0],/* vote_wait */
      [2, 392019, 1, 7, 0],/* auto_waits_set */
      [2, 392019, 1, 1, 0]/* target_payer_for_buy */
    ];
    await e.set_preset_data(presets);
    await expect(e.f119(34588, 40002, false, 392019, 0, 0)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 13), 3, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //targeting main contract object
    console.log("98b");
    var presets = [
      [2, 34588, 2, 40002, 0],/* participant_account_expiry_time */
      [2, 34588, 1, 1, 0],/* voter_count */
      [2, 392019, 1, 2, 0],/* vote_wait */
      [2, 392019, 1, 7, 0],/* auto_waits_set */
      [2, 392019, 1, 1, 0]/* target_payer_for_buy */
    ];
    await e.set_preset_data(presets);
    await expect(e.f119(2, 40002, false, 392019, 0, 0)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);


    //targeting 1 consensus object, auto wait on
    console.log("98c");
    var presets = [
      [2, 34588, 2, 40002, bgN(5, 13)],/* participant_accounts */
      [2, 34588, 1, 1, 5],/* voter_count */
      [2, 392019, 1, 2, 0],/* vote_wait */
      [2, 392019, 1, 7, 0],/* auto_waits_set */
      [2, 392019, 1, 1, 0]/* target_payer_for_buy */
    ];
    await e.set_preset_data(presets);
    await expect(e.f119(34588, 40002, false, 392019, 5, 0)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 13), 5, 5, 5, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //targeting 1 consensus object
    console.log("98d");
    var presets = [
      [2, 34588, 2, 40002, bgN(5, 13)],/* participant_accounts */
      [2, 34588, 1, 1, 3],/* voter_count */
      [2, 392019, 1, 2, 0],/* vote_wait */
      [2, 392019, 1, 7, 0],/* auto_waits_set */
      [2, 392019, 1, 1, 0]/* target_payer_for_buy */
    ];
    await e.set_preset_data(presets);
    await expect(e.f119(34588, 40002, true, 392019, 0, 0)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 13), 3, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //targeting 1 consensus object
    //sender is not part of contract
    console.log("98e");
    var presets = [
      [2, 34588, 2, 40002, 0],/* participant_accounts */
      [2, 34588, 1, 1, 3],/* voter_count */
      [2, 392019, 1, 2, 0],/* vote_wait */
      [2, 392019, 1, 7, 0],/* auto_waits_set */
      [2, 392019, 1, 1, 0]/* target_payer_for_buy */
    ];
    await e.set_preset_data(presets);
    await expect(e.f119(34588, 40002, false, 392019, 0, 0)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 consensus object
    //sender is no longer part of contract
    console.log("98f");
    var presets = [
      [2, 34588, 2, 40002, bgN(5, 3)],/* participant_accounts */
      [2, 34588, 1, 1, 3],/* voter_count */
      [2, 392019, 1, 2, 0],/* vote_wait */
      [2, 392019, 1, 7, 0],/* auto_waits_set */
      [2, 392019, 1, 1, 0]/* target_payer_for_buy */
    ];
    await e.set_preset_data(presets);
    await expect(e.f119(34588, 40002, false, 392019, 0, 0)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 consensus object
    console.log("98g");
    var presets = [
      [2, 34588, 2, 40002, 0],/* participant_accounts */
      [2, 34588, 1, 1, 3],/* voter_count */
      [2, 392019, 1, 2, 0],/* vote_wait */
      [2, 392019, 1, 7, 0],/* auto_waits_set */
      [2, 392019, 1, 1, 0]/* target_payer_for_buy */
    ];
    await e.set_preset_data(presets);
    await expect(e.f119(34588, 40002, true, 392019, 0, 1)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 3, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);
  });

  /* H3.boot()/record_new_objects_data(): records boot exchange data for end and spend exchange while booting */
  xit("99. can run f120/f121", async () => {
    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add */
    console.log("99a");
    var presets = [
      [1, 3, 0, 0, 0],
      [1, 3, 1, 0, 0], [1, 3, 1, 1, 0], [1, 3, 1, 2, 0], [1, 3, 1, 5, 0],
      [1, 3, 2, 0, 0], [1, 3, 2, 1, 0], [1, 3, 2, 2, 0], [1, 3, 2, 5, 0],
      [1, 3, 3, 0, 0],
      [1, 3, 4, 0, 0],

      [3, 3, 1, 3, 0]
    ];
    var v1/* boot_data */ = [
      [[0], [16, 0, 500/* 2 */, 0, 0, 4499], [10, 0, 223/* 2 */, 0, 0, 7], [0], [0]]
    ];
    var v2/* boot_id_data_type_data */ = [[3, 31]];
    await e.set_preset_data(presets);
    await expect(e.f121(v1/* boot_data */, v2/* boot_id_data_type_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 16, 0, 500, 4499, 10, 0, 223, 7, 0, 0, 1];

    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //2 targets
    console.log("99b");
    var presets = [
      [1, 3, 0, 0, 0],
      [1, 3, 1, 0, 0], [1, 3, 1, 1, 0], [1, 3, 1, 2, 0], [1, 3, 1, 5, 0],
      [1, 3, 2, 0, 0], [1, 3, 2, 1, 0], [1, 3, 2, 2, 0], [1, 3, 2, 5, 0],
      [1, 3, 3, 0, 0],
      [1, 3, 4, 0, 0],

      [3, 3, 1, 3, 0],


      [1, 5, 0, 0, 0],
      [1, 5, 1, 0, 0], [1, 5, 1, 1, 0], [1, 5, 1, 2, 0], [1, 5, 1, 5, 0],
      [1, 5, 2, 0, 0], [1, 5, 2, 1, 0], [1, 5, 2, 2, 0], [1, 5, 2, 5, 0],
      [1, 5, 3, 0, 0],
      [1, 5, 4, 0, 0],

      [3, 5, 1, 3, 0]
    ];
    var v1/* boot_data */ = [
      [[0], [16, 0, 500/* 2 */, 0, 0, 4499], [10, 0, 223/* 2 */, 0, 0, 7], [0], [0]],
      [[0], [9, 0, 2455/* 2 */, 0, 0, 344], [4, 0, 222/* 2 */, 0, 0, 117], [0], [10000]]
    ];
    var v2/* boot_id_data_type_data */ = [[3, 31], [5, 31]];
    await e.set_preset_data(presets);
    await expect(e.f121(v1/* boot_data */, v2/* boot_id_data_type_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      0, 16, 0, 500, 4499, 10, 0, 223, 7, 0, 0, 1,
      0, 9, 0, 2455, 344, 4, 0, 222, 117, 0, 10000, 1
    ];

    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add   */
    //2 targets, one not exchange
    console.log("99c");
    var presets = [
      [1, 3, 0, 0, 0],
      [1, 3, 1, 0, 0], [1, 3, 1, 1, 0], [1, 3, 1, 2, 0], [1, 3, 1, 5, 0],
      [1, 3, 2, 0, 0], [1, 3, 2, 1, 0], [1, 3, 2, 2, 0], [1, 3, 2, 5, 0],
      [1, 3, 3, 0, 0],
      [1, 3, 4, 0, 0],

      [3, 3, 1, 3, 0],


      [1, 5, 0, 0, 0],
      [1, 5, 1, 0, 0], [1, 5, 1, 1, 0], [1, 5, 1, 2, 0], [1, 5, 1, 5, 0],
      [1, 5, 2, 0, 0], [1, 5, 2, 1, 0], [1, 5, 2, 2, 0], [1, 5, 2, 5, 0],
      [1, 5, 3, 0, 0],
      [1, 5, 4, 0, 0],

      [3, 5, 1, 3, 0]
    ];
    var v1/* boot_data */ = [
      [[0], [16, 0, 500/* 2 */, 0, 0, 4499], [10, 0, 223/* 2 */, 0, 0, 7], [0], [0]],
      [[0], [9, 0, 2455/* 2 */, 0, 0, 344], [4, 0, 222/* 2 */, 0, 0, 117], [0], [10000]]
    ];
    var v2/* boot_id_data_type_data */ = [[3, 31], [5, 30]];
    await e.set_preset_data(presets);
    await expect(e.f121(v1/* boot_data */, v2/* boot_id_data_type_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      0, 16, 0, 500, 4499, 10, 0, 223, 7, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ];

    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    /* 1:num , 2:int_int_int , 3:num_str_metas    ||    1: block.number , 2: block.timestamp    ||    3: less , 5: add */
    console.log("99d");
    var presets = [
      [1, 3, 0, 0, 0],
      [1, 3, 1, 0, 0], [1, 3, 1, 1, 0], [1, 3, 1, 2, 0], [1, 3, 1, 5, 0],
      [1, 3, 2, 0, 0], [1, 3, 2, 1, 0], [1, 3, 2, 2, 0], [1, 3, 2, 5, 0],
      [1, 3, 3, 0, 0], [1, 3, 3, 1, 0],
      [1, 3, 4, 0, 0], [1, 3, 4, 1, 0],

      [3, 3, 1, 3, 0]
    ];
    var v1/* boot_data */ = [
      [[0], [16, 0, 500/* 2 */, 0, 0, 4499], [10, 0, 223/* 2 */, 0, 0, 7], [0, 4], [0, 444]]
    ];
    var v2/* boot_id_data_type_data */ = [[3, 31]];
    await e.set_preset_data(presets);
    await expect(e.f121(v1/* boot_data */, v2/* boot_id_data_type_data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 16, 0, 500, 4499, 10, 0, 223, 7, 0, 4, 0, 444, 2];

    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);

  });

  /* modify_token_exchange(): modifies the data set in a token exchange's config array */
  xit("100. can run f122", async () => {
    //targeting 1 exchange
    console.log("100a");
    var presets = [
      [1, 34588, 0, 3, 3],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 9, 40002]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [1], [1], [900005], []];
    await expect(e.f122(v1/* data */, 40002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [3, 0, 900005, 0, 40002];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //targeting 3 exchanges
    console.log("100b");
    var presets = [
      [1, 34588, 0, 3, 3],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 9, 40002],

      [1, 45994, 0, 3, 5],
      [1, 45994, 1, 0, 0], [1, 45994, 1, 1, 0], [1, 45994, 1, 2, 0], [1, 45994, 1, 9, 40002],

      [1, 3022291, 0, 3, 3],
      [1, 3022291, 1, 0, 0], [1, 3022291, 1, 1, 0], [1, 3022291, 1, 2, 0], [1, 3022291, 1, 9, 40002]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 45994, 3022291], [1, 1, 1], [1, 1, 1], [900005, 44, 55], []];
    await expect(e.f122(v1/* data */, 40002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      3, 0, 900005, 0, 40002,
      5, 0, 44, 0, 40002,
      3, 0, 55, 0, 40002
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //targeting 2 exchanges
    console.log("100c");
    var presets = [
      [1, 34588, 0, 3, 3],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 9, 40002],

      [1, 45994, 0, 3, 5],
      [1, 45994, 1, 0, 0], [1, 45994, 1, 1, 0], [1, 45994, 1, 2, 0], [1, 45994, 1, 9, 40002],

      [1, 3022291, 0, 3, 3],
      [1, 3022291, 1, 0, 0], [1, 3022291, 1, 1, 0], [1, 3022291, 1, 2, 0], [1, 3022291, 1, 9, 40002]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 45994, 45994], [1, 1, 1], [1, 1, 2], [900005, 44, 55], []];
    await expect(e.f122(v1/* data */, 40002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      3, 0, 900005, 0, 40002,
      5, 0, 44, 55, 40002,
      3, 0, 0, 0, 40002
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //targeting 3 exchanges, senders in data array
    console.log("100d");
    var presets = [
      [1, 34588, 0, 3, 3],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 9, 40002],

      [1, 45994, 0, 3, 5],
      [1, 45994, 1, 0, 0], [1, 45994, 1, 1, 0], [1, 45994, 1, 2, 0], [1, 45994, 1, 9, 40002],

      [1, 3022291, 0, 3, 3],
      [1, 3022291, 1, 0, 0], [1, 3022291, 1, 1, 0], [1, 3022291, 1, 2, 0], [1, 3022291, 1, 9, 40002]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 45994, 3022291], [1, 1, 1], [1, 1, 1], [900005, 44, 55], [40002, 40002, 40002]];
    await expect(e.f122(v1/* data */, 330022)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      3, 0, 900005, 0, 40002,
      5, 0, 44, 0, 40002,
      3, 0, 55, 0, 40002
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //targeting 3 exchanges, 1 sender not authority
    console.log("100e");
    var presets = [
      [1, 34588, 0, 3, 3],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 9, 40002],

      [1, 45994, 0, 3, 5],
      [1, 45994, 1, 0, 0], [1, 45994, 1, 1, 0], [1, 45994, 1, 2, 0], [1, 45994, 1, 9, 400021],

      [1, 3022291, 0, 3, 3],
      [1, 3022291, 1, 0, 0], [1, 3022291, 1, 1, 0], [1, 3022291, 1, 2, 0], [1, 3022291, 1, 9, 40002]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 45994, 3022291], [1, 1, 1], [1, 1, 1], [900005, 44, 55], [40002, 40002, 40002]];
    await expect(e.f122(v1/* data */, 330022)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 3 exchanges, 1 not correct type
    console.log("100f");
    var presets = [
      [1, 34588, 0, 3, 3],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 9, 40002],

      [1, 45994, 0, 3, 0],
      [1, 45994, 1, 0, 0], [1, 45994, 1, 1, 0], [1, 45994, 1, 2, 0], [1, 45994, 1, 9, 40002],

      [1, 3022291, 0, 3, 3],
      [1, 3022291, 1, 0, 0], [1, 3022291, 1, 1, 0], [1, 3022291, 1, 2, 0], [1, 3022291, 1, 9, 40002]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 45994, 3022291], [1, 1, 1], [1, 1, 1], [900005, 44, 55], [40002, 40002, 40002]];
    await expect(e.f122(v1/* data */, 330022)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange, changing one exchange id
    console.log("100g");
    var presets = [
      [1, 34588, 0, 2, 1],[1, 34588, 0, 3, 3],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 404], [1, 34588, 1, 2, 0], [1, 34588, 1, 9, 40002],
      
      [1, 34588, 3, 0, 3],

      [3, 34588, 1, 3, 1]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [3], [0], [900005], []];
    await expect(e.f122(v1/* data */, 40002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 3,   0, 404, 0, 40002,   900005,  1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //targeting 1 exchange, adding one exchange id
    console.log("100h");
    var presets = [
      [1, 34588, 0, 2, 1],[1, 34588, 0, 3, 3],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 404], [1, 34588, 1, 2, 0], [1, 34588, 1, 9, 40002],
      
      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 0],

      [3, 34588, 1, 3, 1]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [3], [1], [900005], []];
    await expect(e.f122(v1/* data */, 40002)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 3,   0, 404, 0, 40002,   3, 900005,  2];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //targeting 1 exchange, adding one exchange id in an invalid position
    console.log("100i");
    var presets = [
      [1, 34588, 0, 3, 3],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 404], [1, 34588, 1, 2, 0], [1, 34588, 1, 9, 40002],
      
      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 0],

      [3, 34588, 1, 3, 1]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [3], [2], [900005], []];
    await expect(e.f122(v1/* data */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange, targeting an invalid array
    console.log("100j");
    var presets = [
      [1, 34588, 0, 3, 3],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 404], [1, 34588, 1, 2, 0], [1, 34588, 1, 9, 40002],
      
      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 0],

      [3, 34588, 1, 3, 1]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [0], [1], [900005], []];
    await expect(e.f122(v1/* data */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange, targeting an invalid array
    console.log("100k");
    var presets = [
      [1, 34588, 0, 3, 3],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 404], [1, 34588, 1, 2, 0], [1, 34588, 1, 9, 40002],
      
      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 0],

      [3, 34588, 1, 3, 1]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [6], [1], [900005], []];
    await expect(e.f122(v1/* data */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange, adding one exchange for non-fully-custom token
    console.log("100l");
    var presets = [
      [1, 34588, 0, 2, 0],[1, 34588, 0, 3, 3],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 404], [1, 34588, 1, 2, 0], [1, 34588, 1, 9, 40002],
      
      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 0],

      [3, 34588, 1, 3, 1]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [3], [1], [900005], []];
    await expect(e.f122(v1/* data */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);

  });






  /* run_exchange_checkers(): ensures exchange action data sent by sender is valid */
  xit("101. can run f123", async () => {
    //targeting 1 exchange
    //target buy, all requires pass
    console.log("101a");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 1], [1, 34588, 1, 18, 2],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 3, 4];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [3, 10000, 10000, 0, 0, 0, 0, 1, 2, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //target sell, all requires pass
    console.log("101b");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[1], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [3, 10000, 10000, 0, 0, 0, 0, 0, 0, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //targeting 1 exchange, auth-mint action
    console.log("101c");
    var presets = [
      [1, 34588, 0, 3, 5],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0], [1, 34588, 1, 9, 40002],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 14, bgN(10, 16)], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],
      [1, 34588, 2, 2, 100000],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, true, presets)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [5, 10000, 10000, 0, 0, 0, 40002, 0, bgN(10, 16), 0, 0, 100000, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //invalid action type
    console.log("101d");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[3/* bad! */], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //invalid amount set
    console.log("101e");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[0], [34588], [0/* bad! */], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //invalid exchange id passed, since source tokens don't exist
    console.log("101f");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 0/* bad! */],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //sender doesn't meet minimum transactions for first buy
    console.log("101g");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 1/* required */], [1, 34588, 1, 18, 0],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0/* bad! */, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //sender doesn't meet minimum entered contracts for first buy
    console.log("101h");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 2/* required */],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 0/* bad! */];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //sender in v1/* data */ object
    console.log("101i");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 1], [1, 34588, 1, 18, 2],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[0], [34588], [100], [], [40002/* here! */], [34588]];
    var v2/* metas */ = [402, 0, 3, 4];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [3, 10000, 10000, 0, 0, 0, 0, 1, 2, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //targeting 1 exchange
    //sender is attempting to swap more than once in current block
    console.log("101j");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0, 1/* this_block */],/* bad! */
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //invalid last swap block
    console.log("101k");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 5/* limit */], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0, 1, 3, 3/* 3 blocks ago */],/* bad! */
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //invalid last swap time
    console.log("101l");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 10000/* limit */],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0, 2, 3, 100/* 100 secs ago */]/* bad! */
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.be.reverted;
    await e.delete_preset_data(presets);




    //targeting 1 exchange
    //invalid last transaction number
    console.log("101m");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 4/* limit */], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 2, 1]/* current */
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 2/* bad! */, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //invalid last entered contracts number
    console.log("101n");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 5/* limit */], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 3, 2]/* current */
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 3/* bad! */];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.be.reverted;
    await e.delete_preset_data(presets);




    //targeting 1 exchange
    //buy amount exceeds minimum amount
    console.log("101o");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10/* buy_limit */], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[0], [34588], [100/* bad! */], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.be.reverted;
    await e.delete_preset_data(presets);




    //targeting 1 exchange
    //sell amount exceeds minimum amount
    console.log("101p");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 4/* limit */],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[1], [34588], [100/* bad! */], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.be.reverted;
    await e.delete_preset_data(presets);





    //targeting 1 exchange, authmint action
    //invalid exchange authority
    console.log("101q");
    var presets = [
      [1, 34588, 0, 3, 5],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0], [1, 34588, 1, 9, 393902/* auth */],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 14, bgN(10, 16)], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],
      [1, 34588, 2, 2, 100000],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002/* bad! */, 0, 0, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, true, presets)).to.be.reverted;
    await e.delete_preset_data(presets);




    //targeting 1 exchange, authmint action
    //invalid exchange type
    console.log("101r");
    var presets = [
      [1, 34588, 0, 3, 3/* bad! */],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0], [1, 34588, 1, 9, 40002],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 14, bgN(10, 16)], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],
      [1, 34588, 2, 2, 100000],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, true, presets)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange, authmint action
    //invalid authmint amount
    console.log("101s");
    var presets = [
      [1, 34588, 0, 3, 5],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0], [1, 34588, 1, 9, 40002],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 14, bgN(10, 16)], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],
      [1, 34588, 2, 2, 1000/* current_minted_supply */],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[0], [34588], [100000/* bad! */], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 0];
     expect(e.f123(v1/* data */, v2/* metas */, true, presets)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange, authmint action
    //invalid action type
    console.log("101t");
    var presets = [
      [1, 34588, 0, 3, 5],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0], [1, 34588, 1, 9, 40002],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 14, bgN(10, 16)], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],
      [1, 34588, 2, 2, 100000],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[1/* bad! */], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, true, presets)).to.be.reverted;
    await e.delete_preset_data(presets);




    //targeting 1 exchange
    //ensure block number is recorded
    console.log("101u");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 1], [1, 34588, 1, 18, 2],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 0, 0],
      [2, 34588, 40002, 1, 0]
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 3, 4];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [3, 10000, 10000, 0, 0, 0, 0, 1, 2, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    var b_num = await e.f1232();
    expect(await val[14]).to.equal(b_num);

    await e.delete_preset_data(presets);


    //targeting 1 exchange
    //record last transaction number
    console.log("101v");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 4], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 0], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 2, 1]
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 8, 0];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [3, 10000, 10000, 4, 0, 0, 0, 0, 0, 3, 5, 5000, 3000, 2, 8];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);




    //targeting 1 exchange
    //sender meets minimum entered contracts for first buy
    console.log("101w");
    var presets = [
      [1, 34588, 0, 3, 3],

      [1, 34588, 1, 0, 10000], [1, 34588, 1, 11, 10000],
      [1, 34588, 1, 2, 0], [1, 34588, 1, 3, 0], [1, 34588, 1, 4, 0],
      [1, 34588, 1, 13, 3], [1, 34588, 1, 17, 0], [1, 34588, 1, 18, 0],

      [1, 34588, 3, 0, 3], [1, 34588, 3, 1, 5],
      [1, 34588, 4, 0, 5000], [1, 34588, 4, 1, 3000],

      [3, 34588, 1, 3, 2],

      [2, 34588, 40002, 3, 2]
    ];
    var v1/* data */ = [[0], [34588], [100], [], [], [34588]];
    var v2/* metas */ = [40002, 0, 0, 6];
    await expect(e.f123(v1/* data */, v2/* metas */, false, presets)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [3, 10000, 10000, 0, 0, 0, 3, 0, 0, 3, 5, 5000, 3000, 2, 6];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);

  });

  /* update_reduction_proportion_ratios(): sets updated reduction proportion ratios for each valid exchange passed */
  xit("102. can run f124", async () => {
    //targeting 1 exchange
    console.log("102a");
    var presets = [
      [1, 34588, 2, 6, 0],
      [1, 34588, 0, 3, 5], [1, 34588, 1, 1, 1]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0], [34588], [0], [0], [0]];
    var v2/* exchange_nums */ = [
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]]
    ];
    var v3/* new_ratios */ = [bgN(5, 16)];
    await expect(e.f124(v1/* data */, v2/* exchange_nums */, v3/* new_ratios */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 16), 5, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1242();
    exp_vals = [0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, bgN(5, 16), 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    //targeting the same exchange twice
    console.log("102b");
    var presets = [
      [1, 34588, 2, 6, 0],
      [1, 34588, 0, 3, 5], [1, 34588, 1, 1, 1]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0, 0], [34588, 34588], [0, 0], [0, 0], [0, 0]];
    var v2/* exchange_nums */ = [
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]],
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]]
    ];
    var v3/* new_ratios */ = [bgN(5, 16), bgN(7, 16)];
    await expect(e.f124(v1/* data */, v2/* exchange_nums */, v3/* new_ratios */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(7, 16), 5, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1242();
    exp_vals = [
      0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, bgN(5, 16), 0, 0,
      0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, bgN(7, 16), 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    //targeting three exchanges
    console.log("102c");
    var presets = [
      [1, 34588, 2, 6, 0],
      [1, 34588, 0, 3, 5], [1, 34588, 1, 1, 1],

      [1, 389920, 2, 6, 0],
      [1, 389920, 0, 3, 5], [1, 389920, 1, 1, 1],

      [1, 2920191, 2, 6, 0],
      [1, 2920191, 0, 3, 5], [1, 2920191, 1, 1, 1]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0, 0, 0], [34588, 389920, 2920191], [0, 0, 0], [0, 0, 0], [0, 0, 0]];
    var v2/* exchange_nums */ = [
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]],
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]],
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]]
    ];
    var v3/* new_ratios */ = [bgN(5, 16), bgN(7, 16), bgN(43, 16)];
    await expect(e.f124(v1/* data */, v2/* exchange_nums */, v3/* new_ratios */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 16), 5, 1, bgN(7, 16), 5, 1, bgN(43, 16), 5, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1242();
    exp_vals = [
      0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, bgN(5, 16), 0, 0,
      0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, bgN(7, 16), 0, 0,
      0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, bgN(43, 16), 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    //targeting three exchanges, 1 sell
    console.log("102d");
    var presets = [
      [1, 34588, 2, 6, 0],
      [1, 34588, 0, 3, 5], [1, 34588, 1, 1, 1],

      [1, 389920, 2, 6, 0],
      [1, 389920, 0, 3, 5], [1, 389920, 1, 1, 1],

      [1, 2920191, 2, 6, 0],
      [1, 2920191, 0, 3, 5], [1, 2920191, 1, 1, 1]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0, 1, 0], [34588, 389920, 2920191], [0, 0, 0], [0, 0, 0], [0, 0, 0]];
    var v2/* exchange_nums */ = [
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]],
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]],
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]]
    ];
    var v3/* new_ratios */ = [bgN(5, 16), bgN(7, 16), bgN(43, 16)];
    await expect(e.f124(v1/* data */, v2/* exchange_nums */, v3/* new_ratios */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 16), 5, 1, 0, 5, 1, bgN(43, 16), 5, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1242();
    exp_vals = [
      0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, bgN(5, 16), 0, 0,
      0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, 0, 0, 0,
      0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, bgN(43, 16), 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    //targeting three exchanges
    console.log("102e");
    var presets = [
      [1, 34588, 2, 6, 0],
      [1, 34588, 0, 3, 5], [1, 34588, 1, 1, 1],

      [1, 389920, 2, 6, 0],
      [1, 389920, 0, 3, 5], [1, 389920, 1, 1, 1],

      [1, 2920191, 2, 6, 0],
      [1, 2920191, 0, 3, 3], [1, 2920191, 1, 1, 1]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0, 0, 0], [34588, 389920, 2920191], [0, 0, 0], [0, 0, 0], [0, 0, 0]];
    var v2/* exchange_nums */ = [
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]],
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]],
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]]
    ];
    var v3/* new_ratios */ = [bgN(5, 16), bgN(7, 16), bgN(43, 16)];
    await expect(e.f124(v1/* data */, v2/* exchange_nums */, v3/* new_ratios */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(5, 16), 5, 1, bgN(7, 16), 5, 1, 0, 3, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1242();
    exp_vals = [
      0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, bgN(5, 16), 0, 0,
      0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, bgN(7, 16), 0, 0,
      0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, 0, 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    //targeting three exchanges, 1 block_limit value is 0
    console.log("102f");
    var presets = [
      [1, 34588, 2, 6, 0],
      [1, 34588, 0, 3, 5], [1, 34588, 1, 1, 0],

      [1, 389920, 2, 6, 0],
      [1, 389920, 0, 3, 5], [1, 389920, 1, 1, 1],

      [1, 2920191, 2, 6, 0],
      [1, 2920191, 0, 3, 5], [1, 2920191, 1, 1, 1]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0, 0, 0], [34588, 389920, 2920191], [0, 0, 0], [0, 0, 0], [0, 0, 0]];
    var v2/* exchange_nums */ = [
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]],
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]],
      [[0], [0], [0, 0, 0, 0, 0, 0, 0/* active_block_limit_reduction_proportion */], [0], [0]]
    ];
    var v3/* new_ratios */ = [bgN(5, 16), bgN(7, 16), bgN(43, 16)];
    await expect(e.f124(v1/* data */, v2/* exchange_nums */, v3/* new_ratios */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 5, 0, bgN(7, 16), 5, 1, bgN(43, 16), 5, 1];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    val = await e.f1242();
    exp_vals = [
      0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, 0, 0, 0,
      0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, bgN(7, 16), 0, 0,
      0, 0, 0/* 2 */, 0, 0, 0, 0/* 6 */, 0, bgN(43, 16), 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);
  });

  /* update_exchange_ratios(): updates an exchanges exchange_ratios, parent_token_balance and supply values */
  xit("103. can run f125", async () => {
    //targeting 1 exchange
    //action = buy , capped
    console.log("103a");
    var presets = [
      [1, 34588, 0, 3, 3],
      [1, 34588, 2, 0, 1000], [1, 34588, 2, 1, 1000], [1, 34588, 2, 2, 700], [1, 34588, 2, 3, 1000]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0], [34588], [100], [0], [0], [34588]];
    var v2/* tokens_to_receive */ = [200];
    await expect(e.f125(v1/* data */, v2/* tokens_to_receive */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [3, 800, 1100, 500, 1100];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //action = buy , uncapped
    console.log("103b");
    var presets = [
      [1, 34588, 0, 3, 5],
      [1, 34588, 2, 0, 1000], [1, 34588, 2, 1, 1000], [1, 34588, 2, 2, 700], [1, 34588, 2, 3, 1000]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0], [34588], [100], [0], [0], [34588]];
    var v2/* tokens_to_receive */ = [200];
    await expect(e.f125(v1/* data */, v2/* tokens_to_receive */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [5, 1000, 1000, 900, 1100];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //action = sell , capped
    console.log("103c");
    var presets = [
      [1, 34588, 0, 3, 3],
      [1, 34588, 2, 0, 1000], [1, 34588, 2, 1, 1000], [1, 34588, 2, 2, 700], [1, 34588, 2, 3, 1000]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[1], [34588], [100], [0], [0], [34588]];
    var v2/* tokens_to_receive */ = [200];
    await expect(e.f125(v1/* data */, v2/* tokens_to_receive */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [3, 1100, 800, 800, 800];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //action = sell , capped
    console.log("103d");
    var presets = [
      [1, 34588, 0, 3, 5],
      [1, 34588, 2, 0, 1000], [1, 34588, 2, 1, 1000], [1, 34588, 2, 2, 700], [1, 34588, 2, 3, 1000]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[1], [34588], [100], [0], [0], [34588]];
    var v2/* tokens_to_receive */ = [200];
    await expect(e.f125(v1/* data */, v2/* tokens_to_receive */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [5, 1000, 1000, 600, 800];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //action = sell , capped
    //attempting double mint
    console.log("103e");
    var presets = [
      [1, 34588, 0, 3, 5],
      [1, 34588, 2, 0, 1000], [1, 34588, 2, 1, 1000], [1, 34588, 2, 2, 700], [1, 34588, 2, 3, 1000]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[1, 1], [34588, 34588/* bad! */], [100, 1000], [0, 0], [0, 0], [34588, 34588]];
    var v2/* tokens_to_receive */ = [200, 4000];
     expect(e.f125(v1/* data */, v2/* tokens_to_receive */)).to.be.reverted;
    await e.delete_preset_data(presets);




    //action = sell/buy , capped/uncapped
    console.log("103f");
    var presets = [
      [1, 34588, 0, 3, 3],
      [1, 34588, 2, 0, 1000], [1, 34588, 2, 1, 1000], [1, 34588, 2, 2, 700], [1, 34588, 2, 3, 1000],

      [1, 77383, 0, 3, 5],
      [1, 77383, 2, 0, 1000], [1, 77383, 2, 1, 1000], [1, 77383, 2, 2, 700], [1, 77383, 2, 3, 1000]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[1, 0], [34588, 77383], [100, 250], [0, 0], [0, 0], [34588, 34588]];
    var v2/* tokens_to_receive */ = [200, 400];
    await expect(e.f125(v1/* data */, v2/* tokens_to_receive */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      3, 1100, 800, 800, 800,
      5, 1000, 1000, 1100, 1250
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //action = sell/buy , capped/uncapped
    console.log("103f");
    var presets = [
      [1, 34588, 0, 3, 3],
      [1, 34588, 2, 0, 1000], [1, 34588, 2, 1, 1000], [1, 34588, 2, 2, 700], [1, 34588, 2, 3, 1000],

      [1, 77383, 0, 3, 5],
      [1, 77383, 2, 0, 1000], [1, 77383, 2, 1, 1000], [1, 77383, 2, 2, 700], [1, 77383, 2, 3, 1000]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[1, 0, 1], [34588, 77383, 34588/* bad! */], [100, 250, 200], [0, 0, 0], [0, 0, 0], [34588, 77383, 34588]];
    var v2/* tokens_to_receive */ = [200, 400, 450];
     expect(e.f125(v1/* data */, v2/* tokens_to_receive */)).to.be.reverted;
    await e.delete_preset_data(presets);
  });






  /* link_exchanges(): links two token exchanges together */
  xit("104. can run f126", async () => {
    //targeting 1 exchange
    console.log("104a");
    var presets = [
      [2, 34588, 0, 5, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* target_id_data */ = [[34588], [449382], [0], [0], [0]];
    var v2/* data */ = [
      [/* new_parent_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [34588], [1000]]
      ], [/* target_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [3], [100]]
      ]
    ];
    await expect(e.f126(v1/* target_id_data */, 7, 40, v2/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [449382];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //invalid object type
    console.log("104b");
    var presets = [
      [2, 34588, 0, 5, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* target_id_data */ = [[34588], [449382], [0], [0], [0]];
    var v2/* data */ = [
      [/* new_parent_exchange_ids_data */
        [[0, 0, 0, 30], [0], [0], [34588], [1000]]
      ], [/* target_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [3], [100]]
      ]
    ];
    await expect(e.f126(v1/* target_id_data */, 7, 40, v2/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //invalid object type
    console.log("104c");
    var presets = [
      [2, 34588, 0, 5, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* target_id_data */ = [[34588], [34588], [0], [0], [0]];
    var v2/* data */ = [
      [/* new_parent_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [34588], [1000]]
      ], [/* target_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [3], [100]]
      ]
    ];
    await expect(e.f126(v1/* target_id_data */, 7, 40, v2/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //invalid entered conrtacts count
    console.log("104d");
    var presets = [
      [2, 34588, 0, 5, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* target_id_data */ = [[34588], [449382], [0], [0], [0]];
    var v2/* data */ = [
      [/* new_parent_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [34588], [1000]]
      ], [/* target_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [3], [100]]
      ]
    ];
    await expect(e.f126(v1/* target_id_data */, 2, 40, v2/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //invalid transaction count
    console.log("104e");
    var presets = [
      [2, 34588, 0, 5, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* target_id_data */ = [[34588], [449382], [0], [0], [0]];
    var v2/* data */ = [
      [/* new_parent_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [34588], [1000]]
      ], [/* target_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [3], [100]]
      ]
    ];
    await expect(e.f126(v1/* target_id_data */, 7, 25, v2/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //parent exchange already exists
    console.log("104f");
    var presets = [
      [2, 34588, 0, 5, 4000]
    ];
    await e.set_preset_data(presets);

    var v1/* target_id_data */ = [[34588], [449382], [0], [0], [0]];
    var v2/* data */ = [
      [/* new_parent_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [34588], [1000]]
      ], [/* target_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [3], [100]]
      ]
    ];
    await expect(e.f126(v1/* target_id_data */, 7, 40, v2/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);


    //targeting 1 exchange
    //invalid source tokens for buy length
    console.log("104g");
    var presets = [
      [2, 34588, 0, 5, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* target_id_data */ = [[34588], [449382], [0], [0], [0]];
    var v2/* data */ = [
      [/* new_parent_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [34588, 44, 5], [1000, 9, 9]]
      ], [/* target_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [3], [100]]
      ]
    ];
    await expect(e.f126(v1/* target_id_data */, 7, 40, v2/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //invalid source token for buy
    console.log("104h");
    var presets = [
      [2, 34588, 0, 5, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* target_id_data */ = [[34588], [449382], [0], [0], [0]];
    var v2/* data */ = [
      [/* new_parent_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [5], [1000]]
      ], [/* target_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [3], [100]]
      ]
    ];
    await expect(e.f126(v1/* target_id_data */, 7, 40, v2/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //targeting 1 exchange
    //invalid object type
    console.log("104i");
    var presets = [
      [2, 34588, 0, 5, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* target_id_data */ = [[34588], [449382], [0], [0], [0]];
    var v2/* data */ = [
      [/* new_parent_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [34588], [1000]]
      ], [/* target_exchange_ids_data */
        [[0, 0, 0, 5], [0], [0], [449382], [100]]
      ]
    ];
    await expect(e.f126(v1/* target_id_data */, 7, 40, v2/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);
  });

  /* execute_freeze_unfreeze_tokens(): transfers tokens from an account to its freeze account*/
  xit("105. can run f127", async () => {
    //freee 1 account
    console.log("105a");
    var presets = [
      [2, 34588, 1, 9000, 0, 1000],
      [2, 34588, 2, 9000, 0, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [100], [9000], [1], [], [0]];
    var v2/* num */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f127(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [900, 100];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);


    //freeze 3 accounts
    console.log("105b");
    var presets = [
      [2, 34588, 1, 9000, 0, 1000], [2, 34588, 2, 9000, 0, 0],
      [2, 75999, 1, 9000, 0, 1000], [2, 75999, 2, 9000, 0, 0],
      [2, 399201, 1, 9003, 0, 1000], [2, 399201, 2, 9003, 0, 0]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588, 75999, 399201], [100, 200, 350], [9000, 9000, 9003], [1, 1, 1], [], [0, 0, 0]];
    var v2/* num */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f127(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [900, 100, 800, 200, 650, 350];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //unfreeze 1 account
    console.log("105c");
    var presets = [
      [2, 34588, 1, 9000, 0, 1000], [2, 34588, 2, 9000, 0, 110]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [100], [9000], [0], [], [0]];
    var v2/* num */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f127(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1100, 10];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //unfreeze 3 accounts
    console.log("105d");
    var presets = [
      [2, 34588, 1, 9000, 0, 1000], [2, 34588, 2, 9000, 0, 1000],
      [2, 75999, 1, 9000, 0, 1000], [2, 75999, 2, 9000, 0, 2400],
      [2, 399201, 1, 9003, 0, 1000], [2, 399201, 2, 9003, 0, 600]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588, 75999, 399201], [100, 200, 350], [9000, 9000, 9003], [0, 0, 0], [], [0, 0, 0]];
    var v2/* num */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f127(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1100, 900, 1200, 2200, 1350, 250];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //unfreeze 3 accounts, freeze 1 account
    console.log("105e");
    var presets = [
      [2, 34588, 1, 9000, 0, 1000], [2, 34588, 2, 9000, 0, 1000],
      [2, 75999, 1, 9000, 0, 1000], [2, 75999, 2, 9000, 0, 2400],
      [2, 399201, 1, 9003, 0, 1000], [2, 399201, 2, 9003, 0, 600]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588, 75999, 399201], [100, 200, 350], [9000, 9000, 9003], [0, 1, 0], [], [0, 0, 0]];
    var v2/* num */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f127(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1100, 900, 800, 2600, 1350, 250];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //freee 1 account, amount exceeds set balance
    console.log("105f");
    var presets = [
      [2, 34588, 1, 9000, 0, 700],
      [2, 34588, 2, 9000, 0, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [1000], [9000], [1], [], [0]];
    var v2/* num */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f127(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 700];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //freeze 3 accounts, sender set in data array
    console.log("105g");
    var presets = [
      [2, 34588, 1, 9000, 0, 1000], [2, 34588, 2, 9000, 0, 0],
      [2, 75999, 1, 9000, 0, 1000], [2, 75999, 2, 9000, 0, 0],
      [2, 399201, 1, 9003, 0, 1000], [2, 399201, 2, 9003, 0, 0]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588, 75999, 399201], [100, 200, 350], [9000, 9000, 9003], [1, 1, 1], [40002, 40002, 40002], [0, 0, 0]];
    var v2/* num */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f127(v1/* data */, 402, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [900, 100, 800, 200, 650, 350];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //freee 1 account, sender not authority
    console.log("105h");
    var presets = [
      [2, 34588, 1, 9000, 0, 1000],
      [2, 34588, 2, 9000, 0, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [100], [9000], [1], [], [0]];
    var v2/* num */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 70002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f127(v1/* data */, 40002, v2/* num */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //freee 1 account, underflow attempt
    console.log("105i");
    var presets = [
      [2, 34588, 1, 9000, 0, 1000],
      [2, 34588, 2, 9000, 0, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [100], [9000], [0], [], [0]];
    var v2/* num */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f127(v1/* data */, 40002, v2/* num */)).to.be.reverted;
    await e.delete_preset_data(presets);
  });

  /* update_balances/update_balance(): updates accounts final balance for buy/sell action */
  xit("106. can run f128/f129", async () => {
    //action sell
    console.log("106a");
    var presets = [
      [2, 34588, 1, 40002, 0, 1001],
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[1], [34588], [100], [], [], []];
    var v2/* tokens_to_receive */ = [10];
    var v3/* exchanges */ = [
      [ 
        [0, 0, 0, 5],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  0,0,0,0,0, 0], [5], [1000] ],
      [ 
        [0, 0, 0, 5],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0,  0,0,0,0,0, 0], [5], [1000] ],
      [ 
        [0, 0, 0, 5],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0,  0,0,0,0,0, 0], [5], [1000] 
      ]
    ]
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchanges */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [901];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //action sell, 3 targets
    console.log("106b");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],
      [2, 829992, 1, 40002, 0, 1000],
      [2, 287838, 1, 40002, 0, 1000],

      // [3, 34588, 0, 1, bgN(1, 35), 0],/* time_limit */
      // [3, 829992, 0, 1, bgN(1, 35), 0],/* time_limit */
      // [3, 287838, 0, 1, bgN(1, 35), 0],/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[1, 1, 1], [34588, 829992, 287838], [100, 200, 400], [], [], []];
    var v2/* tokens_to_receive */ = [10, 20, 30];
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchanges */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [900, 800, 600];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //action buy
    console.log("106c");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],
      // [3, 34588, 0, 1, bgN(1, 35), 0],/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[0], [34588], [100], [40002], [], []];
    var v2/* tokens_to_receive */ = [1030];
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchanges */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [2030];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //action buy, 3 targets
    console.log("106d");
    var presets = [
      [2, 34588, 1, 40003, 0, 1000],
      [2, 829992, 1, 40003, 0, 1000],
      [2, 287838, 1, 40003, 0, 1000],

      // [3, 34588, 0, 1, bgN(1, 35), 0],/* time_limit */
      // [3, 829992, 0, 1, bgN(1, 35), 0],/* time_limit */
      // [3, 287838, 0, 1, bgN(1, 35), 0],/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[0, 0, 0], [34588, 829992, 287838], [100, 200, 400], [40003, 40003, 40003], [], []];
    var v2/* tokens_to_receive */ = [100, 200, 3030];
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40003, v3/* exchanges */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1100, 1200, 4030];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //action sell, double sell attempt
    console.log("106e");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000000]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[1, 1], [34588, 34588/* bad! */], [100, 1000], [40002, 40002], [], []];
    var v2/* tokens_to_receive */ = [10, 10];
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchanges */, false)).to.not.be.reverted;
    await e.delete_preset_data(presets);



    //action buy, <19>maximum_mint_token_supply set but not exceeded
    console.log("106h");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],
      // [3, 34588, 0, 1, bgN(1, 35), 0],/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[0], [34588], [100], [40002], [], []];
    var v2/* tokens_to_receive */ = [1030];
    var v3/* exchanges */ = [
      [ 
        [0, 0, 0, 5],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0, 100000000/* 19 */],
        [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0,  0,0,0,0,0, 0], [5], [1000] 
      ],
    ]
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchanges */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [2030];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //action buy, <19>maximum_mint_token_supply set and exceeded
    console.log("106i");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[0], [34588], [100], [40002], [], []];
    var v2/* tokens_to_receive */ = [1030];
    var v3/* exchanges */ = [
        [ 
          [0, 0, 0, 5],
          [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0, 1000/* 19 */],
          [1000, 10000, 1000, 0/* 3 */, 0, 1, bgN(100, 16), 0,  0,0,0,0,0, 0], [5], [1000] ],
    ]
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchanges */, false)).to.be.reverted;
    await e.delete_preset_data(presets);



    //action buy, <19>maximum_mint_token_supply set and exceeded but auth mint
    console.log("106i");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],
      // [3, 34588, 0, 1, bgN(1, 35), 0],/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[0], [34588], [100], [40002], [], []];
    var v2/* tokens_to_receive */ = [1030];
    var v3/* exchanges */ = [
        [ 
          [0, 0, 0, 5],
          [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0, 1000/* 19 */],
          [1000, 10000, 1000, 0/* 3 */, 0, 1, bgN(100, 16), 0,  0,0,0,0,0, 0], [5], [1000] ],
    ]
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchanges */, true)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [2030];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //action buy non-fungible token
    console.log("106j");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],
      [3, 34588, 0, 1, 0, 0],/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[0], [34588], [100], [40002], [], []];
    var v3/* exchanges */ = [
      [ 
        [0, 0, 0, 5],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  0,0,0,0/* 11 */,0, bgN(1, 35)], [5], [1000] 
      ],
    ]
    var v2/* tokens_to_receive */ = [1];
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchanges */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1001, bgN(1, 35)];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //action buy ordinary token
    console.log("106k");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],
      [3, 34588, 0, 1, 0, 0],/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[0], [34588], [100], [40002], [], []];
    var v3/* exchanges */ = [
      [ 
        [0, 0, 0, 5],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  0,0,0,0,0, 0], [5], [1000] 
      ],
    ]
    var v2/* tokens_to_receive */ = [1030];
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchanges */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [2030, bgN(1, 72)];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);






    //action sell non-fungible token
    console.log("106l");
    var presets = [
      [2, 34588, 1, 40002, 0, 1001],
      [3, 34588, 0, 1, bgN(1, 35), 0],/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[1], [34588], [100], [], [], []];
    var v2/* tokens_to_receive */ = [10];
    var v3/* exchanges */ = [
      [ 
        [0, 0, 0, 5],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  0,0,0,0,0, bgN(1, 35)], [5], [1000] 
      ],
    ]
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchanges */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [901, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);







    //action buy non-fungible token, token already bought
    console.log("106m");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],
      [3, 34588, 0, 1, bgN(1, 35), 0],/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[0], [34588], [100], [40002], [], []];
    var v3/* exchanges */ = [
      [ 
        [0, 0, 0, 5],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  0,0,0,0,0, bgN(1, 35)], [5], [1000] 
      ],
    ]
    var v2/* tokens_to_receive */ = [1];
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchanges */, false)).to.be.reverted;
    await e.delete_preset_data(presets);




    //action sell non-fungible token, depth already consumed
    console.log("106n");
    var presets = [
      [2, 34588, 1, 40002, 0, 1001],
      [3, 34588, 0, 1, 0, 0],/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[1], [34588], [100], [], [], []];
    var v2/* tokens_to_receive */ = [10];
    var v3/* exchanges */ = [
      [ 
        [0, 0, 0, 5],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0, 0],
        [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  0,0,0,0,0, bgN(1, 35)], [5], [1000] 
      ],
    ]
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchanges */, false)).to.be.reverted;
    await e.delete_preset_data(presets);







    //action buy non-fungible token, maximum mint token supply specified
    console.log("106o");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],
      [3, 34588, 0, 1, 0, 0],/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[0], [34588], [100], [40002], [], []];
    var v3/* exchanges */ = [
      [ 
        [0, 0, 0, 5],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0, 1000],
        [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  0,0,0,0/* 11 */,0, bgN(1, 35),  0,0,0/* 16 */,10], [5], [1000] 
      ],
    ]
    var v2/* tokens_to_receive */ = [1];
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchanges */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1001, bgN(1, 35)];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);





    //action buy non-fungible token, maximum mint token supply specified but exceeded
    console.log("106p");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],
      [3, 34588, 0, 1, 0, 0],/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[0], [34588], [100], [40002], [], []];
    var v3/* exchanges */ = [
      [ 
        [0, 0, 0, 5],
        [1000, 0, 0, 0/* 3 */, 0, 0, 0, bgN(5, 16)/* 7 */, 0, 2, 2, 1000/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0, 1000],
        [1000, 10000, 0, 0/* 3 */, 0, 1, bgN(100, 16), 0/* 7 */,  0,0,0,0/* 11 */,0, bgN(1, 35),  0,0,0/* 16 */,1000], [5], [1000] 
      ],
    ]
    var v2/* tokens_to_receive */ = [1];
    await expect(e.f129(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchanges */, false)).to.be.reverted;
    await e.delete_preset_data(presets);
  });






  /* run_exchange_transfer(): transfers tokens from sender's account to a given exchange's account */
  xit("107. can run f130", async () => {
    //action buy, transfer from sender acc to exchange
    console.log("107a");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],/* sender_acc_balance */
      [2, 34588, 1, 34588, 0, 1000],/* receiver_acc_balance */
      [2, 34588, 0, 0, 5, 0],/* parent_exchange */

      [3, 34588, 0, 1, bgN(1, 35), 0]/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* amount_sender_acc_receiver_acc */ = [100, 40002, 34588, 0];
    await expect(e.f130(v1/* amount_sender_acc_receiver_acc */, 34588)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [900, 1100, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //action buy, transfer from sender acc to exchange
    console.log("107b");
    var presets = [
      [2, 34588, 1, 40002, 0, bgN(4, 33)],/* sender_acc_balance */
      [2, 34588, 1, 34588, 0, bgN(18, 33)],/* receiver_acc_balance */
      [2, 34588, 0, 0, 5, 0],/* parent_exchange */

      [3, 34588, 0, 1, bgN(1, 35), 0]/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* amount_sender_acc_receiver_acc */ = [bgN(1, 33), 40002, 34588, 0];
     expect(e.f130(v1/* amount_sender_acc_receiver_acc */, 34588)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(3, 33), bgN(19, 33), 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //action buy, transfer from sender acc to exchange
    console.log("107c");
    var presets = [
      [2, 34588, 1, 40002, 0, bgN(44, 53)],/* sender_acc_balance */
      [2, 34588, 1, 34588, 0, bgN(18, 53)],/* receiver_acc_balance */
      [2, 34588, 0, 0, 5, 0],/* parent_exchange */

      [3, 34588, 0, 1, bgN(1, 35), 0]/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* amount_sender_acc_receiver_acc */ = [bgN(10, 53), 40002, 34588, 0];
     expect(e.f130(v1/* amount_sender_acc_receiver_acc */, 34588)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(34, 53), bgN(28, 53), 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //action sell, transfer from exchange to sender account
    console.log("107d");
    var presets = [
      [2, 34588, 1, 34588, 0, bgN(4, 33)],/* exchange: sender_acc_balance */
      [2, 34588, 1, 40002, 0, bgN(18, 33)],/* sender_account: receiver_acc_balance */
      [2, 34588, 0, 0, 5, 0],/* parent_exchange */

      [3, 34588, 0, 1, bgN(1, 35), 0]/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* amount_sender_acc_receiver_acc */ = [bgN(1, 33), 34588, 40002, 0];
     expect(e.f130(v1/* amount_sender_acc_receiver_acc */, 34588)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(3, 33), bgN(19, 33), 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //action sell, transfer from exchange to sender account
    console.log("107e");
    var presets = [
      [2, 34588, 1, 34588, 0, bgN(14, 63)],/* exchange: sender_acc_balance */
      [2, 34588, 1, 40002, 0, bgN(180, 63)],/* sender_account: receiver_acc_balance */
      [2, 34588, 0, 0, 5, 0],/* parent_exchange */

      [3, 34588, 0, 1, bgN(1, 35), 0]/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* amount_sender_acc_receiver_acc */ = [bgN(1, 63), 34588, 40002, 0];
     expect(e.f130(v1/* amount_sender_acc_receiver_acc */, 34588)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(13, 63), bgN(181, 63), 0];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //action buy, transfer from sender_account to exchange's parent account 
    //swap action involves swapping full supply (1e72) of child tokens for 1 parent token
    //tokens are "partially-transfered" from sender_account balance to parent_exchange balance
    console.log("107f");
    var presets = [
      [2, 34588, 1, 40002, 0, bgN(1, 72)],
      [2, 34588, 1, 34588, 0, 10],
      [2, 34588, 1, 70000, 0, 0],
      [2, 34588, 0, 0, 5, 70000],/* parent_exchange */

      [3, 34588, 0, 1, bgN(1, 35), 0]/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* amount_sender_acc_receiver_acc */ = [bgN(1, 72), 40002, 70000, 0];
     expect(e.f130(v1/* amount_sender_acc_receiver_acc */, 34588)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 10, 0, 70000];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //action sell, transfer from exchange's parent account to sender_account 
    //swap action involves swapping 1 parent token for the full supply (1e72) of child tokens
    //tokens are "partially-transfered" from parent_exchange balance to sender_account balance
    console.log("107g");
    var presets = [
      [2, 34588, 1, 40002, 0, 0],
      [2, 34588, 1, 34588, 0, 10],
      [2, 34588, 1, 70000, 0, 0],
      [2, 34588, 0, 0, 5, 70000],/* parent_exchange */

      [3, 34588, 0, 1, bgN(1, 35), 0]/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* amount_sender_acc_receiver_acc */ = [bgN(1, 72), 70000, 40002, 0];
     expect(e.f130(v1/* amount_sender_acc_receiver_acc */, 34588)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(1, 72), 10, 0, 70000];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //action buy, transfer from sender acc to exchange
    //invalid amount
    console.log("107h -------REMOVED------");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],/* sender_acc_balance */
      [2, 34588, 1, 34588, 0, 1000],/* receiver_acc_balance */
      [2, 34588, 0, 0, 5, 0]/* parent_exchange */
    ];
    // await e.set_preset_data(presets);
    var v1/* amount_sender_acc_receiver_acc */ = [bgN(2, 72), 40002, 34588, 0];
    // await expect(e.f130(v1/* amount_sender_acc_receiver_acc */, 34588)).to.be.reverted;
    // await e.delete_preset_data(presets);



    //action buy, transfer from sender acc to exchange
    //invalid sender_acc_id balance
    console.log("107i");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],/* sender_acc_balance */
      [2, 34588, 1, 34588, 0, 1000],/* receiver_acc_balance */
      [2, 34588, 0, 0, 5, 0],/* parent_exchange */

      [3, 34588, 0, 1, bgN(1, 35), 0]/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* amount_sender_acc_receiver_acc */ = [300000, 40002, 34588, 0];
     expect(e.f130(v1/* amount_sender_acc_receiver_acc */, 34588)).to.be.reverted;
    await e.delete_preset_data(presets);



    //action buy, transfer from sender acc to exchange, time already expired.
    console.log("107j");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],/* sender_acc_balance */
      [2, 34588, 1, 34588, 0, 1000],/* receiver_acc_balance */
      [2, 34588, 0, 0, 5, 0],/* parent_exchange */

      [3, 34588, 0, 1, 100, 0]/* time_limit */
    ];
    await e.set_preset_data(presets);
    var v1/* amount_sender_acc_receiver_acc */ = [100, 40002, 34588, 0];
     expect(e.f130(v1/* amount_sender_acc_receiver_acc */, 34588)).to.be.reverted;
    await e.delete_preset_data(presets);
  });

  /* run_exchange_transfers(): transfers tokens from sender's account to exchange's account then updates their balance */
  xit("108. can run f131", async () => {
    //buy 1 token from exchange, pay 100end
    console.log("108a");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],
      [2, 3, 1, 40002, 0, 1000]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0], [34588], [1], [40002], []];
    var v2/* tokens_to_receive */ = [1];
    var v3/* exchange_nums */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
     expect(e.f131(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchange_nums */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1001, 900];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //buy 1 token from exchange, pay 100 end, 400 spend 
    console.log("108b");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],

      [2, 3, 1, 40002, 0, 1000],
      [2, 5, 1, 40002, 0, 1000]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0], [34588], [1], [40002], []];
    var v2/* tokens_to_receive */ = [1];
    var v3/* exchange_nums */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0,0], [3, 5], [100, 400], [0, 0]]
    ];
     expect(e.f131(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchange_nums */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1001, 900, 600];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //buy 1 token from exchange, pay 100 end, 400 spend , 12e43 xxx
    console.log("108c");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],

      [2, 3, 1, 40002, 0, 1000],
      [2, 5, 1, 40002, 0, 1000],
      [2, 40333, 1, 40002, 0, bgN(30, 43)]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0], [34588], [1], [40002], []];
    var v2/* tokens_to_receive */ = [1];
    var v3/* exchange_nums */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0,0], [3, 5, 40333], [100, 400, bgN(12, 43)], [0, 0, 0]]
    ];
     expect(e.f131(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchange_nums */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1001, 900, 600, bgN(18, 43)];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);


    //buy 19 tokens from exchange, pay 300 end, 750 spend , 36e43 xxx
    console.log("108d");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],

      [2, 3, 1, 40002, 0, 1000],
      [2, 5, 1, 40002, 0, 1000],
      [2, 40333, 1, 40002, 0, bgN(50, 43)]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0], [34588], [3], [40002], []];
    var v2/* tokens_to_receive */ = [19];
    var v3/* exchange_nums */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0,0], [3, 5, 40333], [100, 250, bgN(12, 43)], [0, 0, 0]]
    ];
     expect(e.f131(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchange_nums */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1019, 700, 250, bgN(14, 43)];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //sell 1 token from exchange, receive 100end
    console.log("108e");
    var presets = [
      [2, 3, 1, 34588, 0, 1000],
      [2, 3, 1, 40002, 0, 1000],

      [2, 34588, 1, 40002, 0, 1000]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[1], [34588], [1], [40002], []];
    var v2/* tokens_to_receive */ = [1];
    var v3/* exchange_nums */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
     expect(e.f131(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchange_nums */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [900, 1100, 999];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //sell 10 tokens from exchange, receive 100 end, 700 spend, 1300 xxx
    console.log("108f");
    var presets = [
      [2, 3, 1, 34588, 0, 1000],
      [2, 5, 1, 34588, 0, 1000],
      [2, 44403, 1, 34588, 0, 10000],

      [2, 3, 1, 40002, 0, 1000],
      [2, 5, 1, 40002, 0, 1000],
      [2, 44403, 1, 40002, 0, 1000],

      [2, 34588, 1, 40002, 0, 1000]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[1], [34588], [10], [40002], []];
    var v2/* tokens_to_receive */ = [10];
    var v3/* exchange_nums */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0,0], [3, 5, 44403], [10, 70, 130], [0, 0, 0]]
    ];
     expect(e.f131(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchange_nums */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [900, 300, 8700, 1100, 1700, 2300, 990];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);



    //buy 19 tokens from exchange, pay 300 end, 750 spend , 36e43 xxx
    //sell 10 tokens from exchange, receive 100 end, 700 spend, 1300 xxx
    console.log("108g");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],

      [2, 3000, 1, 40002, 0, 1000],
      [2, 5000, 1, 40002, 0, 1000],
      [2, 40333, 1, 40002, 0, bgN(50, 43)],


      [2, 3, 1, 345877, 0, 1000],
      [2, 5, 1, 345877, 0, 1000],
      [2, 44403, 1, 345877, 0, 10000],

      [2, 3, 1, 40002, 0, 1000],
      [2, 5, 1, 40002, 0, 1000],
      [2, 44403, 1, 40002, 0, 1000],

      [2, 345877, 1, 40002, 0, 1000]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0, 1], [34588, 345877], [3, 10], [40002, 40002], []];
    var v2/* tokens_to_receive */ = [19, 10];
    var v3/* exchange_nums */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0,0], [3000, 5000, 40333], [100, 250, bgN(12, 43)], [0, 0, 0]],
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0,0], [3, 5, 44403], [10, 70, 130], [0, 0, 0]]
    ];
     expect(e.f131(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchange_nums */, false)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [
      1019, 700, 250, bgN(14, 43),
      900, 300, 8700, 1100, 1700, 2300, 990
    ];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);




    //buy 1 token from exchange, pay 100end
    //insufficient balance for buy
    console.log("108h");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],
      [2, 3, 1, 40002, 0, 40]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0], [34588], [1], [40002], []];
    var v2/* tokens_to_receive */ = [1];
    var v3/* exchange_nums */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
     expect(e.f131(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchange_nums */, false)).to.be.reverted;
    await e.delete_preset_data(presets);



    //sell 1 token from exchange, receive 100end
    //invalid exchange balance
    console.log("108i");
    var presets = [
      [2, 3, 1, 34588, 0, 33],
      [2, 3, 1, 40002, 0, 1000],

      [2, 34588, 1, 40002, 0, 1000]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[1], [34588], [1], [40002], []];
    var v2/* tokens_to_receive */ = [1];
    var v3/* exchange_nums */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
     expect(e.f131(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchange_nums */, false)).to.be.reverted;
    await e.delete_preset_data(presets);




    //sell 1 token from exchange, receive 100end
    //insufficient balance for sell
    console.log("108j");
    var presets = [
      [2, 3, 1, 34588, 0, 1000],
      [2, 3, 1, 40002, 0, 1000],

      [2, 34588, 1, 40002, 0, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[1], [34588], [1], [40002], []];
    var v2/* tokens_to_receive */ = [1];
    var v3/* exchange_nums */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
     expect(e.f131(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchange_nums */, false)).to.be.reverted;
    await e.delete_preset_data(presets);




    //authmint 1 token from exchange
    console.log("108k");
    var presets = [
      [2, 34588, 1, 40002, 0, 1000],
      [2, 3, 1, 40002, 0, 1000]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[0], [34588], [1], [40002], []];
    var v2/* tokens_to_receive */ = [1];
    var v3/* exchange_nums */ = [
      [[0, 0, 0, 5], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
     expect(e.f131(v1/* data */, v2/* tokens_to_receive */, 40002, v3/* exchange_nums */, true)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1001, 1000];
    for (let j = 0; j < exp_vals.length; j++) { expect(await val[j]).to.equal(exp_vals[j]); }
    await e.delete_preset_data(presets);
  });

  /* stack_depth_swap: swap a token between depths */
  xit("109. can run f227", async () => {

    //swapping down
    console.log("109a");
    var presets = [
      [2, 34588, 1, 40002, 1/* depth 1 */, 100],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [0/* swap_down */], [1/* depth 1 */], [], [40002], []];
    var v2/* num */ = [
      [[0, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [99, bgN(1, 72)];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    //swapping down
    console.log("109b");
    var presets = [
      [2, 34588, 1, 40002, 3/* depth 3 */, 44],
      [2, 34588, 1, 40002, 2/* depth 2 */, 0],
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [0/* swap_down */], [3/* depth 3 */], [], [40002], []];
    var v2/* num */ = [
      [[0, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [43, bgN(1, 72), 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);




    //swapping down two depths
    console.log("109c");
    var presets = [
      [2, 34588, 1, 40002, 3/* depth 3 */, 72],
      [2, 34588, 1, 40002, 2/* depth 2 */, 0],
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 34588], [0/* swap_down */, 0/* swap_down */], [3/* depth 3 */, 2/* depth 2 */], [], [40002, 40002], []];
    var v2/* num */ = [
      [[0, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[0, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [71, BigInt("999999999999999999999999999999999999999999999999999999999999999999999999"), bgN(1, 72), 0];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    //swapping up
    console.log("109d");
    var presets = [
      [2, 34588, 1, 40002, 3/* depth 3 */, 0],
      [2, 34588, 1, 40002, 2/* depth 2 */, bgN(1, 72)],
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [1/* swap_up */], [2/* depth 2 */], [], [40002], []];
    var v2/* num */ = [
      [[0, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);




    //swapping up
    console.log("109e");
    var presets = [
      [2, 34588, 1, 40002, 3/* depth 3 */, 300],
      [2, 34588, 1, 40002, 2/* depth 2 */, 45],
      [2, 34588, 1, 40002, 1/* depth 1 */, bgN(1, 72)],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [1/* swap_up */], [1/* depth 1 */], [], [40002], []];
    var v2/* num */ = [
      [[0, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [300, 46, 0, 0];

    await e.delete_preset_data(presets);




    //swapping up two depths
    console.log("109f");
    var presets = [
      [2, 34588, 1, 40002, 3/* depth 3 */, 1001],
      [2, 34588, 1, 40002, 2/* depth 2 */, bgN(1, 72)],
      [2, 34588, 1, 40002, 1/* depth 1 */, bgN(1, 72)],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 34588], [1/* swap_up */, 1/* swap_up */], [1/* depth 1 */, 2/* swap_up */], [], [40002, 40002], []];
    var v2/* num */ = [
      [[0, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[0, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [1002, 1, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    //authmint
    console.log("109g");
    var presets = [
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [2/* auth_mint */], [1/* depth 1 */], [10], [40002], []];
    var v2/* num */ = [
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [10, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);




    //authmint in two depths
    console.log("109h");
    var presets = [
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 34588], [2/* auth_mint */,2/* auth_mint */], [1/* depth 1 */,0/* depth 1 */], [33, 49], [40002, 40002], []];
    var v2/* num */ = [
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [33, 49];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);




    //authmint in four depths
    console.log("109i");
    var presets = [
      [2, 34588, 1, 40002, 3/* depth 3 */, 0],
      [2, 34588, 1, 40002, 2/* depth 2 */, 0],
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 34588, 34588, 34588], [2/* auth_mint */,2/* auth_mint */, 2/* auth_mint */, 2/* auth_mint */], [3/* depth 1 */,2/* depth 1 */,1/* depth 1 */,0/* depth 1 */], [bgN(4, 60), bgN(3, 60), bgN(2, 60), bgN(1, 60) ], [40002, 40002, 40002, 40002], []];
    var v2/* num */ = [
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [bgN(4, 60), bgN(3, 60), bgN(2, 60), bgN(1, 60)];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);




    //authmint in one depth, four times
    console.log("109j");
    var presets = [
      [2, 34588, 1, 40002, 3/* depth 3 */, 0],
      [2, 34588, 1, 40002, 2/* depth 2 */, 0],
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 34588, 34588, 34588], [2/* auth_mint */,2/* auth_mint */, 2/* auth_mint */, 2/* auth_mint */], [2/* depth 1 */,2/* depth 1 */,2/* depth 1 */,2/* depth 1 */], [1, 2, 1, 3], [40002, 40002, 40002, 40002], []];
    var v2/* num */ = [
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]],
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 7, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    //swapping down, invalid exchange id
    console.log("109k");
    var presets = [
      [2, 34588, 1, 40002, 1/* depth 1 */, 100],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [0/* swap_down */], [1/* depth 1 */], [], [40002], []];
    var v2/* num */ = [
      [[0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //swapping down, invalid exchange id
    console.log("109l");
    var presets = [
      [2, 34588, 1, 40002, 1/* depth 1 */, 100],
      [2, 34588, 1, 40002, 0/* depth 0 */, 100]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [0/* swap_down */], [0/* depth 1 */], [], [40002], []];
    var v2/* num */ = [
      [[0, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //authmint, invalid exchange authority
    console.log("109m");
    var presets = [
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [2/* auth_mint */], [1/* depth 1 */], [1], [40002], []];
    var v2/* num */ = [
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 5555], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.be.reverted;

    await e.delete_preset_data(presets);



    //invalid action
    console.log("109n");
    var presets = [
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [33/* invalid_action */], [1/* depth 1 */], [77], [40002], []];
    var v2/* num */ = [
      [[0, 0, 0, 3, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.be.reverted;

    await e.delete_preset_data(presets);



    //authmint
    console.log("109o");
    var presets = [
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0],
      [2, 34588, 1, 40001, 1/* depth 1 */, 0],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [2/* auth_mint */], [1/* depth 1 */], [10], [40001], []];
    var v2/* num */ = [
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [0, 0, 10];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    //swapping down, sender in data array
    console.log("109p");
    var presets = [
      [2, 34588, 1, 40002, 1/* depth 1 */, 100],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [0/* swap_down */], [1/* depth 1 */], [], [40002], [40002]];
    var v2/* num */ = [
      [[0, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 0, v2/* num */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [99, bgN(1, 72)];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);




    //authmint, sender in data array not exchange authority
    console.log("109q");
    var presets = [
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [2/* auth_mint */], [1/* depth 1 */], [10], [40002], [40002]];
    var v2/* num */ = [
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40001], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.be.reverted;
    await e.delete_preset_data(presets);




    //authmint, exchange supply not unlocked
    console.log("109r");
    var presets = [
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0],
      [2, 34588, 1, 40001, 1/* depth 1 */, 0],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [2/* auth_mint */], [1/* depth 1 */], [10], [40001], []];
    var v2/* num */ = [
      [[0, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.be.reverted;
    await e.delete_preset_data(presets);









    //authmint, attempt to mint as authority for another exchange using predefined sender array
    console.log("109s");
    var presets = [
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [2/* auth_mint */], [1/* depth 1 */], [1], [40002], [5555]];
    var v2/* num */ = [
      [[1, 0, 0, 5, 0], [0, 0, 2, 0, 0, 5, 0, 0, 8, 5555/* <9>exchange_authority */], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.be.reverted;
    await e.delete_preset_data(presets);







    //swapping down, exchange issues non-fungible tokens
    console.log("109t");
    var presets = [
      [2, 34588, 1, 40002, 1/* depth 1 */, 100],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [0/* swap_down */], [1/* depth 1 */], [], [40002], []];
    var v2/* num */ = [
      [[0, 0, 0, 5, 1], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.be.reverted;
    await e.delete_preset_data(presets);




    //swapping up
    console.log("109u");
    var presets = [
      [2, 34588, 1, 40002, 3/* depth 3 */, 0],
      [2, 34588, 1, 40002, 2/* depth 2 */, bgN(1, 72)],
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [1/* swap_up */], [2/* depth 2 */], [], [40002], []];
    var v2/* num */ = [
      [[0, 0, 0, 5, 1], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.be.reverted;
    await e.delete_preset_data(presets);






    //authmint in non-fungible token exchange
    console.log("109v");
    var presets = [
      [2, 34588, 1, 40002, 1/* depth 1 */, 0],
      [2, 34588, 1, 40002, 0/* depth 0 */, 0]
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [2/* auth_mint */], [1/* depth 1 */], [10], [40002], []];
    var v2/* num */ = [
      [[1, 0, 0, 5, 1], [0, 0, 2, 0, 0, 5, 0, 0, 8, 40002], [0,0,0,0,0,0,0,0], [3], [100], [0]]
    ];
    await expect(e.f227(v1/* data */, 40002, v2/* num */)).to.be.reverted;
    await e.delete_preset_data(presets);
  });






  /* get_nested_exch_data_for_bounties: organizes and sets the exchanges and depths being targeted for bounty collection when voting on proposals */
  xit("110. can run f228", async () => {
    
    //1 proposal target
    var _ints = [
      [30000, 0],
      [35],
      [23],
      [1],/* votes */

      [134, 135],
      [23, 23],
      [2, 2],
    ];
    var targets = [133];
    var start_from = 4;
    var temp_transaction_data = [0]
    var sender_account = 40002;
    var val = await e.f228(_ints, targets, start_from, temp_transaction_data, sender_account);
    console.log("110a");
    var exp_vals = [134, 135, 2, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //2 proposal targets
    var _ints = [
      [30000, 0],
      [35, 2],
      [23, 23],
      [1, 2],/* votes */

      [134, 135, 440],
      [23, 23, 23],
      [2, 2, 55],

      [778, 990, 999],
      [23, 23, 23],
      [24, 2, 80],
    ];
    var targets = [133, 66];
    var start_from = 4;
    var temp_transaction_data = [44]
    var sender_account = 40002;
    var val = await e.f228(_ints, targets, start_from, temp_transaction_data, sender_account);
    console.log("110b");
    var exp_vals = [134, 135, 440, 778, 990, 999, 2, 2, 55, 24, 2, 80];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //3 proposal targets
    var _ints = [
      [30000, 0],
      [35, 2, 55],
      [23, 23, 23],
      [1, 2, 1],/* votes */

      [134, 135, 440],
      [23, 23, 23],
      [2, 2, 55],

      [778, 990, 999],
      [23, 23, 23],
      [24, 2, 80],

      [773, 993, 993],
      [23, 23, 23],
      [2, 233, 9],
    ];
    var targets = [133, 66, 444];
    var start_from = 4;
    var temp_transaction_data = [44]
    var sender_account = 40002;
    var val = await e.f228(_ints, targets, start_from, temp_transaction_data, sender_account);
    console.log("110c");
    var exp_vals = [134, 135, 440, 778, 990, 999, 773, 993, 993, 2, 2, 55, 24, 2, 80, 2, 233, 9];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //4 proposal targets
    var _ints = [
      [30000, 0],
      [35, 2, 55, 66],
      [23, 23, 23, 23],
      [1, 2, 1, 0],/* votes */

      [134, 135, 440],
      [23, 23, 23],
      [2, 2, 55],

      [778, 990, 999],
      [23, 23, 23],
      [24, 2, 80],

      [773, 993, 993],
      [23, 23, 23],
      [2, 233, 9],

      [899, 3993, 38889],
      [23, 23, 23],
      [0, 233, 999],
    ];
    var targets = [133, 66, 444, 655];
    var start_from = 4;
    var temp_transaction_data = [44]
    var sender_account = 40002;
    var val = await e.f228(_ints, targets, start_from, temp_transaction_data, sender_account);
    console.log("110d");
    var exp_vals = [134, 135, 440, 778, 990, 999, 773, 993, 993,899, 3993, 38889, 2, 2, 55, 24, 2, 80, 2, 233, 9, 0, 233, 999];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //2 proposal targets, malformed input
    var _ints = [
      [30000, 0],
      [35, 45],
      [23, 23],
      [1, 0],/* votes */

      [134, 135],
      [23, 23],
      [2, 2],
    ];
    var targets = [133, 88];
    var start_from = 4;
    var temp_transaction_data = [0]
    var sender_account = 40002;
    console.log("110e");
    expect(e.f228(_ints, targets, start_from, temp_transaction_data, sender_account)).to.be.reverted;
    
  });

  /* get_stack_depth_swap_data: returns the data used in performing depth swaps */
  xit("111. can run f226", async () => {
    // 1 target
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 16],
        [35],
        [23],

        [3],
        [111],
        [0]
      ]
    ];
    var val = await e.f36(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("111a");
    var exp_vals = [35, 3, 111, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    // 2 targets
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 16],
        [35, 44],
        [23, 23],

        [3, 45],
        [111, 345],
        [0, 3]
      ]
    ];
    var val = await e.f36(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("111b");
    var exp_vals = [35, 44, 3, 45, 111, 345, 0, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    // 3 targets
    var v1/* temp_transaction_data_group */ = [[0, 0, 0, 0], [], []];
    var _ints = [
      [/* t0 */
        [30000, 16],
        [35, 44, 566],
        [23, 23, 23],

        [3, 45, 56],
        [111, 345, 445],
        [0, 3, 38]
      ]
    ];
    var val = await e.f36(v1/* temp_transaction_data_group */, 400, _ints, [], []);
    console.log("111c");
    var exp_vals = [35, 44, 566, 3, 45, 56, 111, 345, 445, 0, 3, 38];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });

  /* get_exchange_transfer_count: creates and sets the exchange transfer data arrays when transfering tokens from an controlled exchange to specified targets */
  xit("112. can run f234", async () => {
    //size 3
    var val = await e.f234(3);
    console.log("112a");
    var exp_vals = [3, 3, 3, 3, 3, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 2
    var val = await e.f234(2);
    console.log("112b");
    var exp_vals = [2, 2, 2, 2, 2, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 7
    var val = await e.f234(7);
    console.log("112c");
    var exp_vals = [7, 7, 7, 7, 7, 7];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 13
    var val = await e.f234(13);
    console.log("112d");
    var exp_vals = [13, 13, 13, 13, 13, 13];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 1
    var val = await e.f234(1);
    console.log("112e");
    var exp_vals = [1, 1, 1, 1, 1, 1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 0
    var val = await e.f234(0);
    console.log("112f");
    var exp_vals = [0, 0, 0, 0, 0, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

  });





  /* get_consensus_exchange_transfer_data: organizes and sets the exchange transfer data specified in the submitted consensus objects */
  xit("113. can run f233", async () => {
    //1 exchange transfer 
    var v1/* target_nums */ = [
      [[0], [6, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], [47]/* 5 */, [885], [686], [44]]
    ];
    var v2/* targets */ = [1004];
    var v3/* consensus_type_data */ = [0, 0, 0, 0, 0, 0, 1];
    var val = await e.f233(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */);
    console.log("113a");
    var exp_vals = [350, 47, 885, 686, 67, 44];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //2 exchange transfers 
    var v1/* target_nums */ = [
      [[0], [6, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], [47]/* 5 */, [885], [686], [44]],
      [[0], [6, 0, 0, 0, 0, 607/* 5 */, 0, 0, 0, 0], [0], [0],  [35], [437]/* 5 */, [8825], [68116], [414]]
    ];
    var v2/* targets */ = [1004, 1001];
    var v3/* consensus_type_data */ = [0, 0, 0, 0, 0, 0, 2];
    var val = await e.f233(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */);
    console.log("113b");
    var exp_vals = [350, 35,   47, 437,   885, 8825,   686, 68116,   67, 607,    44, 414];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //3 exchange transfers 
    var v1/* target_nums */ = [
      [[0], [6, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], [47]/* 5 */, [885], [686], [44]],
      [[0], [6, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [35], [437]/* 5 */, [8825], [68116], [414]],
      [[0], [6, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [89], [332]/* 5 */, [2], [10], [39]],
    ];
    var v2/* targets */ = [1004, 1001, 4004];
    var v3/* consensus_type_data */ = [0, 0, 0, 0, 0, 0, 3];
    var val = await e.f233(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */);
    console.log("113c");
    var exp_vals = [350, 35, 89,   47, 437, 332,   885, 8825, 2,   686, 68116, 10,   67, 67, 67,    44, 414, 39];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //3 exchange transfers, 1 spend action 
    var v1/* target_nums */ = [
      [[0], [6, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], [47]/* 5 */, [885], [686], [44]],
      [[0], [0, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [35], [437]/* 5 */, [8825], [68116], [414]],
      [[0], [6, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [35], [437]/* 5 */, [8825], [68116], [414]],
      [[0], [6, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [89], [332]/* 5 */, [2], [10], [39]],
    ];
    var v2/* targets */ = [1004, 1001, 4004, 33000];
    var v3/* consensus_type_data */ = [1, 0, 0, 0, 0, 0, 3];
    var val = await e.f233(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */);
    console.log("113d");
    var exp_vals = [350, 35, 89,   47, 437, 332,   885, 8825, 2,   686, 68116, 10,   67, 67, 67,    44, 414, 39];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

  });

  /* run_exchange_transfer_checkers: runs checkers to ensure an exchange transfer action is valid */
  xit("114. can run f231", async () => {
    // 1 exchange transfer action
    console.log("114a");
    var presets = [
      [1, 34588, 0, 1, 1], [1, 34588, 0, 3, 5],
      [1, 34588, 1, 9, 40002],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [2828], [787], [4], [55], [4449]];
    var val = await expect(e.f231(v1/* data */, 40002)).to.not.be.reverted;

    var exp_vals = [4449,  787,  34588,  2828,  4];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    // 2 exchange transfer actions
    console.log("114b");
    var presets = [
      [1, 34588, 0, 1, 1], [1, 34588, 0, 3, 5],
      [1, 34588, 1, 9, 40002],

      [1, 40401, 0, 1, 1], [1, 40401, 0, 3, 3],
      [1, 40401, 1, 9, 40002],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 40401], [2828, 34], [787, 44], [4, 9], [55, 4], [4449, 990]];
    var val = await expect(e.f231(v1/* data */, 40002)).to.not.be.reverted;

    var exp_vals = [4449, 990,   787, 44,   34588, 40401,   2828, 34,   4, 9];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    // 3 exchange transfer actions
    console.log("114c");
    var presets = [
      [1, 34588, 0, 1, 1], [1, 34588, 0, 3, 5],
      [1, 34588, 1, 9, 40002],

      [1, 40401, 0, 1, 1], [1, 40401, 0, 3, 3],
      [1, 40401, 1, 9, 40002],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 40401, 40401], [2828, 34, 22], [787, 44, 11], [4, 9, 33], [55, 4, 6], [4449, 990, 83]];
    var val = await expect(e.f231(v1/* data */, 40002)).to.not.be.reverted;

    var exp_vals = [4449, 990, 83,   787, 44, 11,   34588, 40401, 40401,   2828, 34, 22,   4, 9, 33];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    // 3 exchange transfer actions, sender in data array
    console.log("114d");
    var presets = [
      [1, 34588, 0, 1, 1], [1, 34588, 0, 3, 5],
      [1, 34588, 1, 9, 40002],

      [1, 40401, 0, 1, 1], [1, 40401, 0, 3, 3],
      [1, 40401, 1, 9, 40002],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 40401, 40401], [2828, 34, 22], [787, 44, 11], [4, 9, 33], [40002, 40002, 40002], [4449, 990, 83]];
    var val = await expect(e.f231(v1/* data */, 0)).to.not.be.reverted;

    var exp_vals = [4449, 990, 83,   787, 44, 11,   34588, 40401, 40401,   2828, 34, 22,   4, 9, 33];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    // 3 exchange transfer actions, sender in data array, invalid exchange supplied
    console.log("114e");
    var presets = [
      [1, 34588, 0, 1, 1], [1, 34588, 0, 3, 5],
      [1, 34588, 1, 9, 40002],

      [1, 40401, 0, 1, 1], [1, 40401, 0, 3, 9],
      [1, 40401, 1, 9, 40002],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 40401, 40401], [2828, 34, 22], [787, 44, 11], [4, 9, 33], [40002, 40002, 40002], [4449, 990, 83]];
    await expect(e.f231(v1/* data */, 0)).to.be.reverted;

    await e.delete_preset_data(presets);



    // 3 exchange transfer actions, sender in data array, invalid initiator supplied
    console.log("114f");
    var presets = [
      [1, 34588, 0, 1, 1], [1, 34588, 0, 3, 5],
      [1, 34588, 1, 9, 40002],

      [1, 40401, 0, 1, 1], [1, 40401, 0, 3, 3],
      [1, 40401, 1, 9, 40002],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 40401, 40401], [2828, 34, 22], [787, 44, 11], [4, 9, 33], [40002, 4002, 40002], [4449, 990, 83]];
    await expect(e.f231(v1/* data */, 0)).to.be.reverted;

    await e.delete_preset_data(presets);



    // 3 exchange transfer actions, sender in data array, invalid initiator supplied
    console.log("114g");
    var presets = [
      [1, 34588, 0, 1, 1], [1, 34588, 0, 3, 5],
      [1, 34588, 1, 9, 40002],

      [1, 40401, 0, 1, 1], [1, 40401, 0, 3, 3],
      [1, 40401, 1, 9, 40002],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588, 40401, 40401], [2828, 34, 22], [787, 44, 11], [4, 9, 33], [40002, 40002, 40002], [4449, 990, 83]];
    await expect(e.f231(v1/* data */, 1)).to.be.reverted;

    await e.delete_preset_data(presets);



    // 1 exchange transfer action, liquidity locked
    console.log("114h");
    var presets = [
      [1, 34588, 0, 1, 0], [1, 34588, 0, 3, 5],
      [1, 34588, 1, 9, 40002],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [[34588], [2828], [787], [4], [55], [4449]];
    var val = await expect(e.f231(v1/* data */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);

  });

  /* get_total_consensus_data: returns the vote data contained in each consensus object passed */
  xit("115. can run f236", async () => {
    //1 proposal targeted
    console.log("115a");
    var presets = [
      [2, 34588, 1, 2/* wait's */, 5],
      [2, 34588, 1, 3/* yes's */, 2],
      [2, 34588, 1, 4/* no's */, 3],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [34588];
    var val = await expect(e.f236(v1/* data */)).to.not.be.reverted;

    var exp_vals = [5, 2, 3];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);


    //2 proposals targeted
    console.log("115b");
    var presets = [
      [2, 34588, 1, 2/* wait's */, 5],
      [2, 34588, 1, 3/* yes's */, 2],
      [2, 34588, 1, 4/* no's */, 3],

      [2, 34599, 1, 2/* wait's */, 54],
      [2, 34599, 1, 3/* yes's */, 22],
      [2, 34599, 1, 4/* no's */, 31],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [34588, 34599];
    var val = await expect(e.f236(v1/* data */)).to.not.be.reverted;

    var exp_vals = [5, 2, 3,  54, 22, 31];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);


    //3 proposals targeted
    console.log("115c");
    var presets = [
      [2, 34588, 1, 2/* wait's */, 5],
      [2, 34588, 1, 3/* yes's */, 2],
      [2, 34588, 1, 4/* no's */, 3],

      [2, 34599, 1, 2/* wait's */, 54],
      [2, 34599, 1, 3/* yes's */, 22],
      [2, 34599, 1, 4/* no's */, 31],


      [2, 444, 1, 2/* wait's */, 594],
      [2, 444, 1, 3/* yes's */, 2002],
      [2, 444, 1, 4/* no's */, 321],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [34588, 34599, 444];
    var val = await expect(e.f236(v1/* data */)).to.not.be.reverted;

    var exp_vals = [5, 2, 3,  54, 22, 31,  594, 2002, 321];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    //1 contract voter count targeted
    console.log("115d");
    var presets = [
      [2, 34588, 1, 1, 31],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [34588];
    await e.f2362(v1/* data */)
    var val = await expect(e.f2362(v1/* data */)).to.not.be.reverted;

    var exp_vals = [31];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);




    //3 contract voter count targeted
    console.log("115e");
    var presets = [
      [2, 34588, 1, 1, 31],
      [2, 345882, 1, 1, 321],
      [2, 345883, 1, 1, 311],
    ];
    await e.set_preset_data(presets);

    var v1/* data */ = [34588, 345882, 345883];
    var val = await expect(e.f2362(v1/* data */)).to.not.be.reverted;

    var exp_vals = [31, 321, 311];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);
  });




  /* get_account votes_data: returns the vote data for specified accounts in specified proposal targets */
  xit("116. can run f237", async () => {
    //1 proposal, 1 account targeted
    console.log("116a");
    var presets = [
      [2, 34588, 3, 40002, 3],
    ];
    await e.set_preset_data(presets);

    var v1/* consensus_targets */ = [34588];
    var v2/* voter_accounts */ = [[40002]];
    var val = await expect(e.f237(v1/* consensus_targets */, v2/* voter_accounts */)).to.not.be.reverted;

    var exp_vals = [3];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);


    //1 proposal, 2 accounts targeted
    console.log("116b");
    var presets = [
      [2, 34588, 3, 40002, 3],
      [2, 34588, 3, 40003, 2],
    ];
    await e.set_preset_data(presets);

    var v1/* consensus_targets */ = [34588];
    var v2/* voter_accounts */ = [[40002, 40003]];
    var val = await expect(e.f237(v1/* consensus_targets */, v2/* voter_accounts */)).to.not.be.reverted;

    var exp_vals = [3, 2];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    //2 proposals, 2 accounts targeted
    console.log("116c");
    var presets = [
      [2, 34588, 3, 40002, 3],
      [2, 34588, 3, 40003, 2],

      [2, 555, 3, 90002, 2],
      [2, 555, 3, 80003, 4],
    ];
    await e.set_preset_data(presets);

    var v1/* consensus_targets */ = [34588, 555];
    var v2/* voter_accounts */ = [[40002, 40003], [90002, 80003]];
    var val = await expect(e.f237(v1/* consensus_targets */, v2/* voter_accounts */)).to.not.be.reverted;

    var exp_vals = [3, 2,   2, 4];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);



    //2 proposals, 2 accounts targeted
    console.log("116d");
    var presets = [
      [2, 34588, 3, 40002, 3],
      [2, 34588, 3, 40003, 2],
      [2, 34588, 3, 80003, 4],

      [2, 555, 3, 90002, 2],
      [2, 555, 3, 80003, 4],
      [2, 555, 3, 40003, 3],
    ];
    await e.set_preset_data(presets);

    var v1/* consensus_targets */ = [34588, 555];
    var v2/* voter_accounts */ = [[40002, 40003, 80003], [90002, 80003, 40003]];
    var val = await expect(e.f237(v1/* consensus_targets */, v2/* voter_accounts */)).to.not.be.reverted;

    var exp_vals = [3, 2, 4,   2, 4, 3];
    for (let j = 0; j < exp_vals.length; j++) { expect( val[j]).to.equal(exp_vals[j]); }

    await e.delete_preset_data(presets);
  });

  /* modify_proposal: modify the contents of a given set of proposals */
  xit("117. can run f238", async () => {
    //modify one value
    console.log("117a");
    var presets = [
      [1, 34588, 0, 0, 32],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, bgN(1,28)/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 10_000],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [5], [0], [4004], []];
    await expect(e.f238(v1/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [32,   0, bgN(1,28), 40000,   3, 5, 4004, 3000, 34, 88,   2,  10_000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //modify one values
    console.log("117b");
    var presets = [
      [1, 34588, 0, 0, 32],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, bgN(1,28)/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 10_000],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [5], [1], [4004], []];
    await expect(e.f238(v1/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [32,   0, bgN(1,28), 40000,   3, 5, 5000, 4004, 34, 88,   2,  10_000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //modify one value
    console.log("117c");
    var presets = [
      [1, 34588, 0, 0, 32],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, bgN(1,28)/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 10_000],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [6], [0], [994], []];
    await expect(e.f238(v1/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [32,   0, bgN(1,28), 40000,   3, 5, 5000, 3000, 994, 88,   2,  10_000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //modify two values
    console.log("117d");
    var presets = [
      [1, 34588, 0, 0, 32],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, bgN(1,28)/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 10_000],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588, 34588], [5, 6], [0, 1], [4004, 7009], []];
    await expect(e.f238(v1/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [32,   0, bgN(1,28), 40000,   3, 5, 4004, 3000, 34, 7009,   2,  10_000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //attempting to modify target thats not a proposal
    console.log("117e");
    var presets = [
      [1, 34588, 0, 0, 30],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, bgN(1,28)/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 10_000],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [5], [0], [4004], []];
    await expect(e.f238(v1/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //attempting to modify target configuration
    console.log("117f");
    var presets = [
      [1, 34588, 0, 0, 32],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, bgN(1,28)/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 10_000],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [1], [0], [4004], []];
    await expect(e.f238(v1/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //attempting to modify array outside of permitted bounds
    console.log("117g");
    var presets = [
      [1, 34588, 0, 0, 32],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, bgN(1,28)/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 10_000],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [19], [0], [4004], []];
    await expect(e.f238(v1/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //attempting to modify proposal close to the expiry time
    console.log("117h");
    var presets = [
      [1, 34588, 0, 0, 32],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 15_000/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 10_000],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [5], [0], [4004], []];
    await expect(e.f238(v1/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //modify target whose contract authority has no proposal modify expiry duration limit
    console.log("117i");
    var presets = [
      [1, 34588, 0, 0, 32],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, bgN(1,28)/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 0],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [5], [0], [4004], []];
    await expect(e.f238(v1/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //added one target to the proposal
    console.log("117j");
    var presets = [
      [1, 34588, 0, 0, 32],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, bgN(1,28)/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5], [1, 34588, 4, 2, 0],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000], [1, 34588, 5, 2, 0],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88], [1, 34588, 6, 2, 0],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 10_000],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [4], [2], [399], []];
    await expect(e.f238(v1/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [32,   0, bgN(1,28), 40000,   3, 5, 399, 5000, 3000, 0, 34, 88, 0,   3,  10_000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //modify first target in the proposal
    console.log("117k");
    var presets = [
      [1, 34588, 0, 0, 32],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, bgN(1,28)/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5], [1, 34588, 4, 2, 0],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000], [1, 34588, 5, 2, 0],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88], [1, 34588, 6, 2, 0],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 10_000],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [4], [0], [5552471], []];
    await expect(e.f238(v1/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [32,   0, bgN(1,28), 40000,   5552471, 5, 0, 5000, 3000, 0, 34, 88, 0,   2,  10_000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //modify first and second target in the proposal
    console.log("117l");
    var presets = [
      [1, 34588, 0, 0, 32],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, bgN(1,28)/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5], [1, 34588, 4, 2, 0],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000], [1, 34588, 5, 2, 0],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88], [1, 34588, 6, 2, 0],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 10_000],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588, 34588], [4, 4], [0, 1], [5552471, 700], []];
    await expect(e.f238(v1/* data */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [32,   0, bgN(1,28), 40000,   5552471, 700, 0, 5000, 3000, 0, 34, 88, 0,   2,  10_000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    //adding target in invalid position
    console.log("117m");
    var presets = [
      [1, 34588, 0, 0, 32],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, bgN(1,28)/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5], [1, 34588, 4, 2, 0],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000], [1, 34588, 5, 2, 0],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88], [1, 34588, 6, 2, 0],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 10_000],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [4], [4], [5552471], []];
    await expect(e.f238(v1/* data */)).to.be.reverted;
    await e.delete_preset_data(presets);

  });

  /* scan_account_exchange_data: scans an exchanage for swap limit data such as the last swap block and time */
  xit("118. can run f241", async () => {
    //scan 1 exchange for 1 account
    console.log("118a");
    var presets = [
      [2, 34588, 40002, 0, 32], [2, 34588, 40002, 1, 42], [2, 34588, 40002, 2, 3002],
      
    ];
    await e.set_preset_data(presets);
    var v1/* accounts */ = [40002];
    var v2/* exchanges */ = [34588];
    var val = await e.f241(v1/* accounts */, v2/* exchanges */);

    var exp_vals = [32, 42, 3002];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 1 exchange for 1 account
    console.log("118b");
    var presets = [
      [2, 34588, 40002, 0, 32], [2, 34588, 40002, 1, 4002], [2, 34588, 40002, 2, 3002],
      
    ];
    await e.set_preset_data(presets);
    var v1/* accounts */ = [40002];
    var v2/* exchanges */ = [34588];
    var val = await e.f241(v1/* accounts */, v2/* exchanges */);

    var exp_vals = [32, 4002, 3002];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 3 exchanges for 1 account
    console.log("118c");
    var presets = [
      [2, 34588, 40002, 0, 32], [2, 34588, 40002, 1, 42], [2, 34588, 40002, 2, 3002],
      [2, 755, 40002, 0, 362], [2, 755, 40002, 1, 421], [2, 755, 40002, 2, 30702],
      [2, 9045, 40002, 0, 3332], [2, 9045, 40002, 1, 542], [2, 9045, 40002, 2, 33002],
      
    ];
    await e.set_preset_data(presets);
    var v1/* accounts */ = [40002, 40002, 40002];
    var v2/* exchanges */ = [34588, 755, 9045];
    var val = await e.f241(v1/* accounts */, v2/* exchanges */);

    var exp_vals = [32, 42, 3002,  362, 421, 30702,  3332, 542, 33002];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 3 exchanges for 1 account
    console.log("118d");
    var presets = [
      [2, 34588, 40002, 0, 32], [2, 34588, 40002, 1, 42], [2, 34588, 40002, 2, 3002],
      [2, 755, 40002, 0, 362], [2, 755, 40002, 1, 421], [2, 755, 40002, 2, 30702],
      [2, 9045, 4455, 0, 33324], [2, 9045, 4455, 1, 5424], [2, 9045, 4455, 2, 330024],
      
    ];
    await e.set_preset_data(presets);
    var v1/* accounts */ = [40002, 40002, 4455];
    var v2/* exchanges */ = [34588, 755, 9045];
    var val = await e.f241(v1/* accounts */, v2/* exchanges */);

    var exp_vals = [32, 42, 3002,  362, 421, 30702,  33324, 5424, 330024];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });





  /* balance_of: gets the balance of specified accounts at specified exchanges at specified depths */
  xit("119. can run f140", async () => {
    //scan 1 account 
    console.log("119a");
    var presets = [
      [2, 34588, 1/* unfroozen */, 40002, 0/* depth */, 32_000],
    ];
    await e.set_preset_data(presets);
    var v1/* exchanges */ = [34588];
    var v2/* accounts */ = [40002];
    var v3/* depths */ = [0];
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 1/* unfroozen */);

    var exp_vals = [32_000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 2 accounts 
    console.log("119b");
    var presets = [
      [2, 34588, 1/* unfroozen */, 40002, 0/* depth */, 32_000],
      [2, 34588, 1/* unfroozen */, 40009, 0/* depth */, 700_001],
    ];
    await e.set_preset_data(presets);
    var v1/* exchanges */ = [34588, 34588];
    var v2/* accounts */ = [40002, 40009];
    var v3/* depths */ = [0, 0];
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 1/* unfroozen */);

    var exp_vals = [32_000, 700_001];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 2 accounts 
    console.log("119b");
    var presets = [
      [2, 34588, 1/* unfroozen */, 40002, 0/* depth */, 32_000],
      [2, 70033, 1/* unfroozen */, 40009, 0/* depth */, 700_001],
    ];
    await e.set_preset_data(presets);
    var v1/* exchanges */ = [34588, 70033];
    var v2/* accounts */ = [40002, 40009];
    var v3/* depths */ = [0, 0];
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 1/* unfroozen */);

    var exp_vals = [32_000, 700_001];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    //scan 4 accounts 
    console.log("119c");
    var presets = [
      [2, 34588, 1/* unfroozen */, 40002, 9000/* depth */, 32_000],
      [2, 34588, 1/* unfroozen */, 40009, 0/* depth */, 700_001],

      [2, 282883, 1/* unfroozen */, 38383, 55/* depth */, 8],
      [2, 282883, 1/* unfroozen */, 2738, 1/* depth */, 92008],
    ];
    await e.set_preset_data(presets);
    var v1/* exchanges */ = [34588, 34588, 282883, 282883];
    var v2/* accounts */ = [40002, 40009, 38383, 2738];
    var v3/* depths */ = [9000, 0, 55, 1];
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 1/* unfroozen */);

    var exp_vals = [32_000, 700_001, 8, 92008];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    
    //scan 1 account, frozen 
    console.log("119d");
    var presets = [
      [2, 34588, 2/* frozen */, 40002, 0/* depth */, 32_00440],
    ];
    await e.set_preset_data(presets);
    var v1/* exchanges */ = [34588];
    var v2/* accounts */ = [40002];
    var v3/* depths */ = [0];
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 2/* froozen */);

    var exp_vals = [32_00440];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 3 accounts, frozen 
    console.log("119e");
    var presets = [
      [2, 34588, 2/* frozen */, 40002, 40/* depth */, 32_00441],
      [2, 8993, 2/* frozen */, 400042, 8/* depth */, 900],
      [2, 88838, 2/* frozen */, 400032, 90/* depth */, 2828],
    ];
    await e.set_preset_data(presets);
    var v1/* exchanges */ = [34588, 8993, 88838];
    var v2/* accounts */ = [40002, 400042, 400032];
    var v3/* depths */ = [40, 8, 90];
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 2/* froozen */);

    var exp_vals = [32_00441, 900, 2828];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* account_balances_of: gets the token balance of a specific account */
  xit("120. can run f140e", async () => {
    //scan 1 exchange 
    console.log("119a");
    var presets = [
      [2, 34588, 1/* unfroozen */, 40002, 0/* depth */, 32008880],
    ];
    await e.set_preset_data(presets);
    var v1/* exchanges */ = [34588];
    var v2/* depths */ = [0];
    var val = await e.f140e(v1/* exchanges */, 40002, v2/* depths */);

    var exp_vals = [32008880];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 2 exchanges 
    console.log("119b");
    var presets = [
      [2, 34588, 1/* unfroozen */, 40002, 0/* depth */, 32008880],
      [2, 330037, 1/* unfroozen */, 40002, 0/* depth */, 700],
    ];
    await e.set_preset_data(presets);
    var v1/* exchanges */ = [34588, 330037];
    var v2/* depths */ = [0, 0];
    var val = await e.f140e(v1/* exchanges */, 40002, v2/* depths */);

    var exp_vals = [32008880, 700];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 3 exchanges 
    console.log("119c");
    var presets = [
      [2, 34588, 1/* unfroozen */, 40002, 0/* depth */, 32008888],
      [2, 330037, 1/* unfroozen */, 40002, 0/* depth */, 790],
      [2, 777989, 1/* unfroozen */, 40002, 0/* depth */, 900032],
    ];
    await e.set_preset_data(presets);
    var v1/* exchanges */ = [34588, 330037, 777989];
    var v2/* depths */ = [0, 0, 0];
    var val = await e.f140e(v1/* exchanges */, 40002, v2/* depths */);

    var exp_vals = [32008888, 790, 900032];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 3 exchanges, different depths 
    console.log("119d");
    var presets = [
      [2, 34588, 1/* unfroozen */, 40002, 9/* depth */, 32008888],
      [2, 330037, 1/* unfroozen */, 40002, 77/* depth */, 790],
      [2, 777989, 1/* unfroozen */, 40002, 5030/* depth */, 900032],
    ];
    await e.set_preset_data(presets);
    var v1/* exchanges */ = [34588, 3, 330037, 777989];
    var v2/* depths */ = [9, 88, 77, 5030];
    var val = await e.f140e(v1/* exchanges */, 40002, v2/* depths */);

    var exp_vals = [32008888, 0, 790, 900032];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* get_stack_depth_swap_count: creates and sets the stack depth swap data arrays when performing depth swap from an exchange to specified targets */
  xit("121. can run f240", async () => {
    //size 3
    var val = await e.f240(3);
    console.log("121a");
    var exp_vals = [3, 3, 3, 3, 3, 3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 4
    var val = await e.f240(4);
    console.log("121b");
    var exp_vals = [4, 4, 4, 4, 4, 4];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 13
    var val = await e.f240(13);
    console.log("121c");
    var exp_vals = [13, 13, 13, 13, 13, 13];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 23
    var val = await e.f240(23);
    console.log("121d");
    var exp_vals = [23, 23, 23, 23, 23, 23];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 33
    var val = await e.f240(33);
    console.log("121e");
    var exp_vals = [33, 33, 33, 33, 33, 33];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });




  /* get_consensus_stack_depth_swap: sets the stack depth swap data from consensus objects */
  xit("122. can run f241", async () => {
    //1 swap action
    var v1/* target_nums */ = [
      [[0], [7, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], [47]/* 5 */, [885], [686], [44]]
    ];
    var v2/* targets */ = [1004];
    var v3/* consensus_type_data */ = [0, 0, 0, 0, 0, 0, 0, 1];
    var val = await e.f241(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */);
    console.log("122a");
    var exp_vals = [350, 47, 885, 686, 44, 67];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //1 swap action
    var v1/* target_nums */ = [
      [[0], [7, 0, 0, 0, 0, 657/* 5 */, 0, 0, 0, 0], [0], [0],  [350], [47]/* 5 */, [8845], [686], [44]]
    ];
    var v2/* targets */ = [1004];
    var v3/* consensus_type_data */ = [0, 0, 0, 0, 0, 0, 0, 1];
    var val = await e.f241(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */);
    console.log("122b");
    var exp_vals = [350, 47, 8845, 686, 44, 657];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //1 swap action
    var v1/* target_nums */ = [
      [[0], [7, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [1350], [47]/* 5 */, [1885], [686], [144]]
    ];
    var v2/* targets */ = [1004];
    var v3/* consensus_type_data */ = [0, 0, 0, 0, 0, 0, 0, 1];
    var val = await e.f241(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */);
    console.log("122c");
    var exp_vals = [1350, 47, 1885, 686, 144, 67];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //2 swap actions
    var v1/* target_nums */ = [
      [[0], [7, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [1350], [47]/* 5 */, [1885], [686], [144]],
      [[0], [7, 0, 0, 0, 0, 99/* 5 */, 0, 0, 0, 0], [0], [0],  [7438], [7728]/* 5 */, [2020], [83728], [400]]
    ];
    var v2/* targets */ = [1004, 1029];
    var v3/* consensus_type_data */ = [0, 0, 0, 0, 0, 0, 0, 2];
    var val = await e.f241(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */);
    console.log("122d");
    var exp_vals = [1350, 7438,   47, 7728,   1885, 2020,   686, 83728,   144, 400,   67, 99];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //3 swap actions
    var v1/* target_nums */ = [
      [[0], [7, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [1350], [47]/* 5 */, [1885], [686], [144]],
      [[0], [7, 0, 0, 0, 0, 99/* 5 */, 0, 0, 0, 0], [0], [0],  [7438], [7728]/* 5 */, [2020], [83728], [400]],
      [[0], [7, 0, 0, 0, 0, 909/* 5 */, 0, 0, 0, 0], [0], [0],  [74308], [77028]/* 5 */, [20020], [837028], [4000]]
    ];
    var v2/* targets */ = [1004, 1029, 44004];
    var v3/* consensus_type_data */ = [0, 0, 0, 0, 0, 0, 0, 3];
    var val = await e.f241(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */);
    console.log("122e");
    var exp_vals = [1350, 7438, 74308,   47, 7728, 77028,   1885, 2020, 20020,   686, 83728, 837028,   144, 400, 4000,   67, 99, 909];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //3 swap actions
    var v1/* target_nums */ = [
      [[0], [7, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [1350], [47]/* 5 */, [1885], [686], [144]],
      [[0], [6, 0, 0, 0, 0, 99/* 5 */, 0, 0, 0, 0], [0], [0],  [7438], [7728]/* 5 */, [2020], [83728], [400]],
      [[0], [7, 0, 0, 0, 0, 99/* 5 */, 0, 0, 0, 0], [0], [0],  [7438], [7728]/* 5 */, [2020], [83728], [400]],
      [[0], [7, 0, 0, 0, 0, 909/* 5 */, 0, 0, 0, 0], [0], [0],  [74308], [77028]/* 5 */, [20020], [837028], [4000]]
    ];
    var v2/* targets */ = [1004, 1029, 44004, 5050];
    var v3/* consensus_type_data */ = [0, 0, 0, 0, 0, 0, 0, 3];
    var val = await e.f241(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */);
    console.log("122f");
    var exp_vals = [1350, 7438, 74308,   47, 7728, 77028,   1885, 2020, 20020,   686, 83728, 837028,   144, 400, 4000,   67, 99, 909];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //3 swap actions
    var v1/* target_nums */ = [
      [[0], [7, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [1350], [47]/* 5 */, [1885], [686], [144]],
      [[0], [6, 0, 0, 0, 0, 99/* 5 */, 0, 0, 0, 0], [0], [0],  [7438], [7728]/* 5 */, [2020], [83728], [400]],
      [[0], [7, 0, 0, 0, 0, 99/* 5 */, 0, 0, 0, 0], [0], [0],  [7438], [7728]/* 5 */, [2020], [83728], [400]],
      [[0], [5, 0, 0, 0, 0, 99/* 5 */, 0, 0, 0, 0], [0], [0],  [7438], [7728]/* 5 */, [2020], [83728], [400]],
      [[0], [7, 0, 0, 0, 0, 909/* 5 */, 0, 0, 0, 0], [0], [0],  [74308], [77028]/* 5 */, [20020], [837028], [4000]]
    ];
    var v2/* targets */ = [1004, 1029, 44004, 5050, 50443];
    var v3/* consensus_type_data */ = [0, 0, 0, 0, 0, 0, 0, 3];
    var val = await e.f241(v2/* targets */, v1/* target_nums */, v3/* consensus_type_data */);
    console.log("122g");
    var exp_vals = [1350, 7438, 74308,   47, 7728, 77028,   1885, 2020, 20020,   686, 83728, 837028,   144, 400, 4000,   67, 99, 909];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });

  /* modify_targets: modifies contract or proposal targets specified */
  xit("123. can run f243", async () => {
    //modify a contract
    console.log("123a");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000], [1, 34588, 1, 28, 1],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [1], [1], [900005], []];
    await expect(e.f243(v1/* data */, 15/* <15>modify_contract */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 0, 0, 0, 900005, 0, 40000, 1, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);


    //modify a contract
    console.log("123b");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000], [1, 34588, 1, 28, 1],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [1], [0], [1900005], []];
    await expect(e.f243(v1/* data */, 15/* <15>modify_contract */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 0, 0, 1900005, 0, 0, 40000, 1, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //modify a proposal
    console.log("123c");
    var presets = [
      [1, 34588, 0, 0, 32],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, bgN(1,28)/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 10_000],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [5], [0], [4004], []];
    await expect(e.f243(v1/* data */, 14/* <14>modify_proposal */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [32,   0, bgN(1,28), 40000,   3, 5, 4004, 3000, 34, 88,   2,  10_000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);




    //modify a proposal
    console.log("123d");
    var presets = [
      [1, 34588, 0, 0, 32],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, bgN(1,28)/* proposal_expiry_time */], [1, 34588, 1, 5, 40000/* target_contract_authority */],
      
      [1, 34588, 4, 0, 3], [1, 34588, 4, 1, 5],
      [1, 34588, 5, 0, 5000], [1, 34588, 5, 1, 3000],
      [1, 34588, 6, 0, 34], [1, 34588, 6, 1, 88],

      [3, 34588, 1, 4, 2],

      [1, 40000, 1, 27, 10_000],/* proposal_modify_expiry_duration_limit */
      
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [5], [1], [39393], []];
    await expect(e.f243(v1/* data */, 14/* <14>modify_proposal */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [32,   0, bgN(1,28), 40000,   3, 5, 5000, 39393, 34, 88,   2,  10_000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);



    //modify a contract that cant be modified as a moderator
    console.log("123e");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000], [1, 34588, 1, 28, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [1], [1], [900005], []];
    await expect(e.f243(v1/* data */, 15/* <15>modify_contract */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //modify a contract
    console.log("123f");
    var presets = [
      [1, 34588, 0, 0, 30], [1, 34588, 0, 1, 0], [1, 34588, 0, 2, 0],
      [1, 34588, 1, 0, 0], [1, 34588, 1, 1, 0], [1, 34588, 1, 2, 0], [1, 34588, 1, 5, 40000], [1, 34588, 1, 28, 0],
      [1, 34588, 2, 0, 3], [1, 34588, 2, 1, 5],
      [1, 34588, 3, 0, 5000], [1, 34588, 3, 1, 3000],

      [3, 34588, 1, 2, 2]
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588], [1], [0], [1900005], []];
    await expect(e.f243(v1/* data */, 152/* <152>modify_contract_from_consensus */)).to.not.be.reverted;

    var val = await e.read_preset_data(presets);
    var exp_vals = [30, 0, 0, 1900005, 0, 0, 40000, 0, 3, 5, 5000, 3000, 2];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.delete_preset_data(presets);

  });

  /* calculate_resulting_tokens: calculates the resulting tokens from a buy or sell action */
  xit("124. can run f246", async () => {
    
    //action buy(0), 1 exchange
    console.log("124a");
    var v1/* exchange_data */ = [[],[],[],[],[100]];
    var v2/* provided_amount_data */ = [100];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 0/* amount */, 0/* buy */);
    var expected_vals = [1];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action buy(0), 1 exchange
    console.log("124b");
    var v1/* exchange_data */ = [[],[],[],[],[200]];
    var v2/* provided_amount_data */ = [2000];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 0/* amount */, 0/* buy */);
    var expected_vals = [10];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action buy(0), 1 exchanges
    console.log("124c");
    var v1/* exchange_data */ = [[],[],[],[],[200]];
    var v2/* provided_amount_data */ = [1000];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 0/* amount */, 0/* buy */);
    var expected_vals = [5];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action buy(0), 1 exchange
    console.log("124d");
    var v1/* exchange_data */ = [[],[],[],[],[bgN(1, 69)]];
    var v2/* provided_amount_data */ = [bgN(100, 69)];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 0/* amount */, 0/* buy */);
    var expected_vals = [100];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action buy(0), 1 exchange
    console.log("124e");
    var v1/* exchange_data */ = [[],[],[],[],[1_000_000]];
    var v2/* provided_amount_data */ = [100_000_000_000];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 0/* amount */, 0/* buy */);
    var expected_vals = [100_000];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action buy(0), 2 exchanges
    console.log("124f");
    var v1/* exchange_data */ = [[],[],[],[],[1_000_000, 25]];
    var v2/* provided_amount_data */ = [100_000_000_000, 2_500_000];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 0/* amount */, 0/* buy */);
    var expected_vals = [100_000];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }



    //action buy(0), 2 exchange
    console.log("124g");
    var v1/* exchange_data */ = [[],[],[],[],[1_000_000, 700]];
    var v2/* provided_amount_data */ = [100_000_000_000, 1400];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 0/* amount */, 0/* buy */);
    var expected_vals = [2];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action buy(0), 2 exchanges
    console.log("124h");
    var v1/* exchange_data */ = [[],[],[],[],[1_000_000, 700, 3000]];
    var v2/* provided_amount_data */ = [100_000_000_000, 200, 300_000];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 0/* amount */, 0/* buy */);
    var expected_vals = [0];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action buy(0), 2 exchanges
    console.log("124i");
    var v1/* exchange_data */ = [[],[],[],[],[1_000_000, 700, 3000]];
    var v2/* provided_amount_data */ = [0, 200, 300_000];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 0/* amount */, 0/* buy */);
    var expected_vals = [0];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action sell(1), 1 exchange
    console.log("124j");
    var v1/* exchange_data */ = [[],[],[],[],[100]];
    var v2/* provided_amount_data */ = [];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 1/* amount */, 1/* sell */);
    var expected_vals = [100];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action sell(1), 1 exchange
    console.log("124k");
    var v1/* exchange_data */ = [[],[],[],[],[500]];
    var v2/* provided_amount_data */ = [];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 10/* amount */, 1/* sell */);
    var expected_vals = [5000];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action sell(1), 1 exchange
    console.log("124l");
    var v1/* exchange_data */ = [[],[],[],[],[100]];
    var v2/* provided_amount_data */ = [];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 100/* amount */, 1/* sell */);
    var expected_vals = [10000];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action sell(1), 1 exchange
    console.log("124m");
    var v1/* exchange_data */ = [[],[],[],[],[50]];
    var v2/* provided_amount_data */ = [];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 50/* amount */, 1/* sell */);
    var expected_vals = [2500];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action sell(1), 2 exchanges
    console.log("124n");
    var v1/* exchange_data */ = [[],[],[],[],[100, 500]];
    var v2/* provided_amount_data */ = [];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 1/* amount */, 1/* sell */);
    var expected_vals = [100, 500];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action sell(1), 2 exchanges
    console.log("124o");
    var v1/* exchange_data */ = [[],[],[],[],[100, 400]];
    var v2/* provided_amount_data */ = [];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 6/* amount */, 1/* sell */);
    var expected_vals = [600, 2400];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action sell(1), 2 exchanges
    console.log("124p");
    var v1/* exchange_data */ = [[],[],[],[],[bgN(5, 69), 500]];
    var v2/* provided_amount_data */ = [];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 18/* amount */, 1/* sell */);
    var expected_vals = [bgN(90, 69), 9000];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action sell(1), 3 exchanges
    console.log("124q");
    var v1/* exchange_data */ = [[],[],[],[],[bgN(5, 69), 500, 18]];
    var v2/* provided_amount_data */ = [];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 18/* amount */, 1/* sell */);
    var expected_vals = [bgN(90, 69), 9000, 324];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //action sell(1), 3 exchanges
    console.log("124r");
    var v1/* exchange_data */ = [[],[],[],[],[bgN(5, 69), 500, 18]];
    var v2/* provided_amount_data */ = [];

    var val = await e.f246(v1/* exchange_data */, v2/* provided_amount_data */, 0/* amount */, 1/* sell */);
    var expected_vals = [0, 0, 0];
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }

  });





  /* calculate_price_of_tokens: calculates the price for buying or selling tokens from specified exchanges */
  xit("125. can run f245", async () => {
    //1 exchange
    console.log("125a");
    var v1/* exchanges */ = [1002];
    var v2/* amounts */ = [[100]];
    var v3/* actions */ = [0];
    var v4/* exchange_data */ = [
     [[0,0,0,5],[],[10000, 10000],[],[100]],
    ]

    var val = await e.f245(v1/* exchanges */, v2/* amounts */, v3/* actions */, v4/* exchange_data */);
    var expected_vals = [1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //1 exchange
    console.log("125b");
    var v1/* exchanges */ = [1002];
    var v2/* amounts */ = [[1000]];
    var v3/* actions */ = [0];
    var v4/* exchange_data */ = [
     [[0,0,0,5],[],[10000, 10000],[],[100]],
    ]

    var val = await e.f245(v1/* exchanges */, v2/* amounts */, v3/* actions */, v4/* exchange_data */);
    var expected_vals = [10];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //1 exchange
    console.log("125c");
    var v1/* exchanges */ = [1002];
    var v2/* amounts */ = [[10000]];
    var v3/* actions */ = [0];
    var v4/* exchange_data */ = [
     [[0,0,0,5],[],[10000, 10000],[],[100]],
    ]

    var val = await e.f245(v1/* exchanges */, v2/* amounts */, v3/* actions */, v4/* exchange_data */);
    var expected_vals = [100];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //1 exchange
    console.log("125d");
    var v1/* exchanges */ = [1002];
    var v2/* amounts */ = [[10000]];
    var v3/* actions */ = [0];
    var v4/* exchange_data */ = [
     [[0,0,0,5],[],[10000, 100000],[],[100]],
    ]

    var val = await e.f245(v1/* exchanges */, v2/* amounts */, v3/* actions */, v4/* exchange_data */);
    var expected_vals = [10];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //1 exchange
    console.log("125e");
    var v1/* exchanges */ = [1002];
    var v2/* amounts */ = [[1]];
    var v3/* actions */ = [1];
    var v4/* exchange_data */ = [
     [[0,0,0,5],[],[1000, 10000],[],[100]],
    ]

    var val = await e.f245(v1/* exchanges */, v2/* amounts */, v3/* actions */, v4/* exchange_data */);
    var expected_vals = [1000];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //1 exchange
    console.log("125f");
    var v1/* exchanges */ = [1002];
    var v2/* amounts */ = [[100]];
    var v3/* actions */ = [1];
    var v4/* exchange_data */ = [
     [[0,0,0,5],[],[10000, 10000],[],[100]],
    ]

    var val = await e.f245(v1/* exchanges */, v2/* amounts */, v3/* actions */, v4/* exchange_data */);
    var expected_vals = [10000];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //1 exchange
    console.log("125g");
    var v1/* exchanges */ = [1002];
    var v2/* amounts */ = [[100]];
    var v3/* actions */ = [1];
    var v4/* exchange_data */ = [
     [[0,0,0,5],[],[10000, 10000],[],[100, 10]],
    ]

    var val = await e.f245(v1/* exchanges */, v2/* amounts */, v3/* actions */, v4/* exchange_data */);
    var expected_vals = [10000, 1000];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //1 exchange
    console.log("125h");
    var v1/* exchanges */ = [1002];
    var v2/* amounts */ = [[100]];
    var v3/* actions */ = [1];
    var v4/* exchange_data */ = [
     [[0,0,0,5],[],[10000, 10000],[],[100, 1]],
    ]

    var val = await e.f245(v1/* exchanges */, v2/* amounts */, v3/* actions */, v4/* exchange_data */);
    var expected_vals = [10000, 100];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //2 exchanges
    console.log("125i");
    var v1/* exchanges */ = [1002, 1003];
    var v2/* amounts */ = [[100], [100]];
    var v3/* actions */ = [1, 1];
    var v4/* exchange_data */ = [
     [[0,0,0,5],[],[10000, 10000],[],[100, 1]],
     [[0,0,0,5],[],[10000, 10000],[],[5]]
    ]

    var val = await e.f245(v1/* exchanges */, v2/* amounts */, v3/* actions */, v4/* exchange_data */);
    var expected_vals = [10000, 100,  500];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //3 exchanges
    console.log("125j");
    var v1/* exchanges */ = [1002, 1003, 1004];
    var v2/* amounts */ = [[100], [100], [200, 1000]];
    var v3/* actions */ = [1, 1, 0];
    var v4/* exchange_data */ = [
     [[0,0,0,5],[],[10000, 10000],[],[100, 1]],
     [[0,0,0,5],[],[10000, 10000],[],[5]],
     [[0,0,0,5],[],[10000, 10000],[],[20, 100]]
    ]

    var val = await e.f245(v1/* exchanges */, v2/* amounts */, v3/* actions */, v4/* exchange_data */);
    var expected_vals = [10000, 100,  500, 10];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }



    //4 exchanges
    console.log("125k");
    var v1/* exchanges */ = [1002, 1003, 1004, 1005];
    var v2/* amounts */ = [[100], [100], [200, 1000], [100, 200, 300]];
    var v3/* actions */ = [1, 1, 0, 0];
    var v4/* exchange_data */ = [
     [[0,0,0,5],[],[10000, 10000],[],[100, 1]],
     [[0,0,0,5],[],[10000, 10000],[],[5]],
     [[0,0,0,5],[],[10000, 10000],[],[20, 100]],
     [[0,0,0,5],[],[10000, 10000],[],[100, 200, 300]]
    ]

    var val = await e.f245(v1/* exchanges */, v2/* amounts */, v3/* actions */, v4/* exchange_data */);
    var expected_vals = [10000, 100,  500, 10, 1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //5 exchanges
    console.log("125l");
    var v1/* exchanges */ = [1002, 1003, 1004, 1005, 1006];
    var v2/* amounts */ = [[100], [100], [200, 1000], [100, 200, 300], [bgN(3, 65), bgN(4, 65), 50]];
    var v3/* actions */ = [1, 1, 0, 0, 0];
    var v4/* exchange_data */ = [
     [[0,0,0,5],[],[10000, 10000],[],[100, 1]],
     [[0,0,0,5],[],[10000, 10000],[],[5]],
     [[0,0,0,5],[],[10000, 10000],[],[20, 100]],
     [[0,0,0,5],[],[10000, 10000],[],[100, 200, 300]],
     [[0,0,0,5],[],[10000, 10000],[],[bgN(3, 65), bgN(4, 65), 50]]
    ]

    var val = await e.f245(v1/* exchanges */, v2/* amounts */, v3/* actions */, v4/* exchange_data */);
    var expected_vals = [10000, 100,  500, 10, 1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }



    //5 exchanges
    console.log("125m");
    var v1/* exchanges */ = [1002, 1003, 1004, 1005, 1006];
    var v2/* amounts */ = [[100], [100], [200, 1000], [100, 200, 300], [bgN(3, 65), bgN(4, 65), 5]];
    var v3/* actions */ = [1, 1, 0, 0, 0];
    var v4/* exchange_data */ = [
     [[0,0,0,5],[],[10000, 10000],[],[100, 1]],
     [[0,0,0,5],[],[10000, 10000],[],[5]],
     [[0,0,0,5],[],[10000, 10000],[],[20, 100]],
     [[0,0,0,5],[],[10000, 10000],[],[100, 200, 300]],
     [[0,0,0,5],[],[10000, 10000],[],[bgN(3, 65), bgN(4, 65), 50]]
    ]

    var val = await e.f245(v1/* exchanges */, v2/* amounts */, v3/* actions */, v4/* exchange_data */);
    var expected_vals = [10000, 100,   500,   10, 1, 0];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }

  });

  /* set_up_mock_data: sets up mock data array for calculating mint limits */
  xit("126. can run f248", async () => {
    //1 exchange
    console.log("126a");
    var v1/* exchanges */ = [1002];
    var v2/* exchange_data */ = [
     [[0,0,0,5],[100044],[10000, 10000],[],[100, 1]],
    ];

    var val = await e.f248(v1/* exchanges */, v2/* exchange_data */);
    var expected_vals = [0, 1002, 100044, 0, 0];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //1 exchange
    console.log("126b");
    var v1/* exchanges */ = [100332];
    var v2/* exchange_data */ = [
     [[0,0,0,5],[1003044],[10000, 10000],[],[100, 1]],
    ];

    var val = await e.f248(v1/* exchanges */, v2/* exchange_data */);
    var expected_vals = [0, 100332, 1003044, 0, 0];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //1 exchange
    console.log("126c");
    var v1/* exchanges */ = [3030302];
    var v2/* exchange_data */ = [
     [[0,0,0,5],[392011],[10000, 10000],[],[100, 1]],
    ];

    var val = await e.f248(v1/* exchanges */, v2/* exchange_data */);
    var expected_vals = [0, 3030302, 392011, 0, 0];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //2 exchange
    console.log("126d");
    var v1/* exchanges */ = [1002, 292010];
    var v2/* exchange_data */ = [
     [[0,0,0,5],[100044],[10000, 10000],[],[100, 1]],
     [[0,0,0,5],[1003044],[10000, 10000],[],[100, 1]],
    ];

    var val = await e.f248(v1/* exchanges */, v2/* exchange_data */);
    var expected_vals = [0,0,  1002,292010,  100044,1003044, 0,0,  0,0];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //3 exchange
    console.log("126e");
    var v1/* exchanges */ = [1002, 292010, 999403];
    var v2/* exchange_data */ = [
     [[0,0,0,5],[100044],[10000, 10000],[],[100, 1]],
     [[0,0,0,5],[1003044],[10000, 10000],[],[100, 1]],
     [[0,0,0,5],[9302911],[10000, 10000],[],[100, 1]],
    ];

    var val = await e.f248(v1/* exchanges */, v2/* exchange_data */);
    var expected_vals = [0,0,0,  1002,292010,999403,  100044,1003044,9302911, 0,0,0,  0,0,0];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }

  });

  /* update_mock_reduction_proportion_ratios: updates the reduction proportion ratio values in the exchange data arrays for calculating the mint limits in given exchanges  */
  xit("127. can run f249", async () => {
    //1 exchange
    console.log("127a");
    var v1/* data */ = [[0],[1004],[],[],[]];
    var v2/* exchange_data */ = [
     [[0,0,0,5],[0,1000_000],[0, 0, 0, 0, 0, 0, bgN(90, 16), 1],[],[]],
    ];
    var v3/* new_ratios */ = [bgN(95,16)];
    
    var val = await e.f249(v1/* data */, v2/* exchange_data */, v3/* new_ratios */);
    var expected_vals = [0,0,0,5, 0,1000_000,  0,0,0,0,0,0,bgN(95, 16),1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //1 exchange
    console.log("127b");
    var v1/* data */ = [[0],[1004],[],[],[]];
    var v2/* exchange_data */ = [
     [[0,0,0,5],[0,1000_000],[0, 0, 0, 0, 0, 0, bgN(9, 16), 2],[],[]],
    ];
    var v3/* new_ratios */ = [bgN(5,16)];
    
    var val = await e.f249(v1/* data */, v2/* exchange_data */, v3/* new_ratios */);
    var expected_vals = [0,0,0,5, 0,1000_000,  0,0,0,0,0,0,bgN(5, 16),2];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //1 exchange
    console.log("127c");
    var v1/* data */ = [[0],[1004],[],[],[]];
    var v2/* exchange_data */ = [
     [[0,0,0,5],[0,1000_000],[0, 0, 0, 0, 0, 0, bgN(98, 16), 1],[],[]],
    ];
    var v3/* new_ratios */ = [bgN(45,16)];
    
    var val = await e.f249(v1/* data */, v2/* exchange_data */, v3/* new_ratios */);
    var expected_vals = [0,0,0,5, 0,1000_000,  0,0,0,0,0,0,bgN(45, 16),1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }



    //2 exchanges
    console.log("127d");
    var v1/* data */ = [[0,0],[1004,1005],[],[],[]];
    var v2/* exchange_data */ = [
     [[0,0,0,5],[0,1000_000],[0, 0, 0, 0, 0, 0, bgN(90, 16), 1],[],[]],
     [[0,0,0,5],[0,1000_000],[0, 0, 0, 0, 0, 0, bgN(9, 16), 15],[],[]],
    ];
    var v3/* new_ratios */ = [bgN(95,16), bgN(39,16)];
    
    var val = await e.f249(v1/* data */, v2/* exchange_data */, v3/* new_ratios */);
    var expected_vals = [
      0,0,0,5, 0,1000_000,  0,0,0,0,0,0,bgN(95, 16),1,
      0,0,0,5, 0,1000_000,  0,0,0,0,0,0,bgN(39, 16),15
    ];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //3 exchanges
    console.log("127e");
    var v1/* data */ = [[0,0,0],[1004,1005,1007],[],[],[]];
    var v2/* exchange_data */ = [
     [[0,0,0,5],[0,1000_000],[0, 0, 0, 0, 0, 0, bgN(90, 16), 1],[],[]],
     [[0,0,0,5],[0,1000_000],[0, 0, 0, 0, 0, 0, bgN(9, 16), 15],[],[]],
     [[0,0,0,5],[0,100000],[0, 0, 0, 0, 0, 0, bgN(44, 16), 105],[],[]],
    ];
    var v3/* new_ratios */ = [bgN(95,16), bgN(39,16), bgN(74,16)];
    
    var val = await e.f249(v1/* data */, v2/* exchange_data */, v3/* new_ratios */);
    var expected_vals = [
      0,0,0,5, 0,1000_000,  0,0,0,0,0,0,bgN(95, 16),1,
      0,0,0,5, 0,1000_000,  0,0,0,0,0,0,bgN(39, 16),15,
      0,0,0,5, 0,100000,  0,0,0,0,0,0,bgN(74,16),105
    ];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //3 exchanges
    console.log("127f");
    var v1/* data */ = [[0,0,0],[1004,1005,1007],[],[],[]];
    var v2/* exchange_data */ = [
     [[0,0,0,3],[0,1000_000],[0, 0, 0, 0, 0, 0, bgN(83, 16), 1],[],[]],
     [[0,0,0,5],[0,1000_000],[0, 0, 0, 0, 0, 0, bgN(9, 16), 15],[],[]],
     [[0,0,0,5],[0,100000],[0, 0, 0, 0, 0, 0, bgN(44, 16), 105],[],[]],
    ];
    var v3/* new_ratios */ = [bgN(95,16), bgN(39,16), bgN(74,16)];
    
    var val = await e.f249(v1/* data */, v2/* exchange_data */, v3/* new_ratios */);
    var expected_vals = [
      0,0,0,3, 0,1000_000,  0,0,0,0,0,0,bgN(83, 16),1,
      0,0,0,5, 0,1000_000,  0,0,0,0,0,0,bgN(39, 16),15,
      0,0,0,5, 0,100000,  0,0,0,0,0,0,bgN(74,16),105
    ];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }



    //3 exchanges
    console.log("127g");
    var v1/* data */ = [[0,0,0],[1004,1005,1007],[],[],[]];
    var v2/* exchange_data */ = [
     [[0,0,0,5],[0,1000_000],[0, 0, 0, 0, 0, 0, bgN(90, 16), 1],[],[]],
     [[0,0,0,5],[0,0],[0, 0, 0, 0, 0, 0, bgN(9, 16), 15],[],[]],
     [[0,0,0,5],[0,100000],[0, 0, 0, 0, 0, 0, bgN(44, 16), 105],[],[]],
    ];
    var v3/* new_ratios */ = [bgN(95,16), bgN(39,16), bgN(74,16)];
    
    var val = await e.f249(v1/* data */, v2/* exchange_data */, v3/* new_ratios */);
    var expected_vals = [
      0,0,0,5, 0,1000_000,  0,0,0,0,0,0,bgN(95, 16),1,
      0,0,0,5, 0,0,  0,0,0,0,0,0,bgN(9, 16),15,
      0,0,0,5, 0,100000,  0,0,0,0,0,0,bgN(74,16),105
    ];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    
  });




  /* calculate_mock_tokens_to_receive: calculates the tokens set to be received from specified target exchanges */
  xit("128. can run f250", async () => {
    //1 exchange
    console.log("128a");
    var block = e.get_block();
    var v1/* data */ = [[0],[1004],[bgN(35, 6)],[0],[0]];
    var v2/* exchange_data */ = [
     [
       [0, 0, 0, 5], 
       [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], 
       [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], 
       [0], [0]
      ],
    ];
    
    var val = await e.f250(v1/* data */, v2/* exchange_data */);
    var expected_vals = [bgN(35, 6)];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //1 exchange
    console.log("128b");
    var block = e.get_block();
    var v1/* data */ = [[0],[1004],[bgN(30, 6)],[0],[0]];
    var v2/* exchange_data */ = [
     [
       [0, 0, 0, 5], 
       [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], 
       [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, block, bgN(100, 16)], 
       [0], [0]
      ],
    ];
    
    var val = await e.f250(v1/* data */, v2/* exchange_data */);
    var expected_vals = [bgN(30, 6)];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //1 exchange
    console.log("128c");
    var block = e.get_block();
    var v1/* data */ = [[0],[1004],[bgN(10, 6)],[0],[0]];
    var v2/* exchange_data */ = [
     [
       [0, 0, 0, 5], 
       [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], 
       [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, block, bgN(80, 16)], 
       [0], [0]
      ],
    ];
    
    var val = await e.f250(v1/* data */, v2/* exchange_data */);
    var expected_vals = [bgN(8, 6)];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //1 exchange
    console.log("128d");
    var block = e.get_block();
    var v1/* data */ = [[0],[1004],[bgN(10, 6)],[0],[0]];
    var v2/* exchange_data */ = [
     [
       [0, 0, 0, 5], 
       [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], 
       [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, block, bgN(10, 16)], 
       [0], [0]
      ],
    ];
    
    var val = await e.f250(v1/* data */, v2/* exchange_data */);
    var expected_vals = [bgN(1, 6)];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }



    //2 exchanges
    console.log("128e");
    var block = e.get_block();
    var v1/* data */ = [[0,0],[1004,1005],[bgN(10, 6), bgN(100, 6)],[0,0],[0,0]];
    var v2/* exchange_data */ = [
     [
       [0, 0, 0, 5], 
       [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], 
       [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, block, bgN(80, 16)], 
       [0], [0]
      ],
      [
       [0, 0, 0, 5], 
       [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], 
       [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, block, bgN(44, 16)], 
       [0], [0]
      ],
    ];
    
    var val = await e.f250(v1/* data */, v2/* exchange_data */);
    var expected_vals = [bgN(8, 6), bgN(44, 6)];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }

  });

  /* scan_num(REMOVED): scans the num storage object for data */
  xit("129. can run f207", async () => {
    //scan 1 object
    console.log("129a");
    var presets = [
      [1, 34588, 0, 0, 30], 
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588, 0, 0]];
    var val = await e.f207(v1/* data */);
    var expected_vals = [30];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);


    //scan 1 object
    console.log("129b");
    var presets = [
      [1, 9002, 0, 1, 44], 
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[9002, 0, 1]];
    var val = await e.f207(v1/* data */);
    var expected_vals = [44];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 1 object
    console.log("129c");
    var presets = [
      [1, 34588, 10, 0, 39], 
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588, 10, 0]];
    var val = await e.f207(v1/* data */);
    var expected_vals = [39];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 2 objects
    console.log("129d");
    var presets = [
      [1, 34588, 0, 0, 30], 
      [1, 930392, 5, 3, 4029],
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588, 0, 0], [930392, 5, 3]];
    var val = await e.f207(v1/* data */);
    var expected_vals = [30, 4029];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* get_consensus_collect_subscription_payers_data: sets the collect subscription from consensus data */
  xit("130. can run f253", async () => {
    console.log("130a");
    var v1/* temp_transaction_data_group */ = [[],[],[]];
    var v2/* ints */ = [
     [ [0, 0, 3, 5, 0, 0],[],[], [1, 2, 3], [44, 55, 66], [770, 880, 990] ]
    ];
    
    var val = await e.f253(v1/* temp_transaction_data_group */, 0, v2/* ints */, [], []);
    var expected_vals = [1, 2, 3,  44, 55, 66,  770, 880, 990];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    console.log("130b");
    var v1/* temp_transaction_data_group */ = [[],[],[]];
    var v2/* ints */ = [
     [ [0, 0, 3, 4, 0, 0],[],[], [1, 2, 3], [44, 55, 66] ]
    ];
    
    var val = await e.f253(v1/* temp_transaction_data_group */, 0, v2/* ints */, [], []);
    var expected_vals = [1, 2, 3,  44, 55, 66];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    console.log("130c");
    var v1/* temp_transaction_data_group */ = [[],[],[]];
    var v2/* ints */ = [
     [ [0, 0, 3, 4, 0, 0],[],[], [1, 2, 3, 4, 56], [770, 880, 990] ]
    ];
    
    var val = await e.f253(v1/* temp_transaction_data_group */, 0, v2/* ints */, [], []);
    var expected_vals = [1, 2, 3, 4, 56,  770, 880, 990];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }



    console.log("130d");
    var v1/* temp_transaction_data_group */ = [[],[],[]];
    var v2/* ints */ = [
     [ [0, 0, 3, 6, 0, 0],[],[], [11111, 2, 3], [44, 55, 66], [7702, 8802, 9903], [40928, 499, 0, 44] ]
    ];
    
    var val = await e.f253(v1/* temp_transaction_data_group */, 0, v2/* ints */, [], []);
    var expected_vals = [11111, 2, 3,  44, 55, 66,  7702, 8802, 9903,  40928, 499, 0, 44];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    console.log("130e");
    var v1/* temp_transaction_data_group */ = [[],[],[]];
    var v2/* ints */ = [
     [ [0, 0, 3, 3, 0, 0],[],[], [1, 2, 3] ]
    ];
    
    var val = await e.f253(v1/* temp_transaction_data_group */, 0, v2/* ints */, [], []);
    var expected_vals = [1, 2, 3];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }



    console.log("130f");
    var v1/* temp_transaction_data_group */ = [[],[],[]];
    var v2/* ints */ = [
      [ [0, 0/* 1 */,  0, 0/* 3 */,  3, 6],[],[], [1, 2, 3], [44, 55, 6], [2, 45, 33], [3, 2, 1] ]
    ];
    
    var val = await e.f253(v1/* temp_transaction_data_group */, 0, v2/* ints */, [], []);
    var expected_vals = [1, 2, 3, 2, 45, 33,   44, 55, 6, 3, 2, 1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    console.log("130g");
    var v1/* temp_transaction_data_group */ = [[],[],[]];
    var v2/* ints */ = [
     [ [0, 0,  3, 3,  4, 7],[],[], [1, 2, 3], [44, 55], [2, 45], [443, 595], [22, 145] ]
    ];
    
    var val = await e.f253(v1/* temp_transaction_data_group */, 0, v2/* ints */, [], []);
    var expected_vals = [1, 2, 3,  44, 55, 443, 595,  2, 45, 22, 145];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }



    console.log("130h");
    var v1/* temp_transaction_data_group */ = [[],[],[]];
    var v2/* ints */ = [
     [ [0, 0,  3, 5,  6, 9],[],[], [1, 2, 3], [13, 23, 33], [15, 25, 36], [44, 55], [2, 495], [4403, 595], [202, 145] ]
    ];
    
    var val = await e.f253(v1/* temp_transaction_data_group */, 0, v2/* ints */, [], []);
    var expected_vals = [1, 2, 3, 13, 23, 33, 15, 25, 36,   44, 55, 4403, 595,  2, 495, 202, 145];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    
  });




  /* get_collect_subscription_targets_count: creates the data array with the specified size as number of subscription targets */
  xit("131. can run f252", async () => {
    //size 3, 3, 3
    var v1/* consensus_type_data */ = [0,0,0, 0,0,0, 0,0/* 7 */, 3,3,3, 0,0,0,0,0,0,0,0,0];
    var val = await e.f252(v1/* consensus_type_data */);
    console.log("131a");
    var exp_vals = [3,3,0,  3,3,3,  3,3,3];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 5, 5, 5
    var v1/* consensus_type_data */ = [0,0,0, 0,0,0, 0,0/* 7 */, 5,5,5, 0,0,0,0,0,0,0,0,0];
    var val = await e.f252(v1/* consensus_type_data */);
    console.log("131b");
    var exp_vals = [5,5,0,  5,5,5,  5,5,5];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 5, 8, 4
    var v1/* consensus_type_data */ = [0,0,0, 0,0,0, 0,0/* 7 */, 5,8,4, 0,0,0,0,0,0,0,0,0];
    var val = await e.f252(v1/* consensus_type_data */);
    console.log("131c");
    var exp_vals = [5,5,0,  8,8,8,  4,4,4];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 35, 18, 24
    var v1/* consensus_type_data */ = [0,0,0, 0,0,0, 0,0/* 7 */, 35,18,24, 0,0,0,0,0,0,0,0,0];
    var val = await e.f252(v1/* consensus_type_data */);
    console.log("131d");
    var exp_vals = [35,35,0,  18,18,18,  24,24,24];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 0, 1, 0
    var v1/* consensus_type_data */ = [0,0,0, 0,0,0, 0,0/* 7 */, 0,1,0, 0,0,0,0,0,0,0,0,0];
    var val = await e.f252(v1/* consensus_type_data */);
    console.log("131e");
    var exp_vals = [0,0,0,  1,1,1,  0,0,0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 0, 1, 0
    var v1/* consensus_type_data */ = [0,0,0, 0,0,0, 0,0/* 7 */, 0,0,0, 0,0,0,0,0,0,0,0,0];
    var val = await e.f252(v1/* consensus_type_data */);
    console.log("131f");
    var exp_vals = [0,0,0,  0,0,0,  0,0,0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

  });

  /* get_collect_subscription_data: creates and sets the data from proposal objects for submitting collect subscription actions */
  xit("132. can run f251", async () => {
    //1 collect action
    var v1/* target_nums */ = [
      [[0], [8, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], []/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0,0,0,0, 1,0,0, 0,0,0,0,0,0,0,0,0,0];
    var val = await e.f251(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("132a");
    var exp_vals = [350, 67];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //1 collect action
    var v1/* target_nums */ = [
      [[0], [8, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [3450], []/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0,0,0,0, 1,0,0, 0,0,0,0,0,0,0,0,0,0];
    var val = await e.f251(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("132b");
    var exp_vals = [3450, 67];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //1 collect action
    var v1/* target_nums */ = [
      [[0], [8, 0, 0, 0, 0, 2020/* 5 */, 0, 0, 0, 0], [0], [0],  [99], []/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0,0,0,0, 1,0,0, 0,0,0,0,0,0,0,0,0,0];
    var val = await e.f251(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("132c");
    var exp_vals = [99, 2020];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //1 collect action, 2 targets
    var v1/* target_nums */ = [
      [[0], [8, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350, 456], []/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0,0,0,0, 2,0,0, 0,0,0,0,0,0,0,0,0,0];
    var val = await e.f251( v1/* target_nums */, v3/* consensus_type_data */);
    console.log("132d");
    var exp_vals = [350, 456,  67, 67];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //1 collect action, 3 targets
    var v1/* target_nums */ = [
      [[0], [8, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350, 33, 22], []/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0,0,0,0, 3,0,0, 0,0,0,0,0,0,0,0,0,0];
    var val = await e.f251(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("132e");
    var exp_vals = [350, 33, 22,   67, 67, 67];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //2 collect actions
    var v1/* target_nums */ = [
      [[0], [8, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], []/* 5 */, [], [], []],
      [[0], [8, 0, 0, 0, 0, 302/* 5 */, 0, 0, 0, 0], [0], [0],  [450], []/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0,0,0,0, 2,0,0, 0,0,0,0,0,0,0,0,0,0];
    var val = await e.f251(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("132f");
    var exp_vals = [350, 450,  67, 302];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //3 collect actions
    var v1/* target_nums */ = [
      [[0], [8, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], []/* 5 */, [], [], []],
      [[0], [8, 0, 0, 0, 0, 302/* 5 */, 0, 0, 0, 0], [0], [0],  [450], []/* 5 */, [], [], []],
      [[0], [8, 0, 0, 0, 0, 3020/* 5 */, 0, 0, 0, 0], [0], [0],  [450, 44, 66], []/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0,0,0,0, 5,0,0, 0,0,0,0,0,0,0,0,0,0];
    var val = await e.f251(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("132g");
    var exp_vals = [350, 450, 450, 44, 66,   67, 302, 3020, 3020, 3020];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //2 collect actions
    var v1/* target_nums */ = [
      [[0], [8, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], []/* 5 */, [], [], []],
      [[0], [7, 0, 0, 0, 0, 302/* 5 */, 0, 0, 0, 0], [0], [0],  [450], []/* 5 */, [], [], []],
      [[0], [8, 0, 0, 0, 0, 302/* 5 */, 0, 0, 0, 0], [0], [0],  [450], []/* 5 */, [], [], []],
      [[0], [4, 0, 0, 0, 0, 302/* 5 */, 0, 0, 0, 0], [0], [0],  [450], []/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0,0,0,0, 2,0,0, 0,0,0,0,0,0,0,0,0,0];
    var val = await e.f251(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("132h");
    var exp_vals = [350, 450,  67, 302];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //2 collect actions, 1 pay action
    var v1/* target_nums */ = [
      [[0], [8, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], []/* 5 */, [], [], []],
      [[0], [7, 0, 0, 0, 0, 302/* 5 */, 0, 0, 0, 0], [0], [0],  [450], []/* 5 */, [], [], []],
      [[0], [8, 0, 0, 0, 0, 302/* 5 */, 0, 0, 0, 0], [0], [0],  [450], []/* 5 */, [], [], []],
      [[0], [9, 0, 0, 0, 0, 3102/* 5 */, 0, 0, 0, 0], [0], [0],  [45022], [1001]/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0,0,0,0, 2,1,0, 0,0,0,0,0,0,0,0,0,0];
    var val = await e.f251(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("132i");
    var exp_vals = [
      350, 450,  67, 302,
      45022,  3102, 1001
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //2 collect actions, 2 pay action, 1 cancel action
    var v1/* target_nums */ = [
      [[0], [8, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], []/* 5 */, [], [], []],
      [[0], [10, 0, 0, 0, 0, 302/* 5 */, 0, 0, 0, 0], [0], [0],  [1933], [403]/* 5 */, [], [], []],
      [[0], [8, 0, 0, 0, 0, 302/* 5 */, 0, 0, 0, 0], [0], [0],  [450], []/* 5 */, [], [], []],
      [[0], [9, 0, 0, 0, 0, 3102/* 5 */, 0, 0, 0, 0], [0], [0],  [45022], [1001]/* 5 */, [], [], []],
      [[0], [9, 0, 0, 0, 0, 31042/* 5 */, 0, 0, 0, 0], [0], [0],  [145022], [11001]/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0,0,0,0, 2,2,1, 0,0,0,0,0,0,0,0,0,0];
    var val = await e.f251(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("132j");
    var exp_vals = [
      350, 450,  67,  302,
      45022, 145022,  3102, 31042,  1001, 11001,
      1933,  302,  403
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //2 collect actions, 2 pay actions, 2 cancel actions
    var v1/* target_nums */ = [
      [[0], [8, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], []/* 5 */, [], [], []],
      [[0], [10, 0, 0, 0, 0, 302/* 5 */, 0, 0, 0, 0], [0], [0],  [1933], [403]/* 5 */, [], [], []],
      [[0], [8, 0, 0, 0, 0, 302/* 5 */, 0, 0, 0, 0], [0], [0],  [450], []/* 5 */, [], [], []],
      [[0], [9, 0, 0, 0, 0, 3102/* 5 */, 0, 0, 0, 0], [0], [0],  [45022], [1001]/* 5 */, [], [], []],
      [[0], [9, 0, 0, 0, 0, 31042/* 5 */, 0, 0, 0, 0], [0], [0],  [145022], [11001]/* 5 */, [], [], []],
      [[0], [10, 0, 0, 0, 0, 3052/* 5 */, 0, 0, 0, 0], [0], [0],  [19533], [4503]/* 5 */, [], [], []],
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0,0,0,0, 2,2,2, 0,0,0,0,0,0,0,0,0,0];
    var val = await e.f251(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("132k");
    var exp_vals = [
      350, 450,  67,  302,
      45022, 145022,  3102, 31042,  1001, 11001,
      1933, 19533,  302, 3052,  403, 4503
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }




    //2 collect actions
    var v1/* target_nums */ = [
      [[0], [9, 0, 0, 0, 0, 697/* 5 */, 0, 0, 0, 0], [0], [0],  [1004, 1005], [100, 100]/* 5 */, [], [], []],
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0,0,0,0, 0,2,0, 0,0,0,0,0,0,0,0,0,0];
    var val = await e.f251(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("132l");
    var exp_vals = [1004, 1005,  697, 697,  100, 100];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

  });

  /* scan_int_int_int: scans the int_int_int storage object for data in the g52 contract */
  xit("133. can run f167", async () => {
    //scan 1 object
    console.log("133a");
    var presets = [
      [2, 34588, 0, 0, 303], 
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588, 0, 0]];
    var val = await e.f167(v1/* data */);
    var expected_vals = [303];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);


    //scan 1 object
    console.log("133b");
    var presets = [
      [2, 9002, 0, 1, 4433], 
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[9002, 0, 1]];
    var val = await e.f167(v1/* data */);
    var expected_vals = [4433];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 1 object
    console.log("133c");
    var presets = [
      [2, 34588, 10, 0, 39], 
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588, 10, 0]];
    var val = await e.f167(v1/* data */);
    var expected_vals = [39];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 2 objects
    console.log("133d");
    var presets = [
      [2, 34588, 0, 0, 303], 
      [2, 930392, 5, 3, 4029],
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [[34588, 0, 0], [930392, 5, 3]];
    var val = await e.f167(v1/* data */);
    var expected_vals = [303, 4029];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  


  /* get_interactible_checker_settings: scans the interactible checker settings if access rights have been enabled for one or multiple targets specified */
  xit("134. can run f254", async () => {
    //scan 1 object
    console.log("134a");
    var presets = [
      [1, 34588, 0, 1, 1], 
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [34588];
    var val = await e.f254(v1/* data */);
    var expected_vals = [true];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);


    //scan 1 object
    console.log("134b");
    var presets = [
      [1, 77392, 0, 1, 1], 
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [77392];
    var val = await e.f254(v1/* data */);
    var expected_vals = [true];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 2 objects
    console.log("134c");
    var presets = [
      [1, 77392, 0, 1, 1], 
      [1, 4490, 0, 1, 1], 
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [77392, 4490];
    var val = await e.f254(v1/* data */);
    var expected_vals = [true, true];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 3 objects
    console.log("134d");
    var presets = [
      [1, 77392, 0, 1, 1], 
      [1, 4490, 0, 1, 1], 
      [1, 83928, 0, 1, 1],
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [77392, 4490, 83928];
    var val = await e.f254(v1/* data */);
    var expected_vals = [true, true, true];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 3 objects, one checker turned off
    console.log("134e");
    var presets = [
      [1, 77392, 0, 1, 1], 
      [1, 4490, 0, 1, 0], 
      [1, 83928, 0, 1, 1],
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [77392, 4490, 83928];
    var val = await e.f254(v1/* data */);
    var expected_vals = [true, false, true];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 3 objects, two turned off
    console.log("134f");
    var presets = [
      [1, 77392, 0, 1, 1], 
      [1, 4490, 0, 1, 0], 
      [1, 83928, 0, 1, 1],
      [1, 83944, 0, 1, 0],
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [77392, 4490, 83928, 83944];
    var val = await e.f254(v1/* data */);
    var expected_vals = [true, false, true, false];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    /* get_auth_privelages_setting */
    //scan 1 object
    console.log("134g");
    var presets = [
      [1, 34588, 0, 2, 1], 
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [34588];
    var val = await e.f2542(v1/* data */);
    var expected_vals = [true];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);


    /* scan 4 objects, two auth privelages turned on */
    console.log("134g");
    var presets = [
      [1, 77392, 0, 2, 1], 
      [1, 4490, 0, 2, 0], 
      [1, 83928, 0, 2, 1],
      [1, 83944, 0, 2, 0],
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [77392, 4490, 83928, 83944];
    var val = await e.f2542(v1/* data */);
    var expected_vals = [true, false, true, false];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 3 objects, one checker turned off
    console.log("134h");
    var presets = [
      [1, 77392, 0, 2, 1], 
      [1, 4490, 0, 2, 0], 
      [1, 83928, 0, 2, 1],
    ];
    await e.set_preset_data(presets);
    var v1/* data */ = [77392, 4490, 83928];
    var val = await e.f2542(v1/* data */);
    var expected_vals = [true, false, true];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* get_moderator_settings: checks if the specified accounts are moderators of a given set of targets */
  xit("135. can run f255", async () => {
    //scan 1 target, 1 account
    console.log("135a");
    var presets = [
      [1, 34588, 1, 40002, 1], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    var v2/* accounts */ = [[40002]];
    var val = await e.f255(v1/* data */, v2/* accounts */);
    var expected_vals = [true];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);


    //scan 1 target, 1 account
    console.log("135b");
    var presets = [
      [1, 345884, 1, 400021, 1], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [345884];
    var v2/* accounts */ = [[400021]];
    var val = await e.f255(v1/* data */, v2/* accounts */);
    var expected_vals = [true];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 1 target, 2 accounts
    console.log("135c");
    var presets = [
      [1, 34588, 1, 40002, 1], 
      [1, 34588, 1, 400023, 1],
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    var v2/* accounts */ = [[40002, 400023]];
    var val = await e.f255(v1/* data */, v2/* accounts */);
    var expected_vals = [true, true];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 1 target, 3 accounts
    console.log("135d");
    var presets = [
      [1, 34588, 1, 40002, 1], 
      [1, 34588, 1, 400023, 1],
      [1, 34588, 1, 84929, 1],
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    var v2/* accounts */ = [[40002, 400023, 84929]];
    var val = await e.f255(v1/* data */, v2/* accounts */);
    var expected_vals = [true, true, true];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);


    //scan 1 target, 3 accounts
    console.log("135e");
    var presets = [
      [1, 34588, 1, 40002, 1], 
      [1, 34588, 1, 400023, 0],
      [1, 34588, 1, 84929, 1],
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    var v2/* accounts */ = [[40002, 400023, 84929]];
    var val = await e.f255(v1/* data */, v2/* accounts */);
    var expected_vals = [true, false, true];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 1 target, 3 accounts
    console.log("135f");
    var presets = [
      [1, 34588, 1, 40002, 1], 
      [1, 34588, 1, 400023, 0],
      [1, 34588, 1, 84929, 1],
      [1, 34588, 1, 83927, 0],
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    var v2/* accounts */ = [[40002, 400023, 84929, 83927]];
    var val = await e.f255(v1/* data */, v2/* accounts */);
    var expected_vals = [true, false, true, false];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 2 targets, 2 accounts
    console.log("135g");
    var presets = [
      [1, 34588, 1, 40002, 1], 
      [1, 34588, 1, 400023, 0],
      [1, 77483, 1, 84929, 1],
      [1, 77483, 1, 83927, 0],
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 77483];
    var v2/* accounts */ = [[40002, 400023, 84929, 83927], [400023, 84929, 83927]];
    var val = await e.f255(v1/* data */, v2/* accounts */);
    var expected_vals = [true, false, false, false,   false, true, false];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* get_interactible_time_limits | blocked_account_time_limits: returns the amount of time a specified set of accounts can interact with specified targets */
  xit("136. can run f256", async () => {
    //scan 1 target, 1 account (expiry time <0>)
    console.log("136a");
    var presets = [
      [1, 34588, 2, 40002, 10003], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    var v2/* accounts */ = [[40002]];
    var val = await e.f256(v1/* data */, v2/* accounts */, 0, 2);
    var expected_vals = [10003];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 1 target, 1 account (expiry time <0>)
    console.log("136b");
    var presets = [
      [1, 34588, 2, 40002, 103003], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    var v2/* accounts */ = [[40002]];
    var val = await e.f256(v1/* data */, v2/* accounts */, 0, 2);
    var expected_vals = [103003];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 1 target, 1 account (expiry time <0>)
    console.log("136c");
    var presets = [
      [1, 34588, 2, 403002, 10003], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    var v2/* accounts */ = [[403002]];
    var val = await e.f256(v1/* data */, v2/* accounts */, 0, 2);
    var expected_vals = [10003];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 1 target, 1 account (time remaining <1>)
    console.log("136d");
    var presets = [
      [1, 34588, 2, 40002, 100], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    var v2/* accounts */ = [[40002]];
    var val = await e.f256(v1/* data */, v2/* accounts */, 1, 2);
    var expected_vals = [0];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //scan 1 target, 1 account (time remaining <1>)
    console.log("136e");
    var time = parseInt(await e.time());
    var presets = [
      [1, 34588, 2, 40002, (time+10_000)], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    var v2/* accounts */ = [[40002]];
    var val = await e.f256(v1/* data */, v2/* accounts */, 1, 2);
    var expected_vals = [10_000-1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 1 target, 2 accounts (time remaining <1>)
    console.log("136f");
    var time = parseInt(await e.time());
    var presets = [
      [1, 34588, 2, 40002, time+10_000], 
      [1, 34588, 2, 40003, time+30_000]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    var v2/* accounts */ = [[40002, 40003]];
    var val = await e.f256(v1/* data */, v2/* accounts */, 1, 2);
    var expected_vals = [10_000-1, 30_000-1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //scan 2 target, 3 accounts (time remaining <1>)
    console.log("136g");
    var time = parseInt(await e.time());
    var presets = [
      [1, 34588, 2, 40002, time+10_000], 
      [1, 34588, 2, 40003, time+30_000],
      [1, 34588, 2, 40005, time+430_000],

      [1, 83922, 2, 999282, time+1_430_000],
      [1, 83922, 2, 8883928, time+7_430_000]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 83922];
    var v2/* accounts */ = [[40002, 40003, 40005], [999282, 8883928]];
    var val = await e.f256(v1/* data */, v2/* accounts */, 1, 2);
    var expected_vals = [10_000-1, 30_000-1, 430_000-1,  1_430_000-1, 7_430_000-1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //scan 2 target, 3 blocked accounts (time remaining <1>)
    console.log("136h");
    var time = parseInt(await e.time());
    var presets = [
      [1, 34588, 3, 40002, time+10_000], 
      [1, 34588, 3, 40003, time+30_000],
      [1, 34588, 3, 40005, time+430_000],

      [1, 83922, 3, 999282, time+1_430_000],
      [1, 83922, 3, 8883928, time+7_430_000]
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 83922];
    var v2/* accounts */ = [[40002, 40003, 40005], [999282, 8883928]];
    var val = await e.f256(v1/* data */, v2/* accounts */, 1, 3);
    var expected_vals = [10_000-1, 30_000-1, 430_000-1,  1_430_000-1, 7_430_000-1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);
  });




  /* ensure_interactibles_for_multiple_accounts: ensures the specified set of accounts can interact with their corresponding specified targets */
  xit("137. can run f257", async () => {
    //scan 1 target
    console.log("137a");
    var presets = [
      [1, 34588, 0, 1/* interactible_enabled */, 1],
      [1, 34588, 2/* <2>interactible_accounts */, 40002, bgN(13, 10)],  
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588];
    var v2/* accounts */ = [40002];
    await expect(e.f257(v1/* data */, v2/* accounts */)).to.not.be.reverted;
    await e.delete_preset_data(presets);



    //scan 2 targets
    console.log("137b");
    var presets = [
      [1, 34588, 0, 1/* interactible_enabled */, 1],
      [1, 34588, 2/* <2>interactible_accounts */, 40002, bgN(13, 10)], 
      [1, 34588, 2/* <2>interactible_accounts */, 40003, bgN(13, 10)], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 34588];
    var v2/* accounts */ = [40002, 40003];
    await expect(e.f257(v1/* data */, v2/* accounts */)).to.not.be.reverted;
    await e.delete_preset_data(presets);



    //scan 3 targets
    console.log("137c");
    var presets = [
      [1, 34588, 0, 1/* interactible_enabled */, 1],
      [1, 34588, 2/* <2>interactible_accounts */, 40002, bgN(13, 10)], 
      [1, 34588, 2/* <2>interactible_accounts */, 40004, bgN(13, 10)],
      [1, 34588, 2/* <2>interactible_accounts */, 140002, bgN(13, 10)], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 34588, 34588];
    var v2/* accounts */ = [40002, 40004, 140002];
    await expect(e.f257(v1/* data */, v2/* accounts */)).to.not.be.reverted;
    await e.delete_preset_data(presets);



    //scan 3 targets, 1 moderator
    console.log("137d");
    var presets = [
      [1, 34588, 0, 1/* interactible_enabled */, 1],
      [1, 34588, 2/* <2>interactible_accounts */, 40002, bgN(13, 10)], 
      [1, 34588, 1/* <1>moderator_accounts */, 40004, 1],
      [1, 34588, 2/* <2>interactible_accounts */, 140002, bgN(13, 10)], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 34588, 34588];
    var v2/* accounts */ = [40002, 40004, 140002];
    await expect(e.f257(v1/* data */, v2/* accounts */)).to.not.be.reverted;
    await e.delete_preset_data(presets);




    //scan 3 targets, 1 author_owner
    console.log("137e");
    var presets = [
      [1, 34588, 0, 1/* interactible_enabled */, 1],
      [1, 34588, 2/* <2>interactible_accounts */, 40002, bgN(13, 10)], 
      [1, 34588, 2/* <2>interactible_accounts */, 40004, bgN(13, 10)],
      [2, 34588, 0/* control */, 0/* author_owner */, 140002], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 34588, 34588];
    var v2/* accounts */ = [40002, 40004, 140002];
    await expect(e.f257(v1/* data */, v2/* accounts */)).to.not.be.reverted;
    await e.delete_preset_data(presets);



    //scan 3 targets, 1 invalid
    console.log("137f");
    var presets = [
      [1, 34588, 0, 1/* interactible_enabled */, 1],
      [1, 34588, 2/* <2>interactible_accounts */, 40002, bgN(13, 10)], 
      [1, 34588, 2/* <2>interactible_accounts */, 40004, bgN(13, 10)],
      [2, 34588, 0/* control */, 0/* author_owner */, 140003], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 34588, 34588];
    var v2/* accounts */ = [40002, 40004, 140002/* invalid */];
    await expect(e.f257(v1/* data */, v2/* accounts */)).to.be.reverted;
    await e.delete_preset_data(presets);



    //scan 3 targets, 1 invalid
    console.log("137g");
    var presets = [
      [1, 34588, 0, 1/* interactible_enabled */, 1],
      [1, 34588, 2/* <2>interactible_accounts */, 40002, bgN(13, 10)], 
      [1, 34588, 1/* <1>moderator_accounts */, 40004, 0],
      [1, 34588, 2/* <2>interactible_accounts */, 140002, bgN(13, 10)], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 34588, 34588];
    var v2/* accounts */ = [40002, 40004/* invalid */, 140002];
    await expect(e.f257(v1/* data */, v2/* accounts */)).to.be.reverted;
    await e.delete_preset_data(presets);




    //scan 3 targets, 1 invalid
    console.log("137h");
    var presets = [
      [1, 34588, 0, 1/* interactible_enabled */, 1],
      [1, 34588, 2/* <2>interactible_accounts */, 40002, 30], 
      [1, 34588, 2/* <2>interactible_accounts */, 40004, bgN(13, 10)],
      [1, 34588, 2/* <2>interactible_accounts */, 140002, bgN(13, 10)], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 34588, 34588];
    var v2/* accounts */ = [40002/* invalid */, 40004, 140002];
    await expect(e.f257(v1/* data */, v2/* accounts */)).to.be.reverted;
    await e.delete_preset_data(presets);




    //scan 3 targets, interactibles disabled
    console.log("137i");
    var presets = [
      [1, 34588, 0, 1/* interactible_enabled */, 0],
      [1, 34588, 2/* <2>interactible_accounts */, 40002, 0], 
      [1, 34588, 2/* <2>interactible_accounts */, 40004, bgN(13, 10)],
      [1, 34588, 2/* <2>interactible_accounts */, 140002, 0], 
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [34588, 34588, 34588];
    var v2/* accounts */ = [40002, 40004, 140002];
    await expect(e.f257(v1/* data */, v2/* accounts */)).to.not.be.reverted;
    await e.delete_preset_data(presets);
  });

  /* calculate_yes_vote_proportion: calculates the proportion of yes votes, as a percentage of the total votes cast */
  xit("138. can run f272", async () => {
    //total_yes: 1, total_no: 0, total_wait: 0 
    //target -> 100%
    console.log("138a");
    var val = nWC(await e.f272/* calculate_yes_vote_proportion */(0/* wait */, 1/* yes */, 0/* no */));
    expect(await val).to.equal("1,000,000,000,000,000,000");



    //total_yes: 100, total_no: 0, total_wait: 0 
    //target -> 100%
    console.log("138b");
    var val = nWC(await e.f272/* calculate_yes_vote_proportion */(0/* wait */, 100/* yes */, 0/* no */));
    expect(await val).to.equal("1,000,000,000,000,000,000");



    //total_yes: 96, total_no: 3, total_wait: 1 
    //target -> 96%
    console.log("138c");
    var val = nWC(await e.f272/* calculate_yes_vote_proportion */(1/* wait */, 96/* yes */, 3/* no */));
    expect(await val).to.equal("960,000,000,000,000,000");



    //total_yes: 44, total_no: 55, total_wait: 1
    //target -> 44%
    console.log("138d");
    var val = nWC(await e.f272/* calculate_yes_vote_proportion */(1/* wait */, 44/* yes */, 55/* no */));
    expect(await val).to.equal("440,000,000,000,000,000");




    //total_yes: 30e53, total_no: 60e53, total_wait: 10e53 
    //target -> 30%
    console.log("138e");
    var val = nWC(await e.f272/* calculate_yes_vote_proportion */(bgN(10,53)/* wait */, bgN(30,53)/* yes */, bgN(60,53)/* no */));
    expect(await val).to.equal("300,000,000,000,000,000");

  });

  /* get_total_consensus_data_as_percentages: calculates and returns the yes, no and wait vote data in the form of percentages */
  xit("139. can run f278", async () => {
    //total_no: 0(0%), total_yes: 1(100%), total_wait: 0(0%) 
    console.log("139a");
    var v1/* raw_vote_data */ = [[0,1,0]];
    var val = await e.f278(v1/* raw_vote_data */);
    var expected_vals = [0, bgN(100,16), 0];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }


    //total_no: 0(0%), total_yes: 99(100%), total_wait: 1(1%) 
    console.log("139b");
    var v1/* raw_vote_data */ = [[0,99,1]];
    var val = await e.f278(v1/* raw_vote_data */);
    var expected_vals = [0, bgN(99,16), bgN(1,16)];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }



    //total_no: 70(70%), total_yes: 12(12%), total_wait: 18(18%) 
    console.log("139c");
    var v1/* raw_vote_data */ = [[70,12,18]];
    var val = await e.f278(v1/* raw_vote_data */);
    var expected_vals = [bgN(70,16), bgN(12,16), bgN(18,16)];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }



    //total_no: 70(70%), total_yes: 12(12%), total_wait: 18(18%) 
    //total_no: 0(0%), total_yes: 99(100%), total_wait: 1(1%) 
    console.log("139d");
    var v1/* raw_vote_data */ = [[70,12,18],[0,99,1]];
    var val = await e.f278(v1/* raw_vote_data */);
    var expected_vals = [bgN(70,16), bgN(12,16), bgN(18,16),  0, bgN(99,16), bgN(1,16)];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }

  });




  /* get_last_transaction_block & last_transaction_time & entered_contracts_count & transaction_count_data: scans for an accounts run data */
  xit("140. can run f170", async () => {
    //scan 1 target
    console.log("140a");
    var presets = [
      [2, 40002, 1, 1/* last_transaction_block */, 101],
      [2, 40002, 1, 2/* last_transaction_time */, 201],  
      [2, 40002, 1, 4/* entered_contracts */, 301],
      [2, 40002, 1, 3/* transaction_count */, 701],
    ];
    await e.set_preset_data(presets);
    var v1/* accounts */ = [40002];
    var val = await e.f170(v1/* accounts */);
    var expected_vals = [101, 201, 301, 701];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //scan 1 target
    console.log("140b");
    var presets = [
      [2, 40002, 1, 1/* last_transaction_block */, 101],
      [2, 40002, 1, 2/* last_transaction_time */, 201],  
      [2, 40002, 1, 4/* entered_contracts */, 3019],
      [2, 40002, 1, 3/* transaction_count */, 701],
    ];
    await e.set_preset_data(presets);
    var v1/* accounts */ = [40002];
    var val = await e.f170(v1/* accounts */);
    var expected_vals = [101, 201, 3019, 701];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




     //scan 2 targets
    console.log("140c");
    var presets = [
      [2, 40002, 1, 1/* last_transaction_block */, 101],
      [2, 40002, 1, 2/* last_transaction_time */, 201],  
      [2, 40002, 1, 4/* entered_contracts */, 301],
      [2, 40002, 1, 3/* transaction_count */, 1701],


      [2, 400022, 1, 1/* last_transaction_block */, 1091],
      [2, 400022, 1, 2/* last_transaction_time */, 2901],  
      [2, 400022, 1, 4/* entered_contracts */, 301],
      [2, 400022, 1, 3/* transaction_count */, 1701],
    ];
    await e.set_preset_data(presets);
    var v1/* accounts */ = [40002, 400022];
    var val = await e.f170(v1/* accounts */);
    var expected_vals = [101, 201, 301, 1701,   1091, 2901, 301, 1701];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* calculate_max_consumable_gas: returns the amount of gas that can be consumed given a set of specified gas prices */
  xit("141. can run f171", async () => {
    //target: 5000,000g 
    console.log("141a");
    var presets = [
      [1, 2, 1, 24/* gas_reduction_proportion */, bgN(50, 16)],
      [1, 2, 1, 11/* tx_gas_limit */, 10_000_000],  
      [1, 2, 1, 25/* tx_gas_anchor_price */, bgN(10, 9)],
      [1, 2, 1, 26/* tx_gas_lower_limit */, 900_000],
    ];
    await e.set_preset_data(presets);
    var v1/* gas_prices */ = [bgN(10, 9)];
    var val = await e.f280(v1/* gas_prices */);
    var expected_vals = [5_000_000];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //target: 50,000,000g 
    console.log("141b");
    var presets = [
      [1, 2, 1, 24/* gas_reduction_proportion */, bgN(50, 16)],
      [1, 2, 1, 11/* tx_gas_limit */, 100_000_000],  
      [1, 2, 1, 25/* tx_gas_anchor_price */, bgN(10, 9)],
      [1, 2, 1, 26/* tx_gas_lower_limit */, 900_000],
    ];
    await e.set_preset_data(presets);
    var v1/* gas_prices */ = [bgN(10, 9)];
    var val = await e.f280(v1/* gas_prices */);
    var expected_vals = [50_000_000];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //target: 25,000,000g 
    console.log("141c");
    var presets = [
      [1, 2, 1, 24/* gas_reduction_proportion */, bgN(50, 16)],
      [1, 2, 1, 11/* tx_gas_limit */, 100_000_000],  
      [1, 2, 1, 25/* tx_gas_anchor_price */, bgN(10, 9)],
      [1, 2, 1, 26/* tx_gas_lower_limit */, 900_000],
    ];
    await e.set_preset_data(presets);
    var v1/* gas_prices */ = [bgN(20, 9)];
    var val = await e.f280(v1/* gas_prices */);
    var expected_vals = [25_000_000];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //target: 50,000,000g, 25,000,000g, 12,500,000g 
    console.log("141d");
    var presets = [
      [1, 2, 1, 24/* gas_reduction_proportion */, bgN(50, 16)],
      [1, 2, 1, 11/* tx_gas_limit */, 100_000_000],  
      [1, 2, 1, 25/* tx_gas_anchor_price */, bgN(10, 9)],
      [1, 2, 1, 26/* tx_gas_lower_limit */, 900_000],
    ];
    await e.set_preset_data(presets);
    var v1/* gas_prices */ = [bgN(10, 9), bgN(20, 9), bgN(30, 9)];
    var val = await e.f280(v1/* gas_prices */);
    var expected_vals = [50_000_000, 25_000_000, 12_500_000];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //target: 40,000,000g 20,000,000g
    console.log("141e");
    console.log(nWC(await e.get_block_gaslimit())); //block.gaslimit = 80,000,000g

    var presets = [
      [1, 2, 1, 24/* gas_reduction_proportion */, bgN(50, 16)],
      [1, 2, 1, 11/* tx_gas_limit */, 0],  
      [1, 2, 1, 25/* tx_gas_anchor_price */, bgN(10, 9)],
      [1, 2, 1, 26/* tx_gas_lower_limit */, 900_000],
    ];
    await e.set_preset_data(presets);
    var v1/* gas_prices */ = [bgN(10, 9), bgN(20, 9)];
    var val = await e.f280(v1/* gas_prices */);
    var expected_vals = [40_000_000, 20_000_000];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //target: 80,000,000g 
    console.log("141f");
    var presets = [
      [1, 2, 1, 24/* gas_reduction_proportion */, bgN(50, 16)],
      [1, 2, 1, 11/* tx_gas_limit */, 100_000_000],  
      [1, 2, 1, 25/* tx_gas_anchor_price */, bgN(10, 9)],
      [1, 2, 1, 26/* tx_gas_lower_limit */, 0],
    ];
    await e.set_preset_data(presets);
    var v1/* gas_prices */ = [bgN(20, 9), bgN(50, 9), bgN(200, 9)];
    var val = await e.f280(v1/* gas_prices */);
    var expected_vals = [80_000_000, 80_000_000, 80_000_000];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* revoke_author_owner_privelages: removes the privelages of an author as a moderator of a given set of targets */
  xit("142. can run f277", async () => {
    //revoke author privelages as author
    console.log("142a");
    var presets = [
      [1, 35002, 0, 0, 30],/* data_type */
      [1, 35002, 1, 40002, 0],/* moderator_setting */
      [2, 35002, 0, 0, 40002],/* author_owner */

      [1, 35002, 0, 2, 0]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* target_id_data */ = [[35002], [], []/* sender_accounts */, [], []];
    await expect(e.f277(v1/* target_id_data */, 40002)).to.not.be.reverted;
    
    var val = await e.read_preset_data(presets);
    var expected_vals = [30, 0, 40002, 1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //revoke author privelages as moderator
    console.log("142b");
    var presets = [
      [1, 35002, 0, 0, 30],/* data_type */
      [1, 35002, 1, 40002, 1],/* moderator_setting */
      [2, 35002, 0, 0, 400021],/* author_owner */

      [1, 35002, 0, 2, 0]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* target_id_data */ = [[35002], [], []/* sender_accounts */, [], []];
    await expect(e.f277(v1/* target_id_data */, 40002)).to.not.be.reverted;
    
    var val = await e.read_preset_data(presets);
    var expected_vals = [30, 1, 400021, 1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //revoke author privelages, sender in target id data
    console.log("142c");
    var presets = [
      [1, 35002, 0, 0, 30],/* data_type */
      [1, 35002, 1, 40002, 0],/* moderator_setting */
      [2, 35002, 0, 0, 40002],/* author_owner */

      [1, 35002, 0, 2, 0]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* target_id_data */ = [[35002], [], [40002]/* sender_accounts */, [], []];
    await expect(e.f277(v1/* target_id_data */, 0)).to.not.be.reverted;
    
    var val = await e.read_preset_data(presets);
    var expected_vals = [30, 0, 40002, 1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //revoke author privelages as author
    console.log("142d");
    var presets = [
      [1, 35002, 0, 0, 30],/* data_type */
      [1, 35002, 1, 40002, 0],/* moderator_setting */
      [2, 35002, 0, 0, 40002],/* author_owner */

      [1, 35002, 0, 2, 0],/* author_privelage_disabled */



      [1, 350021, 0, 0, 31],/* data_type */
      [1, 350021, 1, 400021, 0],/* moderator_setting */
      [2, 350021, 0, 0, 400021],/* author_owner */

      [1, 350021, 0, 2, 0]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* target_id_data */ = [[35002, 350021], [], [40002, 400021]/* sender_accounts */, [], []];
    await expect(e.f277(v1/* target_id_data */, 0)).to.not.be.reverted;
    
    var val = await e.read_preset_data(presets);
    var expected_vals = [30, 0, 40002, 1,   31, 0, 400021, 1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //revoke author privelages as author, invalid target passed
    console.log("142e");
    var presets = [
      [1, 35002, 0, 0, 30],/* data_type */
      [1, 35002, 1, 40002, 0],/* moderator_setting */
      [2, 35002, 0, 0, 40002],/* author_owner */

      [1, 35002, 0, 2, 0]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* target_id_data */ = [[2], [], []/* sender_accounts */, [], []];
    await expect(e.f277(v1/* target_id_data */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);




    //revoke author privelages as author, invalid data type
    console.log("142f");
    var presets = [
      [1, 35002, 0, 0, 29],/* data_type */
      [1, 35002, 1, 40002, 0],/* moderator_setting */
      [2, 35002, 0, 0, 40002],/* author_owner */

      [1, 35002, 0, 2, 0]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* target_id_data */ = [[35002], [], []/* sender_accounts */, [], []];
    await expect(e.f277(v1/* target_id_data */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);



    //revoke author privelages as author, invalid data type target
    console.log("142g");
    var presets = [
      [1, 35002, 0, 0, 32],/* data_type */
      [1, 35002, 1, 40002, 0],/* moderator_setting */
      [2, 35002, 0, 0, 40002],/* author_owner */

      [1, 35002, 0, 2, 0]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* target_id_data */ = [[35002], [], []/* sender_accounts */, [], []];
    await expect(e.f277(v1/* target_id_data */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);




    //revoke author privelages as author, invalid data type
    console.log("142h");
    var presets = [
      [1, 35002, 0, 0, 35],/* data_type */
      [1, 35002, 1, 40002, 0],/* moderator_setting */
      [2, 35002, 0, 0, 40002],/* author_owner */

      [1, 35002, 0, 2, 0]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* target_id_data */ = [[35002], [], []/* sender_accounts */, [], []];
    await expect(e.f277(v1/* target_id_data */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);




    //revoke author privelages as author, invalid target type
    console.log("142i");
    var presets = [
      [1, 35002, 0, 0, 24],/* data_type */
      [1, 35002, 1, 40002, 0],/* moderator_setting */
      [2, 35002, 0, 0, 40002],/* author_owner */

      [1, 35002, 0, 2, 0]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* target_id_data */ = [[35002], [], []/* sender_accounts */, [], []];
    await expect(e.f277(v1/* target_id_data */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);




    //revoke author privelages, sender not author or moderator
    console.log("142j");
    var presets = [
      [1, 35002, 0, 0, 30],/* data_type */
      [1, 35002, 1, 40002, 0],/* moderator_setting */
      [2, 35002, 0, 0, 40003],/* author_owner */

      [1, 35002, 0, 2, 0]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* target_id_data */ = [[35002], [], []/* sender_accounts */, [], []];
    await expect(e.f277(v1/* target_id_data */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);




    //revoke author privelages as author, author privelages already disabled
    console.log("142k");
    var presets = [
      [1, 35002, 0, 0, 30],/* data_type */
      [1, 35002, 1, 40002, 0],/* moderator_setting */
      [2, 35002, 0, 0, 40002],/* author_owner */

      [1, 35002, 0, 2, 1]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* target_id_data */ = [[35002], [], []/* sender_accounts */, [], []];
    await expect(e.f277(v1/* target_id_data */, 40002)).to.be.reverted;
    await e.delete_preset_data(presets);
  });





  /* require_target_moderators: ensures sender or senders have moderator privelages for specified targets */
  xit("143. can run f242/f283/f284", async () => {
    //single sender is author owner
    console.log("143a");
    var presets = [
      [1, 35002, 1, 40002, 0],/* moderator_setting */
      [2, 35002, 0, 0, 40002],/* author_owner */
      [1, 35002, 0, 2, 0]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [35002];
    var v2/* sender_accounts */ = [];
    await expect(e.f283(v1/* targets */, 40002, v2/* sender_accounts */)).to.not.be.reverted;
    await e.delete_preset_data(presets);



    //single sender is moderator
    console.log("143b");
    var presets = [
      [1, 35002, 1, 40002, 1],/* moderator_setting */
      [2, 35002, 0, 0, 400021],/* author_owner */
      [1, 35002, 0, 2, 0]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [35002];
    var v2/* sender_accounts */ = [];
    await expect(e.f283(v1/* targets */, 40002, v2/* sender_accounts */)).to.not.be.reverted;
    await e.delete_preset_data(presets);



    //single sender is moderator, author privelage disabled
    console.log("143c");
    var presets = [
      [1, 35002, 1, 40002, 1],/* moderator_setting */
      [2, 35002, 0, 0, 400023],/* author_owner */
      [1, 35002, 0, 2, 1]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [35002];
    var v2/* sender_accounts */ = [];
    await expect(e.f283(v1/* targets */, 40002, v2/* sender_accounts */)).to.not.be.reverted;
    await e.delete_preset_data(presets);



    //multiple senders
    console.log("143d");
    var presets = [
      [1, 35002, 1, 40002, 1],/* moderator_setting */
      [2, 35002, 0, 0, 400023],/* author_owner */
      [1, 35002, 0, 2, 0]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [35002, 35002];
    var v2/* sender_accounts */ = [40002, 400023];
    await expect(e.f283(v1/* targets */, 0, v2/* sender_accounts */)).to.not.be.reverted;
    await e.delete_preset_data(presets);



    //single sender is not author or moderator
    console.log("143e");
    var presets = [
      [1, 35002, 1, 40002, 0],/* moderator_setting */
      [2, 35002, 0, 0, 400022],/* author_owner */
      [1, 35002, 0, 2, 0]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [35002];
    var v2/* sender_accounts */ = [];
    await expect(e.f283(v1/* targets */, 40002, v2/* sender_accounts */)).to.be.reverted;
    await e.delete_preset_data(presets);




    //single sender is author owner, author privelages disabled
    console.log("143f");
    var presets = [
      [1, 35002, 1, 40002, 0],/* moderator_setting */
      [2, 35002, 0, 0, 40002],/* author_owner */
      [1, 35002, 0, 2, 1]/* author_privelage_disabled */
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [35002];
    var v2/* sender_accounts */ = [];
    await expect(e.f283(v1/* targets */, 40002, v2/* sender_accounts */)).to.be.reverted;
    await e.delete_preset_data(presets);
  });

  /* get_consensus_contract_action_targets_count: creates data arrays whose size is the number of contract actions specified in each proposal object targeted */
  xit("144. can run f261", async () => {
    //size 3, 3, 3, 3, 3
    var v1/* consensus_type_data */ = [0,0,0, 0,0,0, 0,0/* 7 */, 0,0,0/* 10 */, 3,3,3,3,3,0,0,0,0,0];
    var val = await e.f261(v1/* consensus_type_data */);
    console.log("144a");
    var exp_vals = [3,3,3,0,0,  3,3,3,0,0,  3,3,3,0,0,  3,0,3,0,0,  3,0,3,3,0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 5, 5, 5, 5, 5
    var v1/* consensus_type_data */ = [0,0,0, 0,0,0, 0,0/* 7 */, 0,0,0/* 10 */, 5,5,5,5,5,0,0,0,0,0];
    var val = await e.f261(v1/* consensus_type_data */);
    console.log("144b");
    var exp_vals = [5,5,5,0,0,  5,5,5,0,0,  5,5,5,0,0,  5,0,5,0,0,  5,0,5,5,0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }




    //size 3, 2, 3, 31, 34
    var v1/* consensus_type_data */ = [0,0,0, 0,0,0, 0,0/* 7 */, 0,0,0/* 10 */, 3,2,3,31,34,0,0,0,0,0];
    var val = await e.f261(v1/* consensus_type_data */);
    console.log("144c");
    var exp_vals = [3,3,3,0,0,  2,2,2,0,0,  3,3,3,0,0,  31,0,31,0,0,  34,0,34,34,0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });

  /* get_consensus_contract_data: sets the action data for each contract action */
  xit("145. can run f262", async () => {
    //1 enter_contract action
    var v1/* target_nums */ = [
      [[0], [11, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], [4000]/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 1,0,0,0,0,0,0,0,0,0];
    var val = await e.f262(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("145a");
    var exp_vals = [350, 4000, 67];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //1 extend_enter_contract action
    var v1/* target_nums */ = [
      [[0], [12, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [3501], [40400]/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 0,1,0,0,0,0,0,0,0,0];
    var val = await e.f262(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("145b");
    var exp_vals = [3501, 40400, 67];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //1 vote_contract_proposal action
    var v1/* target_nums */ = [
      [[0], [13, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [3501], [2]/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 0,0,1,0,0,0,0,0,0,0];
    var val = await e.f262(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("145c");
    var exp_vals = [3501, 2, 67];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }




    //1 exit_contract action
    var v1/* target_nums */ = [
      [[0], [14, 0, 0, 0, 0, 637/* 5 */, 0, 0, 0, 0], [0], [0],  [3501], []/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 0,0,0,1,0,0,0,0,0,0];
    console.log("145d");
    var val = await e.f262(v1/* target_nums */, v3/* consensus_type_data */);
    var exp_vals = [3501, 637];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    
    //1 force_exit_contract action
    var v1/* target_nums */ = [
      [[0], [15, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], [4000]/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 0,0,0,0,1,0,0,0,0,0];
    var val = await e.f262(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("145e");
    var exp_vals = [350, 67, 4000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }




    //1 enter_contract action(3 targets), 1 force_exit_contract action(2 targets)
    var v1/* target_nums */ = [
      [[0], [11, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350, 19918, 6653], [4000, 3029, 33]/* 5 */, [], [], []],
      [[0], [15, 0, 0, 0, 0, 617/* 5 */, 0, 0, 0, 0], [0], [0],  [350, 432], [4000, 3920]/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 3,0,0/* 13 */,0,2,0,0,0,0,0];
    var val = await e.f262(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("145f");
    var exp_vals = [
      350, 19918, 6653,  4000, 3029, 33,  67, 67, 67,
      350, 432,  617, 617,  4000, 3920,
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }




    //1 extend_enter_contract action(2 targets), 1 vote_contract_proposal action(3 targets), 1 exit_contract action(2 targets)
    var v1/* target_nums */ = [
      [[0], [12, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [3501, 44], [40400, 353]/* 5 */, [], [], []],
      [[0], [13, 0, 0, 0, 0, 167/* 5 */, 0, 0, 0, 0], [0], [0],  [3501, 553, 232], [2, 3, 1]/* 5 */, [], [], []],
      [[0], [14, 0, 0, 0, 0, 637/* 5 */, 0, 0, 0, 0], [0], [0],  [3501, 433], []/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 0,2/* 12 */,3,2,0,0,0,0,0,0];
    var val = await e.f262(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("145g");
    var exp_vals = [
      3501, 44,  40400, 353,  67, 67,
      3501, 553, 232,  2, 3, 1,  167, 167, 167,
      3501, 433,  637, 637
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });




  /* get_consensus_moderator_action_targets_count: creates data arrays whose size corresponds to the number of moderator actions being made via consensus */
  xit("146. can run f273", async () => {
    //size 3, 3, 3, 3, 3
    var v1/* consensus_type_data */ = [0,0,0, 0,0,0, 0,0/* 7 */, 0,0,0/* 10 */, 0,0,0,0,0/* 15 */,3,3,3,3,3];
    var val = await e.f273(v1/* consensus_type_data */);
    console.log("146a");
    var exp_vals = [3,3,3,0,0,  3,0,0,3,0,  3,3,3,3,0,  3,0,3,0,0,  3,3,3,3,0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //size 5, 5, 3, 5, 5
    var v1/* consensus_type_data */ = [0,0,0, 0,0,0, 0,0/* 7 */, 0,0,0/* 10 */, 0,0,0,0,0/* 15 */,5,5,3,5,5];
    var val = await e.f273(v1/* consensus_type_data */);
    console.log("146b");
    var exp_vals = [5,5,5,0,0,  5,0,0,5,0,  3,3,3,3,0,  5,0,5,0,0,  5,5,5,5,0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //size 13, 23, 3, 13, 33
    var v1/* consensus_type_data */ = [0,0,0, 0,0,0, 0,0/* 7 */, 0,0,0/* 10 */, 0,0,0,0,0/* 15 */,13,23,3,13,33];
    var val = await e.f273(v1/* consensus_type_data */);
    console.log("146c");
    var exp_vals = [13,13,13,0,0,  23,0,0,23,0,  3,3,3,3,0,  13,0,13,0,0,  33,33,33,33,0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });

  /* get_consensus_moderator_action_data: sets the consensus data for performing moderator actions */
  xit("147. can run f274", async () => {
    //1 modify_moderators action
    var v1/* target_nums */ = [
      [[0], [16, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], [4000]/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 0,0,0,0,0/* 15 */,1,0,0,0,0];
    var val = await e.f274(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("147a");
    var exp_vals = [350, 4000, 67];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }


    //1 enable/disable_interactible_checkers action
    var v1/* target_nums */ = [
      [[0], [17, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], []/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 0,0,0,0,0/* 15 */,0,1,0,0,0];
    var val = await e.f274(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("147b");
    var exp_vals = [350, 67];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //1 add_interactible_account action
    var v1/* target_nums */ = [
      [[0], [18, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], [40001]/* 5 */, [1000], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 0,0,0,0,0/* 15 */,0,0,1,0,0];
    var val = await e.f274(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("147c");
    var exp_vals = [350, 40001, 1000, 67];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }




    //1 revoke_author_privelages action
    var v1/* target_nums */ = [
      [[0], [19, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], []/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 0,0,0,0,0/* 15 */,0,0,0,1,0];
    var val = await e.f274(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("147d");
    var exp_vals = [350, 67];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }




    //1 block_accounts action
    var v1/* target_nums */ = [
      [[0], [20, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350], [4000]/* 5 */, [8003], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 0,0,0,0,0/* 15 */,0,0,0,0,1];
    var val = await e.f274(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("147e");
    var exp_vals = [350, 4000, 8003, 67];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //1 modify_moderators action(3 targets), 1 enable/disable_interactible_checkers action(2 targets)
    var v1/* target_nums */ = [
      [[0], [16, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350, 452, 554], [4000, 4092, 3928]/* 5 */, [], [], []],
      [[0], [17, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350, 433], []/* 5 */, [], [], []]
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 0,0,0,0,0/* 15 */,3,2,0,0,0];
    var val = await e.f274(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("147f");
    var exp_vals = [
      350, 452, 554,  4000, 4092, 3928,  67, 67, 67,
      350, 433,  67, 67
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //1 add_interactible_account action(4 targets), 2 revoke_author_privelages action(2 targets), 1 block_accounts action(3 targets)
    var v1/* target_nums */ = [
      [[0], [18, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350, 4938, 38882, 2222], [40001, 4982, 2981, 4838]/* 5 */, [1000, 382, 9991, 9981], [], []],
      [[0], [19, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [350, 47382], []/* 5 */, [], [], []],
      [[0], [20, 0, 0, 0, 0, 687/* 5 */, 0, 0, 0, 0], [0], [0],  [350, 43982, 2188], [4000, 47378, 2827]/* 5 */, [8003, 3762, 2827], [], []],
      [[0], [0, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [3501, 77282], []/* 5 */, [], [], []],
      [[0], [19, 0, 0, 0, 0, 67/* 5 */, 0, 0, 0, 0], [0], [0],  [3501, 77282], []/* 5 */, [], [], []],
    ];
    var v3/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 0,0,0,0,0/* 15 */,0,0,4,4,3];
    var val = await e.f274(v1/* target_nums */, v3/* consensus_type_data */);
    console.log("147g");
    var exp_vals = [
      350, 4938, 38882, 2222,   40001, 4982, 2981, 4838,   1000, 382, 9991, 9981,   67, 67, 67, 67,
      350, 47382, 3501, 77282,  67, 67, 67, 67,
      350, 43982, 2188,   4000, 47378, 2827,   8003, 3762, 2827,   687, 687, 687, 0, 0
    ];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

  });

  /* get_contains_subscription_contract_mod_work: returns an array of booleans indicating if proposals being submitted include subscription, contract or moderator actions */
  xit("148. can run f264", async () => {
    //1 subscription action, 0 contract actions, 0 mod actions
    var v1/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,1, 0,0,0,0,0/* 15 */,0,0,0,0,0];
    var val = await e.f264(v1/* consensus_type_data */);
    console.log("148a");
    var exp_vals = [true, false, false];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //1 subscription action, 2 contract actions, 0 mod actions
    var v1/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,1, 0,2,0,0,0/* 15 */,0,0,0,0,0];
    var val = await e.f264(v1/* consensus_type_data */);
    console.log("148b");
    var exp_vals = [true, true, false];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }




    //0 subscription action, 1 contract actions, 3 mod actions
    var v1/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 0,0,0,0,1/* 15 */,0,0,3,0,0];
    var val = await e.f264(v1/* consensus_type_data */);
    console.log("148c");
    var exp_vals = [false, true, true];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }




    //1 subscription action, 1 contract actions, 1 mod actions
    var v1/* consensus_type_data */ = [0,0,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,1, 0,0,0,1,0/* 15 */,0,0,1,0,0];
    var val = await e.f264(v1/* consensus_type_data */);
    console.log("148d");
    var exp_vals = [true, true, true];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }



    //0 subscription action, 0 contract actions, 0 mod actions
    var v1/* consensus_type_data */ = [1,1,0,0,0/* 4 */,0,0,0, 0,0/* 9 */,0, 0,0,0,0,0/* 15 */,0,0,0,0,0];
    var val = await e.f264(v1/* consensus_type_data */);
    console.log("148e");
    var exp_vals = [false, false, false];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
  });




  /* get_account_entry_expiry_time | entry_time_to_expiry: returns the expiry times for a specified set of accounts in a set of contract targets */
  xit("149. can run f266/f269", async () => {
    //get_account_entry_expiry_time
    console.log("149a");
    var presets = [
      [2, 30021, 2, 4900, 100382],
      [2, 30021, 2, 49029, 9019827],
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [30021];
    var v2/* accounts */ = [[4900, 49029]];
    var val = await e.f266(v1/* targets */, v2/* accounts */, 3/* get_account_entry_expiry_time */);
    var expected_vals = [100382, 9019827];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //get_account_entry_expiry_time
    console.log("149b");
    var presets = [
      [2, 30021, 2, 4900, 4100382],
      [2, 30021, 2, 49029, 49019827],
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [30021];
    var v2/* accounts */ = [[4900, 49029]];
    var val = await e.f266(v1/* targets */, v2/* accounts */, 3/* get_account_entry_expiry_time */);
    var expected_vals = [4100382, 49019827];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //entry_time_to_expiry
    console.log("149c");
    var time = parseInt(await e.time());
    var presets = [
      [2, 30021, 2, 4900, time+1000],
      [2, 30021, 2, 49029, time+2000],
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [30021];
    var v2/* accounts */ = [[4900, 49029]];
    var val = await e.f266(v1/* targets */, v2/* accounts */, 4/* entry_time_to_expiry */);
    var expected_vals = [1000-1, 2000-1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //entry_time_to_expiry
    console.log("149d");
    var time = parseInt(await e.time());
    var presets = [
      [2, 30021, 2, 4900, time+3000],
      [2, 30021, 2, 49029, time+4000],
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [30021];
    var v2/* accounts */ = [[4900, 49029]];
    var val = await e.f266(v1/* targets */, v2/* accounts */, 4/* entry_time_to_expiry */);
    var expected_vals = [3000-1, 4000-1];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //entry_time_to_expiry
    console.log("149e");
    var time = parseInt(await e.time());
    var presets = [
      [2, 30021, 2, 4900, time+1000],
      [2, 30021, 2, 49029, 918],
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [30021];
    var v2/* accounts */ = [[4900, 49029]];
    var val = await e.f266(v1/* targets */, v2/* accounts */, 4/* entry_time_to_expiry */);
    var expected_vals = [1000-1, 0];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /* balance_of_multiple_accounts: returns the balance of a set of specified accounts at specified exchanges at specified depths. */
  xit("150. can run f270", async () => {
    //1 account
    console.log("150a");
    var presets = [
      [2, 30021, 1/* unfroozen */, 40002, 0, 100_001],
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [30021];
    var v2/* accounts */ = [[40002]];
    var v3/* depths */ = [0];
    var val = await e.f270(v1/* targets */, v2/* accounts */, v3/* depths */, 1/* unfroozen */, 0/* action */);
    var expected_vals = [100_001];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //3 accounts
    console.log("150b");
    var presets = [
      [2, 30021, 1/* unfroozen */, 40002, 0, 100_001],
      [2, 30021, 1/* unfroozen */, 40003, 0, 10_000],
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [30021];
    var v2/* accounts */ = [[40002, 40003]];
    var v3/* depths */ = [0];
    var val = await e.f270(v1/* targets */, v2/* accounts */, v3/* depths */, 1/* unfroozen */, 0/* action */);
    var expected_vals = [100_001, 10_000];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //1 account
    console.log("150c");
    var presets = [
      [2, 30021, 1/* unfroozen */, 40002, 1, 34100_001],
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [30021];
    var v2/* accounts */ = [[40002]];
    var v3/* depths */ = [1];
    var val = await e.f270(v1/* targets */, v2/* accounts */, v3/* depths */, 1/* unfroozen */, 0/* action */);
    var expected_vals = [34100_001];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //1 account
    console.log("150d");
    var presets = [
      [2, 30021, 2/* froozen */, 40002, 0, 100_0013],
    ];
    await e.set_preset_data(presets);
    var v1/* targets */ = [30021];
    var v2/* accounts */ = [[40002]];
    var v3/* depths */ = [0];
    var val = await e.f270(v1/* targets */, v2/* accounts */, v3/* depths */, 2/* froozen */, 0/* action */);
    var expected_vals = [100_0013];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);




    //1 account, action 1
    console.log("150e");
    var presets = [
      [2, 30021, 1/* unfroozen */, 40002, 0, 100_001],
    ];
    await e.set_preset_data(presets);
    var v1/* target_accounts */ = [40002];
    var v2/* exchanges */ = [[30021]];
    var v3/* depths */ = [0];
    var val = await e.f270(v1/* targets */, v2/* accounts */, v3/* depths */, 1/* unfroozen */, 1/* action */);
    var expected_vals = [100_001];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);



    //1 account, action 1
    console.log("150f");
    var presets = [
      [2, 30021, 1/* unfroozen */, 40002, 0, 100_001],
      [2, 482982, 1/* unfroozen */, 40002, 0, 8662],
    ];
    await e.set_preset_data(presets);
    var v1/* target_accounts */ = [40002];
    var v2/* exchanges */ = [[30021, 482982]];
    var v3/* depths */ = [0];
    var val = await e.f270(v1/* targets */, v2/* accounts */, v3/* depths */, 1/* unfroozen */, 1/* action */);
    var expected_vals = [100_001, 8662];
    for (let j = 0; j < expected_vals.length; j++) {
      expect(await val[j]).to.equal(expected_vals[j]);
    }
    await e.delete_preset_data(presets);
  });

  /*  */
  xit("", async () => {

  });

});

describe("E5's", function () {

  /* read_author_owners(): can fetch id's of each author given a list of target objects */
  xit("1. can run f132/f133", async () => {
    //f1322(), f1323()
    //can read 1 author 
    var presets = [[500, 1009]];
    await e.f1322(presets);
    var v1/* _ids */ = [500];
    var val = await e.f132(v1/* _ids */);
    console.log("1a");

    var exp_vals = [1009];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1323(presets);


    //can read 3 authors
    var presets = [[500, 1009], [503, 103209], [50330, 211009]];
    await e.f1322(presets);
    var v1/* _ids */ = [500, 503, 50330];
    var val = await e.f132(v1/* _ids */);
    console.log("1b");

    var exp_vals = [1009, 103209, 211009];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1323(presets);



    //can read 4 authors, one unavailable
    var presets = [[500, 1009], [503, 103209], [50330, 211009]];
    await e.f1322(presets);
    var v1/* _ids */ = [500, 503, 50330, 332];
    var val = await e.f132(v1/* _ids */);
    console.log("1c");

    var exp_vals = [1009, 103209, 211009, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1323(presets);
  });

  /* read_multiple_id_types/read_id_type(): can fetch id types for each object passed */
  xit("2. can run f134/f135", async () => {
    //f1352(), f1353()
    //can read 1 id type 
    var presets = [[50032, 30]];
    await e.f1352(presets);
    var v1/* _ids */ = [50032];

    var val = await e.f134(v1/* _ids */);
    console.log("2a");

    var exp_vals = [30];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1353(presets);



    //can read 3 id types
    var presets = [[50032, 30], [49920, 27], [589333, 35]];
    await e.f1352(presets);
    var v1/* _ids */ = [50032, 49920, 589333];

    var val = await e.f134(v1/* _ids */);
    console.log("2b");

    var exp_vals = [30, 27, 35];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1353(presets);



    //can read 3 id types
    var presets = [[50032, 30], [49920, 27]];
    await e.f1352(presets);
    var v1/* _ids */ = [50032, 49920, 589333];

    var val = await e.f134(v1/* _ids */);
    console.log("2c");

    var exp_vals = [30, 27, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1353(presets);



    //can read 3 id types
    var presets = [[50032, 30], [49920, 27], [589333, 32]];
    await e.f1352(presets);
    var v1/* _ids */ = [50032, 49920, 589333];

    var val = await e.f134(v1/* _ids */);
    console.log("2d");

    var exp_vals = [30, 27, 32];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1353(presets);



    //can read 1 id type 
    var presets = [[bgN(12, 13), 17]];
    await e.f1352(presets);
    var v1/* _ids */ = [bgN(12, 13)];

    var val = await e.f134(v1/* _ids */);
    console.log("2e");

    var exp_vals = [17];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1353(presets);
  });

  /* require_id_type(): ensures ids passed are the correct type */
  xit("3. can run f136", async () => {
    //f1352(), f1353()
    //can ensure 1 id type 
    var presets = [[50032, 30]];
    await e.f1352(presets);
    var v1/* _ids */ = [50032];

    console.log("3a");
    await expect(e.f136(v1/* _ids */, 30)).to.not.be.reverted;
    await e.f1353(presets);



    //can ensure 3 id types
    var presets = [[50032, 30], [299101, 30], [392001, 30]];
    await e.f1352(presets);
    var v1/* _ids */ = [50032, 299101, 392001];

    console.log("3b");
    await expect(e.f136(v1/* _ids */, 30)).to.not.be.reverted;
    await e.f1353(presets);



    //can ensure 3 id types 
    var presets = [[50032, 30], [299101, 29], [392001, 30]];
    await e.f1352(presets);
    var v1/* _ids */ = [50032, 299101, 392001];

    console.log("3c");
    await expect(e.f136(v1/* _ids */, 30)).to.be.reverted;
    await e.f1353(presets);



    //can ensure 3 id types
    var presets = [[50032, 30], [299101, 30], [392001, 30]];
    await e.f1352(presets);
    var v1/* _ids */ = [50032, 299101, 392001, 43332];

    console.log("3d");
    await expect(e.f136(v1/* _ids */, 30)).to.be.reverted;
    await e.f1353(presets);

  });




  /* require_target_authors(): ensures sender is author of targets */
  xit("4. can run f137/f138", async () => {
    //f1322(), f1323()
    //can ensure 1 id
    var presets = [[50032, 300293], [933023, 300293]];
    await e.f1322(presets);
    var v1/* _ids */ = [50032];
    var v2/* _ids2 */ = [933023];

    console.log("4a");
    await expect(e.f138(v1/* _ids */, v2/* _ids2 */, 300293)).to.not.be.reverted;
    await e.f1323(presets);





    //can ensure 3 id
    var presets = [[50032, 300293], [933023, 300293], [382922, 300293], [103932, 300293], [2999, 300293], [11111, 300293]];
    await e.f1322(presets);
    var v1/* _ids */ = [50032, 382922, 2999];
    var v2/* _ids2 */ = [933023, 103932, 11111];

    console.log("4b");
    await expect(e.f138(v1/* _ids */, v2/* _ids2 */, 300293)).to.not.be.reverted;
    await e.f1323(presets);




    //can ensure 3 ids, one incorrect
    var presets = [[50032, 300293], [933023, 300292], [382922, 300293], [103932, 300293], [2999, 300293], [11111, 300293]];
    await e.f1322(presets);
    var v1/* _ids */ = [50032, 382922, 2999];
    var v2/* _ids2 */ = [933023, 103932, 11111];

    console.log("4c");
    await expect(e.f138(v1/* _ids */, v2/* _ids2 */, 300293)).to.be.reverted;
    await e.f1323(presets);




    //can ensure 3 id, 2 incorrect
    var presets = [[50032, 0], [933023, 0], [382922, 300293], [103932, 300293], [2999, 300293], [11111, 300293]];
    await e.f1322(presets);
    var v1/* _ids */ = [50032, 382922, 2999];
    var v2/* _ids2 */ = [933023, 103932, 11111];

    console.log("4d");
    await expect(e.f138(v1/* _ids */, v2/* _ids2 */, 300293)).to.be.reverted;
    await e.f1323(presets);

  });

  /* scan_int_int_int(): fetches the subscription balance for a given set of accounts and subscriptions */
  xit("5. can run f168", async () => {
    //f1392(),f1393()
    //can fetch 1 balance
    /* 1 last_time_paid,  2 time_paid_for,  3 unclaimed_time_paid */
    var presets = [[50032, 1, 300293, 69999]];
    await e.f1392(presets);

    console.log("5a");
    var val = await e.f168([[50032, 1, 300293]]);
    var exp_vals = [69999];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1393(presets);



    //can fetch 2 balances
    var presets = [[50032, 1, 300293, 69999]];
    await e.f1392(presets);

    console.log("5b");
    var val = await e.f168([[50032, 1, 300293], [30020, 2, 202012]]);
    var exp_vals = [69999, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1393(presets);



    //can fetch 2 balances
    var presets = [[50032, 1, 300293, 69999], [22032, 3, 302919, 29101]];
    await e.f1392(presets);

    console.log("5c");
    var val = await e.f168([[50032, 1, 300293], [22032, 3, 302919]]);
    var exp_vals = [69999, 29101];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1393(presets);



    //can fetch 2 balances
    var presets = [[50032, 1, 300293, 69999], [22032, 2, 302919, 29101]];
    await e.f1392(presets);

    console.log("5d");
    var val = await e.f168([[50032, 1, 300293], [22032, 2, 302919]]);
    var exp_vals = [69999, 29101];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1393(presets);
  });

  /* balance_of(): returns the balance of a list of accounts and exchanges passed */
  xit("6. can run f140", async () => {
    //f1402(),f1403()
    //can fetch 1 balance
    var presets = [[50032, 300293, 6999]];
    await e.f1402(presets);
    var v1/* exchanges */ = [50032];
    var v2/* accounts */ = [300293];
    var v3/* depths */ = [0, 0, 0, 0];

    console.log("6a");
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 1);
    var exp_vals = [6999];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1403(presets);



    //can fetch 2 balances
    var presets = [[50032, 300293, 6999], [190029, 38299, 10000]];
    await e.f1402(presets);
    var v1/* exchanges */ = [50032, 190029];
    var v2/* accounts */ = [300293, 38299];

    console.log("6b");
    var val = await e.f140(v1/* exchanges */, v2/* accounts */,v3/* depths */, 1);
    var exp_vals = [6999, 10000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1403(presets);




    //can fetch 3 balances
    var presets = [[50032, 300293, 6999], [190029, 38299, 10000], [90002, 7888, 400]];
    await e.f1402(presets);
    var v1/* exchanges */ = [50032, 190029, 90002];
    var v2/* accounts */ = [300293, 38299, 7888];

    console.log("6c");
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 1);
    var exp_vals = [6999, 10000, 400];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1403(presets);



    //can fetch 4 balances
    var presets = [[50032, 300293, 6999], [190029, 38299, 10000], [90002, 7888, 4002]];
    await e.f1402(presets);
    var v1/* exchanges */ = [50032, 190029, 90002, 8892];
    var v2/* accounts */ = [300293, 38299, 7888, 390002];

    console.log("6d");
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 1);
    var exp_vals = [6999, 10000, 4002, 0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1403(presets);
  });




  /* update_external_amount/pending_withdraw_balance(): sets a new balance for set external amounts for withdraw */
  xit("7. can run f141/f142", async () => {
    //f141e(), f1402(), f1403()
    //1 account
    var presets = [[4000002, 0]];
    await e.f1402(presets);

    console.log("7a");
    await expect(e.f141e([3000, 4000002, 0])).to.not.be.reverted;

    // var val = await e.f142([4000002]);
    var val = await e.f167([[4000002]], [], 1);
    var exp_vals = [3000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1403(presets);



    //1 account
    var presets = [[4000002, 0]];
    await e.f1402(presets);

    console.log("7b");
    await expect(e.f141e([49393, 4000002, 0])).to.not.be.reverted;

    // var val = await e.f142([4000002]);
    var val = await e.f167([[4000002]], [], 1);
    var exp_vals = [49393];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1403(presets);




    //1 account, pending balance exists
    var presets = [[4000002, 1]];
    await e.f1402(presets);

    console.log("7c");
    await expect(e.f141e([49393, 4000002, 0])).to.be.reverted;

    // var val = await e.f142([4000002]);
    var val = await e.f167([[4000002]], [], 1);
    var exp_vals = [1];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1403(presets);



    //1 account, pending balance exists
    var presets = [[4000002, 1099]];
    await e.f1402(presets);

    console.log("7d");
    await expect(e.f141e([49393, 4000002, 0])).to.be.reverted;

    // var val = await e.f142([4000002]);
    var val = await e.f167([[4000002]], [], 1);
    var exp_vals = [1099];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1403(presets);
  });

  /* transaction_start/transaction_end(): ensures no transactions are currently taking place when transaction is started */
  xit("8. can run f143/f144", async () => {
    //f1432(), f1442(), f1433(), f1434(), f1435()
    //ok transaction start end
    console.log("8a");
    await e./* t_set_booted */f1434(true);

    await expect(e./* t_transaction_start */f1432([bgN(12, 14), bgN(12, 14)])).to.not.be.reverted;
    expect(await e./* t_get_locked */f1435()).to.equal(2);
    expect(await e./* t_get_id */f1433()).to.equal(1001);

    await expect(e./* t_transaction_end */f1442()).to.not.be.reverted;
    expect(await e./* t_get_locked */f1435()).to.equal(1);



    //E5 not booted
    console.log("8b");
    await e./* t_set_booted */f1434(false);
    await expect(e./* t_transaction_start */f1432([bgN(12, 14), bgN(12, 14)])).to.be.reverted;



    //transaction is locked
    console.log("8c");
    await e./* t_set_booted */f1434(true);

    await expect(e./* t_transaction_start */f1432([bgN(12, 14), bgN(12, 14)])).to.not.be.reverted;
    expect(await e./* t_get_locked */f1435()).to.equal(2);
    expect(await e./* t_get_id */f1433()).to.equal(1002);

    await expect(e./* t_transaction_start */f1432([bgN(12, 14), bgN(12, 14)])).to.be.reverted;
    await expect(e./* t_transaction_end */f1442()).to.not.be.reverted;
    expect(await e./* t_get_locked */f1435()).to.equal(1);

    await expect(e./* t_transaction_start */f1432([bgN(12, 14), bgN(12, 14)])).to.not.be.reverted;
    expect(await e./* t_get_locked */f1435()).to.equal(2);
    expect(await e./* t_get_id */f1433()).to.equal(1003);

    await expect(e./* t_transaction_end */f1442()).to.not.be.reverted;
    expect(await e./* t_get_locked */f1435()).to.equal(1);



    //exceeded block limit
    console.log("8d");
    await e./* t_set_booted */f1434(false);
    await expect(e./* t_transaction_start */f1432([1, bgN(12, 14)])).to.be.reverted;



    //exceeded time limit
    console.log("8e");
    await e./* t_set_booted */f1434(false);
    await expect(e./* t_transaction_start */f1432([bgN(12, 14), 1])).to.be.reverted;
  });

  /* withdraw(): can send ether to specified target from sender's account */
  xit("9. can run f145", async () => {
    //f1402(), f1403(), f1434(), f18e(), f1404(), f1405()
    const [owner, receiver] = await ethers.getSigners();
    await e./* receive_ether */f18e({ from: owner.address, value: 10000 });

    var v1/* first_contract_balance */ = await e./* get_balance */f147();
    var v2/* first_receiver_balance */ = await receiver.getBalance();
    console.log("" + v1/* first_contract_balance */);
    console.log("" + v2/* first_receiver_balance */);
    await e./* t_set_booted */f1434(true);




    //withdraw 100 wei
    var presets = [[4000002, 100]];
    await e./* set_withdrawal */f1402(presets);
    await e./* set_address account */f1404(owner.address, 4000002);

    console.log("9a");
    await expect(e.connect(owner).f145(receiver.address, [bgN(12, 14), bgN(12, 14)], { gasLimit: 65000 })).to.not.be.reverted;

    var val = await e./* pending_withdraw_balance */f167([[4000002]], [], 1);
    var exp_vals = [0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    await e./* delete_withdrawal */f1403(presets);
    await e./* delete_address account */f1405(owner.address);

    var v3/* contract_balance */ = await e./* get_balance */f147();
    var v4/* receiver_balance */ = await receiver.getBalance();
    console.log("" + v3/* contract_balance */);
    console.log("" + v4/* receiver_balance */);

    expect("" + v4/* receiver_balance */).to.equal("10000000000000000000100");
    expect("" + v3/* contract_balance */).to.equal("9900");



    //withdraw 900 wei
    var presets = [[4000002, 900]];
    await e./* set_withdrawal */f1402(presets);
    await e./* set_address account */f1404(owner.address, 4000002);

    console.log("9b");
    await expect(e.connect(owner).f145(receiver.address, [bgN(12, 14), bgN(12, 14)], { gasLimit: 65000 })).to.not.be.reverted;

    var val = await e./* pending_withdraw_balance */f167([[4000002]], [], 1);
    var exp_vals = [0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    await e./* delete_withdrawal */f1403(presets);
    await e./* delete_address account */f1405(owner.address);

    var v3/* contract_balance */ = await e./* get_balance */f147();
    var v4/* receiver_balance */ = await receiver.getBalance();
    console.log("" + v3/* contract_balance */);
    console.log("" + v4/* receiver_balance */);

    expect("" + v4/* receiver_balance */).to.equal("10000000000000000001000");
    expect(v3/* contract_balance */).to.equal(9000);




    //withdraw 3000 wei
    var presets = [[4000002, 3001]];
    await e./* set_withdrawal */f1402(presets);
    await e./* set_address account */f1404(owner.address, 4000002);

    console.log("9c");
    await expect(e.connect(owner).f145(receiver.address, [bgN(12, 14), bgN(12, 14)], { gasLimit: 65000 })).to.not.be.reverted;

    var val = await e./* pending_withdraw_balance */f167([[4000002]], [], 1);
    var exp_vals = [0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    await e./* delete_withdrawal */f1403(presets);
    await e./* delete_address account */f1405(owner.address);

    var v3/* contract_balance */ = await e./* get_balance */f147();
    var v4/* receiver_balance */ = await receiver.getBalance();
    console.log("" + v3/* contract_balance */);
    console.log("" + v4/* receiver_balance */);

    expect("" + v4/* receiver_balance */).to.equal("10000000000000000004001");
    expect(v3/* contract_balance */).to.equal(5999);



    //withdraw 999 wei
    var presets = [[4000002, 999]];
    await e./* set_withdrawal */f1402(presets);
    await e./* set_address account */f1404(owner.address, 4000002);

    console.log("9c");
    await expect(e.connect(owner).f145(receiver.address, [bgN(12, 14), bgN(12, 14)], { gasLimit: 65000 })).to.not.be.reverted;

    var val = await e./* pending_withdraw_balance */f167([[4000002]], [], 1);
    var exp_vals = [0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    await e./* delete_withdrawal */f1403(presets);
    await e./* delete_address account */f1405(owner.address);

    var v3/* contract_balance */ = await e./* get_balance */f147();
    var v4/* receiver_balance */ = await receiver.getBalance();
    console.log("" + v3/* contract_balance */);
    console.log("" + v4/* receiver_balance */);

    expect("" + v4/* receiver_balance */).to.equal("10000000000000000005000");
    expect(v3/* contract_balance */).to.equal(5000);




    //invalid gas limit
    var presets = [[4000002, 999]];
    await e./* set_withdrawal */f1402(presets);
    await e./* set_address account */f1404(owner.address, 4000002);

    console.log("9d");
    await expect(e.connect(owner).f145(receiver.address, [bgN(12, 14), bgN(12, 14)], { gasLimit: 195000 })).to.be.reverted;



    //invalid contract balance limit
    var presets = [[4000002, 1000000999]];
    await e./* set_withdrawal */f1402(presets);
    await e./* set_address account */f1404(owner.address, 4000002);

    console.log("9e");
    await expect(e.connect(owner).f145(receiver.address, [bgN(12, 14), bgN(12, 14)], { gasLimit: 85000 })).to.be.reverted;




    //withdraw 100 wei
    var presets = [[4000002, 100]];
    await e./* set_withdrawal */f1402(presets);
    await e./* set_address account */f1404(owner.address, 4000002);

    console.log("9f");
    await expect(e.connect(owner).f145(receiver.address, [bgN(12, 14), bgN(12, 14)], { gasLimit: 65000 })).to.emit(e, "e3"/* PendingWithdraw */);
    /* emit Withdraw(v1, p1, v2, 0, 0); */

    var val = await e./* pending_withdraw_balance */f167([[4000002]], [], 1);
    var exp_vals = [0];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }

    await e./* delete_withdrawal */f1403(presets);
    await e./* delete_address account */f1405(owner.address);

    var v3/* contract_balance */ = await e./* get_balance */f147();
    var v4/* receiver_balance */ = await receiver.getBalance();
    console.log("" + v3/* contract_balance */);
    console.log("" + v4/* receiver_balance */);

    expect("" + v4/* receiver_balance */).to.equal("10000000000000000005100");
    expect("" + v3/* contract_balance */).to.equal("4900");

  });




  /* make_id(): generates a new unique id */
  xit("10. can run f146", async () => {
    //f1433(), f1462()
    //make new id
    console.log("10a");
    await expect(e./* make_id */f1462()).to.not.be.reverted;
    var val = await e./* t_get_id */f1433();
    expect(val).to.equal(1001);


    //make new id
    console.log("10b");
    await expect(e./* make_id */f1462()).to.not.be.reverted;
    var val = await e./* t_get_id */f1433();
    expect(val).to.equal(1002);


    //make new id
    console.log("10c");
    await expect(e./* make_id */f1462()).to.not.be.reverted;
    var val = await e./* t_get_id */f1433();
    expect(val).to.equal(1003);


    //make new id
    console.log("10d");
    await expect(e./* make_id */f1462()).to.not.be.reverted;
    var val = await e./* t_get_id */f1433();
    expect(val).to.equal(1004);


    //make new id
    console.log("10e");
    await expect(e./* make_id */f1462()).to.not.be.reverted;
    var val = await e./* t_get_id */f1433();
    expect(val).to.equal(1005);

  });

  /* get_balance(): returns the ether balance of the smart contract */
  xit("11. can run f147", async () => {
    //f18e()
    console.log("11a");
    const [owner] = await ethers.getSigners();
    await e./* receive_ether */f18e({ from: owner.address, value: 10000 });
    var val = await e./* get_balance */f147();
    expect(val).to.equal(10000);


    console.log("11b");
    await e./* receive_ether */f18e({ from: owner.address, value: 10000 });
    var val = await e./* get_balance */f147();
    expect(val).to.equal(20000);


    console.log("11c");
    await e./* receive_ether */f18e({ from: owner.address, value: 10000 });
    var val = await e./* get_balance */f147();
    expect(val).to.equal(30000);


    console.log("11d");
    await e./* receive_ether */f18e({ from: owner.address, value: 10001 });
    var val = await e./* get_balance */f147();
    expect(val).to.equal(40001);

  });

  /* transfer(): transfers tokens from sender to receiver */
  xit("12. can run f148", async () => {
    //f1402(),f1403(),f1482(),f1402e(),f1403e()
    //can transfer small amounts
    var presets = [[50032, 300293, 1000], [50032, 400003, 0]];
    await e.f1402(presets);
    var v1/* exchanges */ = [50032, 50032];
    var v2/* accounts */ = [300293, 400003];
    var v3/* depths */  = [0, 0];

    console.log("12a");
    await e.f1482(50032, 300293/* sender */, 500/* amount */, 400003/* receiver */);
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 1);
    var exp_vals = [500, 500];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1403(presets);


    //can transfer small amounts
    var presets = [[50032, 300293, 50000], [50032, 400003, 0]];
    await e.f1402(presets);
    var v1/* exchanges */ = [50032, 50032];
    var v2/* accounts */ = [300293, 400003];

    console.log("12b");
    await e.f1482(50032, 300293/* sender */, 9000/* amount */, 400003/* receiver */);
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 1);
    var exp_vals = [41000, 9000];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1403(presets);



    //can transfer small amounts
    var presets = [[50032, 300293, 444], [50032, 400003, 40]];
    await e.f1402(presets);
    var v1/* exchanges */ = [50032, 50032];
    var v2/* accounts */ = [300293, 400003];

    console.log("12c");
    await e.f1482(50032, 300293/* sender */, 4/* amount */, 400003/* receiver */);
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 1);
    var exp_vals = [440, 44];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1403(presets);




    //can transfer large amounts amounts
    var presets = [[50032, 300293, bgN(13, 54)], [50032, 400003, 0]];
    await e.f1402(presets);
    var v1/* exchanges */ = [50032, 50032];
    var v2/* accounts */ = [300293, 400003];

    console.log("12d");
    await e.f1482(50032, 300293/* sender */, bgN(3, 54)/* amount */, 400003/* receiver */);
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 1);
    var exp_vals = [bgN(10, 54), bgN(3, 54)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1403(presets);



    //can transfer large amounts amounts
    var presets = [[50032, 300293, bgN(66, 60)], [50032, 400003, 0]];
    await e.f1402(presets);
    var v1/* exchanges */ = [50032, 50032];
    var v2/* accounts */ = [300293, 400003];

    console.log("12e");
    await e.f1482(50032, 300293/* sender */, bgN(6, 60)/* amount */, 400003/* receiver */);
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 1);
    var exp_vals = [bgN(60, 60), bgN(6, 60)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1403(presets);




    //can transfer large amounts amounts
    var presets = [[50032, 300293, bgN(23, 68)], [50032, 400003, 0]];
    await e.f1402(presets);
    var v1/* exchanges */ = [50032, 50032];
    var v2/* accounts */ = [300293, 400003];

    console.log("12f");
    await e.f1482(50032, 300293/* sender */, bgN(3, 68)/* amount */, 400003/* receiver */);
    var val = await e.f140(v1/* exchanges */, v2/* accounts */, v3/* depths */, 1);
    var exp_vals = [bgN(20, 68), bgN(3, 68)];
    for (let j = 0; j < exp_vals.length; j++) {
      expect(await val[j]).to.equal(exp_vals[j]);
    }
    await e.f1403(presets);



    //invalid balance
    var presets = [[50032, 300293, 200], [50032, 400003, 0]];
    await e.f1402(presets);
    var v1/* exchanges */ = [50032, 50032];
    var v2/* accounts */ = [300293, 400003];

    console.log("12g");
    await expect(e.f1482(50032, 300293/* sender */, 500/* amount */, 400003/* receiver */)).to.be.reverted;
    await e.f1403(presets);



    //invalid balance
    var presets = [[50032, 300293, 100], [50032, 400003, 0]];
    await e.f1402(presets);
    var v1/* exchanges */ = [50032, 50032];
    var v2/* accounts */ = [300293, 400003];

    console.log("12h");
    await expect(e.f1482(50032, 300293/* sender */, 400000/* amount */, 400003/* receiver */)).to.be.reverted;
    await e.f1403(presets);




    //can emit transfer
    var presets = [[50032, 300293, 1000], [50032, 400003, 0]];
    await e.f1402(presets);
    var v1/* exchanges */ = [50032, 50032];
    var v2/* accounts */ = [300293, 400003];

    console.log("12i");
    await expect(e.f1482(50032, 300293/* sender */, 500/* amount */, 400003/* receiver */)).to.emit(e, "e1");
    /* emit Transfer(p1, p2, p4, p3, 0, 0); */
    await e.f1403(presets);




    //attempt to transfer after expiry time
    var presets = [[50032, 300293, 1000, 100], [50032, 400003, 0, 100]];
    await e.f1402e(presets);
    var v1/* exchanges */ = [50032, 50032];
    var v2/* accounts */ = [300293, 400003];
    var v3/* depths */  = [0, 0];

    console.log("12j");
    await expect(e.f1482(50032, 300293/* sender */, 400000/* amount */, 400003/* receiver */)).to.be.reverted;
    await e.f1403e(presets);

  });





  /* update_total_minted_for_current_block(): updates total amount of tokens minted in current block */
  xit("13. can run f149", async () => {
    //f1496(), f14911(), f1492(), f1493(), f1494(), f1495()
    //1 exchange
    var presets = [[1, 50032, 1, 1, 1], [1, 50032, 2, 4, 0], [1, 50032, 2, 5, 0]];
    var v1/* data */ = [[0], [50032], [], [], []];
    var v2/* tokens_to_receive */ = [500];

    console.log("13a");
    await e.f1496(v1/* data */, v2/* tokens_to_receive */, presets);
    var val = await e.f1494(presets);

    var exp_vals = [1, 500, 0];
    var v3 = await e.f1495();
    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 2) {
        expect(await val[j]).to.equal(exp_vals[j]);
      }
    }
    expect(await val[2]).to.equal(v3);
    await e.f1493(presets);



    //3 exchanges
    var presets = [
      [1, 50032, 1, 1, 1], [1, 50032, 2, 4, 0], [1, 50032, 2, 5, 0],
      [1, 300021, 1, 1, 1], [1, 300021, 2, 4, 0], [1, 300021, 2, 5, 0],
      [1, 738392, 1, 1, 1], [1, 738392, 2, 4, 0], [1, 738392, 2, 5, 0]
    ];
    var v1/* data */ = [[0, 0, 0], [50032, 300021, 738392], [], [], []];
    var v2/* tokens_to_receive */ = [500, 7990, 40000];

    console.log("13b");
    await e.f1496(v1/* data */, v2/* tokens_to_receive */, presets);
    var val = await e.f1494(presets);

    var exp_vals = [1, 500, 0, 1, 7990, 0, 1, 40000, 0];
    var v3 = await e.f1495();
    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 2 && j != 5 && j != 8) {
        expect(await val[j]).to.equal(exp_vals[j]);
      } else {
        expect(await val[j]).to.equal(v3);
      }
    }
    await e.f1493(presets);



    //3 exchanges, 2 new blocks
    var presets = [
      [1, 50032, 1, 1, 1], [1, 50032, 2, 4, 0], [1, 50032, 2, 5, 0],
      [1, 300021, 1, 1, 1], [1, 300021, 2, 4, 50], [1, 300021, 2, 5, 0, 1],
      [1, 738392, 1, 1, 1], [1, 738392, 2, 4, 0], [1, 738392, 2, 5, 0]
    ];
    var v1/* data */ = [[0, 0, 0], [50032, 300021, 738392], [], [], []];
    var v2/* tokens_to_receive */ = [500, 50, 40000];

    console.log("13c");
    await e.f1496(v1/* data */, v2/* tokens_to_receive */, presets);
    var val = await e.f1494(presets);

    var exp_vals = [1, 500, 0, 1, 100, 0, 1, 40000, 0];
    var v3 = await e.f1495();
    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 2 && j != 5 && j != 8) {
        expect(await val[j]).to.equal(exp_vals[j]);
      } else {
        expect(await val[j]).to.equal(v3);
      }
    }
    await e.f1493(presets);




    //3 exchanges
    var presets = [
      [1, 50032, 1, 1, 1], [1, 50032, 2, 4, 0], [1, 50032, 2, 5, 0],
      [1, 300021, 1, 1, 1], [1, 300021, 2, 4, 404040], [1, 300021, 2, 5, 0],
      [1, 738392, 1, 1, 1], [1, 738392, 2, 4, 5], [1, 738392, 2, 5, 0]
    ];
    var v1/* data */ = [[0, 1, 0], [50032, 300021, 738392], [], [], []];
    var v2/* tokens_to_receive */ = [500, 7990, 40000];

    console.log("13d");
    await e.f1496(v1/* data */, v2/* tokens_to_receive */, presets);
    var val = await e.f1494(presets);

    var exp_vals = [1, 500, 0, 1, 404040, 0, 1, 40000, 0];
    var v3 = await e.f1495();
    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 2 && j != 8) {
        expect(await val[j]).to.equal(exp_vals[j]);
      } else {
        expect(await val[j]).to.equal(v3);
      }
    }
    await e.f1493(presets);



    //3 exchanges
    var presets = [
      [1, 50032, 1, 1, 1], [1, 50032, 2, 4, 0], [1, 50032, 2, 5, 0],
      [1, 300021, 1, 1, 0], [1, 300021, 2, 4, 0], [1, 300021, 2, 5, 0],
      [1, 738392, 1, 1, 1], [1, 738392, 2, 4, 0], [1, 738392, 2, 5, 0]
    ];
    var v1/* data */ = [[0, 0, 0], [50032, 300021, 738392], [], [], []];
    var v2/* tokens_to_receive */ = [500, 7990, 40000];

    console.log("13e");
    await e.f1496(v1/* data */, v2/* tokens_to_receive */, presets);
    var val = await e.f1494(presets);

    var exp_vals = [1, 500, 0, 0, 0, 0, 1, 40000, 0];
    var v3 = await e.f1495();
    for (let j = 0; j < exp_vals.length; j++) {
      if (j != 2 && j != 8) {
        expect(await val[j]).to.equal(exp_vals[j]);
      } else {
        expect(await val[j]).to.equal(v3);
      }
    }
    await e.f1493(presets);
  });

  /* SPEND */
  xit("?????", async () => {
    //f14911(), f1495(), f1497(), f1498(), f1499(), f14910(), f1496()
    /*
        hardhat: {
          gasPrice: 30_000_000(default)
          ...
        }
    */
    var v1/* boot_data */ = [
      [[0, 0, 0, 5], 
      [bgN(35, 5), bgN(53, 5)/* 1 */, 0, 0, 0, bgN(50, 16)/* 5 */, bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 0, bgN(3, 16)/* 14 */, 1, bgN(35, 8), 0, 0], 
      [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]]
    ];
    var v2/* boot_id_data_type_data */ = [[5, 31]];
    await h5.f1497(v1/* boot_data */, v2/* boot_id_data_type_data */, h52.address);
    await h52.f1496(h5.address, true);
    var v3/* block_number */ = await h5.f1495();

    //XXXXX f123: /* require( v4[0] != block.number ); */ XXXXX
    /* loops: mints per block,  calls: mints in successive blocks  */
    var calls = 40;
    var loops = 30;
    var skips = [];
    var skip = false;
    console.log("Block: " + v3 + ", Calls: " + calls + ", Loops: " + loops + ", Skips Block: " + skips + ", Skip: " + skip);

    var v4/* data */ = [[0], [5], [bgN(35, 5)], [10001], []];
    var v5/* metas */ = [10001, 0, 0, 0];
    var v6/* buy_sell_limits */ = [[], []];

    // var val = 0;
    // var v7/* exchanges */ = [5];
    // var v8/* accounts */ = [10002];

    for (let j = 0; j < calls; j++) {
      var found = false;
      for (var i = 0; i < skips.length; i++) {
        if (skips[i] == j) {
          found = true;
          break;
        }
      }
      if (found && skip) {
        await h5.f14911(9);
      } else {
        await h5./* t_call_execute_buy_or_sell_tokens */f1498(v4, v5, false, v6, loops);
      }

      // if (j == calls - 1) {
      //   val = await h52.f140(v7/* exchanges */, v8/* accounts */);
      // }

    }

    v4/* data */ = [[0], [5], [bgN(35, 5)], [20001], []];
    await h5./* t_call_execute_buy_or_sell_tokens */f1498(v4, v5, false, v6, 1);

    var v7/* exchanges */ = [5];
    var v8/* accounts */ = [20002];
    var depths = [0];
    var val = await h52.f140(v7/* exchanges */, v8/* accounts */, depths, 1);


    var v9/* buy_sell_data */ = await h5./* get_buy_sell_data */f1499();
    // console.log(""+v9);

    var v10/* exchange_data */ = await h5./* get_exchange_data */f14910();
    // console.log("l1(last_minter_balance_avg): "/* last_minter_balance_avg */ + nWC(val / calls));
    console.log("l1(last_minter_balance_avg): "/* last_minter_balance_avg */ + nWC(val));
    // console.log("last_minter_balance_total:"+nWC(val));
    /* total_supply   current_block_mint_total   active_block_limit_reduction_proportion  */
    console.log("l2(total_supply): "/* total_supply */ + nWC(v10[0]));
    console.log("l3(current_block_mint_total): "/* current_block_mint_total */ + nWC(v10[1]));
    console.log("l4(active_block_limit_reduction_proportion): "/* active_block_limit_reduction_proportion */ + nWC(v10[2]));

    var v3/* block_number */ = await h5.f1495();
    console.log("l5(Block): "/* Block */ + v3);

    // [ [0,0,0,5], [bgN(35,6), bgN(35,6),0,0,0,bgN(53,16),bgN(90,16), bgN(3,16)/* 7 */,3,0,0,0,2,0,bgN(3,16),1,bgN(53,9),0,0], [bgN(1,72),bgN(1,72),0/* 2 */,0,0,0,bgN(100,16)], [0], [0] ]

    /*

      l5: 14, Calls: 1, Loops: 1
      last_minter_balance_total:35,000,000
      l2: 35,000,000
      l3: 35,000,000
      l4: 1000000000000000000
      l5: 15



      l5: 14, Calls: 1, Loops: 2
      last_minter_balance_total:35,000,000
      l2: 70,000,000
      l3: 70,000,000
      l4: 1000000000000000000
      l5: 15



      l5: 14, Calls: 1, Loops: 3
      last_minter_balance_total:17,500,000
      l2: 87,500,000
      l3: 87,500,000
      l4: 1000000000000000000
      l5: 15



      l5: 14, Calls: 1, Loops: 5
      last_minter_balance_total:10,241,438
      l2: 111,128,938
      l3: 111,128,938
      l4: 1000000000000000000
      l5: 15



      l5: 14, Calls: 1, Loops: 10
      last_minter_balance_total:8,174,169
      l2: 153,074,862
      l3: 153,074,862
      l4: 1000000000000000000
      l5: 15



      l5: 14, Calls: 1, Loops: 15
      last_minter_balance_total:6,790,315
      l2: 184,021,007
      l3: 184,021,007
      l4: 1000000000000000000
      l5: 15



      l5: 14, Calls: 1, Loops: 20
      last_minter_balance_total:4,145,061
      l2: 209,516,756
      l3: 209,516,756
      l4: 1000000000000000000
      l5: 15



      l5: 14, Calls: 1, Loops: 30
      last_minter_balance_total:4,839,120
      l2: 252,235,206
      l3: 252,235,206
      l4: 1000000000000000000
      l5: 15



      l5: 14, Calls: 1, Loops: 50
      last_minter_balance_total:3,801,263
      l2: 320,479,198
      l3: 320,479,198
      l4: 1000000000000000000
      l5: 15



      l5: 14, Calls: 1, Loops: 80
      last_minter_balance_total:2,547,548
      l2: 402,392,188
      l3: 402,392,188
      l4: 1000000000000000000
      l5: 15



      l5: 14, Calls: 1, Loops: 90
      last_minter_balance_total:2,879,837
      l2: 423,820,154
      l3: 423,820,154
      l4: 1000000000000000000
      l5: 15



      l5: 14, Calls: 1, Loops: 100
      last_minter_balance_total:1,931,295
      l2: 447,089,722
      l3: 447,089,722
      l4: 1000000000000000000
      l5: 15



      l5: 14, Calls: 1, Loops: 1
      last_minter_balance_total:35,000,000
      l2: 35,000,000
      l3: 35,000,000
      l4: 1000000000000000000
      l5: 15







      l5: 14, Calls: 1, Loops: 5
      last_minter_balance_total:10,241,438
      l2: 111,128,938
      l3: 111,128,938
      l4: 1,000,000,000,000,000,000(100%)
      l5: 15



      l5: 14, Calls: 2, Loops: 5
      last_minter_balance_total:22,717,276
      l2: 183,125,014
      l3: 71,996,076
      l4: 531,441,000,000,000,000(53.1%)
      l5: 16




      l5: 14, Calls: 3, Loops: 5
      last_minter_balance_total:33,683,810
      l2: 236,641,098
      l3: 53,516,084
      l4: 348,678,440,100,000,000(34.8%)
      l5: 17




      l5: 14, Calls: 5, Loops: 5
      last_minter_balance_total:51,299,316
      l2: 322,109,369
      l3: 38,777,369
      l4: 228,767,924,549,610,000(22.8%)
      l5: 19



      l5: 14, Calls: 10, Loops: 5
      last_minter_balance_total:84,519,847
      l2: 487,802,238
      l3: 36,030,945
      l4: 205,891,132,094,649,000(20.5%)
      l5: 24




      l5: 14, Calls: 15, Loops: 5
      last_minter_balance_total:116,371,202
      l2: 646,897,397
      l3: 32,427,850
      l4: 185,302,018,885,184,100(18.5%)
      l5: 29




      l5: 14, Calls: 20, Loops: 5
      last_minter_balance_total:148,943,176
      l2: 809,595,651
      l3: 29,104,257
      l4: 166,771,816,996,665,690(16.6%)
      l5: 34




      l5: 14, Calls: 30, Loops: 5
      last_minter_balance_total:214,015,062
      l2: 1,134,712,657
      l3: 32,427,850
      l4: 185,302,018,885,184,100(18.5%)
      l5: 44



      l5: 14, Calls: 50, Loops: 5
      last_minter_balance_total:344,230,896
      l2: 1,785,226,171
      l3: 29,104,257
      l4: 166,771,816,996,665,690(16.6%)
      l5: 64




      l5: 14, Calls: 90, Loops: 5
      last_minter_balance_total:604,590,502
      l2: 3,085,973,697
      l3: 32,427,850
      l4: 185,302,018,885,184,100(18.5%)
      l5: 104








      l5: 14, Calls: 1, Loops: 14
      last_minter_balance_total:4,957,954
      l2: 177,230,692
      l3: 177,230,692
      l4: 1,000,000,000,000,000,000(100%)
      l5: 15



      l5: 14, Calls: 2, Loops: 14
      last_minter_balance_total:8,669,262
      l2: 280,116,784
      l3: 102,886,092
      l4: 348,678,440,100,000,000(34.8%)
      l5: 16




      l5: 14, Calls: 3, Loops: 14
      last_minter_balance_total:12,185,530
      l2: 362,694,931
      l3: 82,578,147
      l4: 228,767,924,549,610,000(22.8%)
      l5: 17




      l5: 14, Calls: 5, Loops: 14
      last_minter_balance_total:18,924,736
      l2: 481,903,358
      l3: 55,200,829
      l4: 121,576,654,590,569,288(12.1%)
      l5: 19



      l5: 14, Calls: 10, Loops: 14
      last_minter_balance_total:31,545,328
      l2: 662,322,625
      l3: 28,488,523
      l4: 58,149,737,003,040,058(5.8%)
      l5: 24



      l5: 14, Calls: 15, Loops: 14
      last_minter_balance_total:43,128,608
      l2: 824,483,708
      l3: 35,176,988
      l4: 71,789,798,769,185,255(7.1%)
      l5: 29




      l5: 14, Calls: 23, Loops: 14
      last_minter_balance_total:61,043,746
      l2: 1,075,281,129
      l3: 31,659,292
      l4: 64,610,818,892,266,725(6.4%)
      l5: 37



      l5: 14, Calls: 35, Loops: 14
      last_minter_balance_total:88,280,786
      l2: 1,456,580,341
      l3: 31,659,292
      l4: 64,610,818,892,266,720(6.4%)
      l5: 49




      l5: 14, Calls: 53, Loops: 14
      last_minter_balance_total:129,136,346
      l2: 2,028,529,159
      l3: 31,659,292
      l4: 64,610,818,892,266,712(6.4%)
      l5: 67




      l5: 14, Calls: 65, Loops: 14
      last_minter_balance_total:156,373,386
      l2: 2,409,828,371
      l3: 31,659,292
      l4: 64,610,818,892,266,707(6.4%)
      l5: 79









      l5: 14, Calls: 1, Loops: 23
      last_minter_balance_total:5,140,147
      l2: 223,989,341
      l3: 223,989,341
      l4: 1,000,000,000,000,000,000(100%)
      l5: 15




      l5: 14, Calls: 2, Loops: 23
      last_minter_balance_total:7,926,807
      l2: 343,264,884
      l3: 119,275,543
      l4: 282,429,536,481,000,000(28.2%)
      l5: 16




      l5: 14, Calls: 3, Loops: 23
      last_minter_balance_total:10,046,064
      l2: 429,769,378
      l3: 86,504,494
      l4: 150,094,635,296,999,121(15.0%)
      l5: 17




      l5: 14, Calls: 5, Loops: 23
      last_minter_balance_total:14,048,008
      l2: 556,220,234
      l3: 58,694,431
      l4: 79,766,443,076,872,509(7.9%)
      l5: 19




      l5: 14, Calls: 10, Loops: 23
      last_minter_balance_total:22,068,218
      l2: 750,134,164
      l3: 30,660,589
      l4: 38,152,042,447,694,581(3.8%)
      l5: 24




      l5: 14, Calls: 15, Loops: 23
      last_minter_balance_total:29,611,869
      l2: 924,821,423
      l3: 37,888,465
      l4: 47,101,286,972,462,444(4.7%)
      l5: 29




      l5: 14, Calls: 23, Loops: 23
      last_minter_balance_total:41,309,852
      l2: 1,194,954,730
      l3: 34,124,870
      l4: 42,391,158,275,216,196(4.2%)
      l5: 37




      l5: 14, Calls: 35, Loops: 23
      last_minter_balance_total:59,067,796
      l2: 1,605,650,426
      l3: 34,124,870
      l4: 42,391,158,275,216,191(4.2%)
      l5: 49




      l5: 14, Calls: 53, Loops: 23
      last_minter_balance_total:85,704,712
      l2: 2,221,693,970
      l3: 34,124,870
      l4: 42,391,158,275,216,183(4.2%)
      l5: 67



      l5: 14, Calls: 65, Loops: 23
      last_minter_balance_total:103,462,656
      l2: 2,632,389,666
      l3: 34,124,870
      l4: 42,391,158,275,216,178(4.2%)
      l5: 79









      l5: 14, Calls: 1, Loops: 35
      last_minter_balance_total:3,418,552
      l2: 271,972,046
      l3: 271,972,046
      l4: 1,000,000,000,000,000,000(100%)
      l5: 15



      l5: 14, Calls: 2, Loops: 35
      last_minter_balance_total:5,171,605
      l2: 404,280,323
      l3: 132,308,277
      l4: 228,767,924,549,610,000(22.8%)
      l5: 16




      l5: 14, Calls: 3, Loops: 35
      last_minter_balance_total:6,580,924
      l2: 500,830,006
      l3: 96,549,683
      l4: 121,576,654,590,569,288(12.1%)
      l5: 17



      l5: 14, Calls: 5, Loops: 35
      last_minter_balance_total:9,152,241
      l2: 636,430,525
      l3: 58,649,572
      l4: 52,334,763,302,736,053(5.2%)
      l5: 19



      l5: 14, Calls: 10, Loops: 35
      last_minter_balance_total:14,382,533
      l2: 830,332,555
      l3: 30,630,456
      l4: 25,031,555,049,932,414(2.5%)
      l5: 24




      l5: 14, Calls: 15, Loops: 35
      last_minter_balance_total:19,317,495
      l2: 1,004,745,747
      l3: 37,820,653
      l4: 30,903,154,382,632,606(3.0%)
      l5: 29




      l5: 14, Calls: 23, Loops: 35
      last_minter_balance_total:26,978,114
      l2: 1,274,490,566
      l3: 34,070,715
      l4: 27,812,838,944,369,342(2.7%)
      l5: 37




      l5: 14, Calls: 35, Loops: 35
      last_minter_balance_total:38,600,246
      l2: 1,684,577,862
      l3: 34,070,715
      l4: 27,812,838,944,369,340(2.7%)
      l5: 49



      l5: 14, Calls: 53, Loops: 35
      last_minter_balance_total:56,033,444
      l2: 2,299,708,806
      l3: 34,070,715
      l4: 27,812,838,944,369,340(2.7%)
      l5: 67








      l5: 14, Calls: 1, Loops: 53
      last_minter_balance_total:3,236,291
      l2: 330,732,851
      l3: 330,732,851
      l4: 1,000,000,000,000,000,000(100%)
      l5: 15



      l5: 14, Calls: 2, Loops: 53
      last_minter_balance_total:4,375,003
      l2: 462,914,421
      l3: 132,181,570
      l4: 150,094,635,296,999,121(15.0%)
      l5: 16




      l5: 14, Calls: 3, Loops: 53
      last_minter_balance_total:5,294,538
      l2: 559,247,434
      l3: 96,333,013
      l4: 79,766,443,076,872,509(7.9%)
      l5: 17





      l5: 14, Calls: 5, Loops: 53
      last_minter_balance_total:6,972,538
      l2: 694,591,045
      l3: 58,520,038
      l4: 34,336,838,202,925,124(3.4%)
      l5: 19




      l5: 14, Calls: 10, Loops: 53
      last_minter_balance_total:10,397,843
      l2: 887,500,449
      l3: 30,445,143
      l4: 16,423,203,268,260,656(1.6%)
      l5: 24




      l5: 14, Calls: 15, Loops: 53
      last_minter_balance_total:13,633,367
      l2: 1,060,800,184
      l3: 37,577,256
      l4: 20,275,559,590,445,251(2.0%)
      l5: 29



      l5: 14, Calls: 23, Loops: 53
      last_minter_balance_total:18,657,195
      l2: 1,328,840,245
      l3: 33,850,040
      l4: 18,248,003,631,400,722(1.8%)
      l5: 37




      l5: 14, Calls: 35, Loops: 53
      last_minter_balance_total:26,277,867
      l2: 1,736,330,001
      l3: 33,850,040
      l4: 18,248,003,631,400,717(1.8%)
      l5: 49










      l5: 14, Calls: 1, Loops: 65
      last_minter_balance_total:2,979,492
      l2: 364,054,146
      l3: 364,054,146
      l4: 1,000,000,000,000,000,000(100%)
      l5: 15




      l5: 14, Calls: 2, Loops: 65
      last_minter_balance_total:3,906,243
      l2: 495,793,002
      l3: 131,738,856
      l4: 121,576,654,590,569,287(12.1%)
      l5: 16




      l5: 14, Calls: 3, Loops: 65
      last_minter_balance_total:4,652,527
      l2: 591,856,584
      l3: 96,063,582
      l4: 64,610,818,892,266,732(6.4%)
      l5: 17




      l5: 14, Calls: 5, Loops: 65
      last_minter_balance_total:6,013,811
      l2: 726,695,610
      l3: 58,287,277
      l4: 27,812,838,944,369,350(2.7%)
      l5: 19




      l5: 14, Calls: 10, Loops: 65
      last_minter_balance_total:8,790,951
      l2: 918,482,213
      l3: 30,249,210
      l4: 13,302,794,647,291,131(1.3%)
      l5: 24




      l5: 14, Calls: 20, Loops: 65
      last_minter_balance_total:13,940,437
      l2: 1,255,738,717
      l3: 33,626,450
      l4: 14,780,882,941,434,585(1.4%)
      l5: 34



      l5: 14, Calls: 30, Loops: 65
      last_minter_balance_total:19,133,718
      l2: 1,596,703,129
      l3: 37,334,358
      l4: 16,423,203,268,260,645
      l5: 44








      l5: 14, Calls: 10, Loops: 10, Skips l5: 3,4,5,6,7,8, Skip: true
      last_minter_balance_total:23,447,228
      l2: 398,351,485
      l3: 72,507,676
      l4: 254,186,582,832,900,000(2.5%)
      l5: 24




      l5: 14, Calls: 10, Loops: 10, Skips l5: 3,4,5,6,7,8, Skip: false
      last_minter_balance_total:45,810,716
      l2: 613,027,787
      l3: 34,466,980
      l4: 98,477,090,218,361,121(9.8%)
      l5: 24




      l5: 14, Calls: 20, Loops: 10, Skips l5: 3,6,9,12,15,18, Skip: true
      last_minter_balance_total:61,400,248
      l2: 779,763,169
      l3: 38,296,640
      l4: 109,418,989,131,512,354(10.9%)
      l5: 34



      l5: 14, Calls: 20, Loops: 10, Skips l5: 3,6,9,12,18, Skip: true
      last_minter_balance_total:64,846,946
      l2: 814,230,149
      l3: 38,296,640
      l4: 109,418,989,131,512,354(10.9%)
      l5: 34   

    */







    // [ [0,0,0,5], [bgN(72,6), bgN(100,6)/* 1 */,0,0,0,bgN(51,16)/* 5 */,bgN(95,16), bgN(3,16)/* 7 */,3,0,0,0,2/* 12 */,0,bgN(3,16)/* 14 */,1,bgN(72,9),0,0], [bgN(1,72),bgN(1,72),0/* 2 */,0,0,0,bgN(100,16)], [0], [0] ]

    /* 
      l5: 14, Calls: 1, Loops: 1, Skips l5: , Skip: false
      last_minter_balance_avg
      :72,000,000
      l2: 72,000,000
      l3: 72,000,000
      l4
      : 1,000,000,000,000,000,000(100%)
      l5: 15



      l5: 14, Calls: 1, Loops: 5, Skips l5: , Skip: false
      last_minter_balance_avg
      :20,520,900
      l2: 227,700,900
      l3: 227,700,900
      l4
      : 1,000,000,000,000,000,000(100%)
      l5: 15



      l5: 14, Calls: 1, Loops: 10, Skips l5: , Skip: false
      last_minter_balance_avg
      :16,937,911
      l2: 313,608,026
      l3: 313,608,026
      l4: 1,000,000,000,000,000,000(100%)
      l5: 15



      l5: 14, Calls: 1, Loops: 20, Skips l5: , Skip: false
      last_minter_balance_avg
      :8,422,378
      l2: 429,418,522
      l3: 429,418,522
      l4: 1,000,000,000,000,000,000(100%)
      l5: 15



      l5: 14, Calls: 1, Loops: 30, Skips l5: , Skip: false
      last_minter_balance_avg
      :10,065,213
      l2: 517,215,241
      l3: 517,215,241
      l4: 1,000,000,000,000,000,000(100%)
      l5: 15



      l5: 14, Calls: 1, Loops: 50, Skips l5: , Skip: false
      last_minter_balance_avg
      :7,908,556
      l2: 657,588,158
      l3: 657,588,158
      l4: 1,000,000,000,000,000,000
      l5: 15


      l5: 14, Calls: 1, Loops: 99, Skips l5: , Skip: false
      last_minter_balance_avg
      :4,238,013
      l2: 911,388,722
      l3: 911,388,722
      l4: 1,000,000,000,000,000,000
      l5: 15








      l5: 14, Calls: 10, Loops: 1, Skips l5: , Skip: false
      last_minter_balance_avg:72,000,000
      l2: 720,000,000
      l3: 72,000,000
      l4: 1,000,000,000,000,000,000
      l5: 24



      l5: 14, Calls: 10, Loops: 5, Skips l5: , Skip: false
      last_minter_balance_avg:23,262,929
      l2: 1,602,645,322
      l3: 115,916,486
      l4: 358,485,922,408,542,232(35.8%)
      l5: 24



      l5: 14, Calls: 10, Loops: 10, Skips l5: , Skip: false
      last_minter_balance_avg:11,800,490.5
      l2: 2,012,710,846
      l3: 142,342,117
      l4: 237,826,885,255,332,481(23.7%)
      l5: 24




      l5: 14, Calls: 10, Loops: 20, Skips l5: , Skip: false
      last_minter_balance_avg:6,298,236.9
      l2: 2,543,859,436
      l3: 168,819,263
      l4: 157,779,214,788,227,054(15.7%)
      l5: 24




      l5: 14, Calls: 10, Loops: 30, Skips l5: , Skip: false
      last_minter_balance_avg:4,793,644.7
      l2: 2,760,116,996
      l3: 168,556,433
      l4: 104,673,954,723,255,219(10.4%)
      l5: 24




      l5: 14, Calls: 10, Loops: 50, Skips l5: , Skip: false
      last_minter_balance_avg:3,260,492.3
      l2: 3,217,100,285
      l3: 178,337,765
      l4: 69,442,840,187,233,777(6.9%)
      l5: 24




      l5: 14, Calls: 10, Loops: 99, Skips l5: , Skip: false
      last_minter_balance_avg:1,830,246.3
      l2: 3,783,211,426
      l3: 184,945,493
      l4: 37,524,139,211,116,132(3.7%)
      l5: 24



      l5: 14, Calls: 20, Loops: 1, Skips l5: , Skip: false
      last_minter_balance_avg:72,000,000
      l2: 1,440,000,000
      l3: 72,000,000
      l4: 1,000,000,000,000,000,000
      l5: 34








      l5: 14, Calls: 20, Loops: 5, Skips l5: , Skip: false
      last_minter_balance_avg:21,470,065.85
      l2: 2,584,960,854
      l3: 96,536,232
      l4: 277,389,573,121,834,062(27.7%)
      l5: 34



      l5: 14, Calls: 20, Loops: 10, Skips l5: , Skip: false
      last_minter_balance_avg:10,558,214.15
      l2: 3,085,027,564
      l3: 94,186,083
      l4: 135,275,954,279,056,165(13.5%)
      l5: 34



      l5: 14, Calls: 20, Loops: 20, Skips l5: , Skip: false
      last_minter_balance_avg:5,412,969.15
      l2: 3,760,061,499
      l3: 92,767,159
      l4: 65,970,698,177,872,088(6.5%)
      l5: 34



      l5: 14, Calls: 20, Loops: 30, Skips l5: , Skip: false
      last_minter_balance_avg:3,879,977.6
      l2: 3,974,608,284
      l3: 92,557,896
      l4: 43,766,309,037,604,467(4.3%)
      l5: 34



      l5: 14, Calls: 20, Loops: 50, Skips l5: , Skip: false
      last_minter_balance_avg:2,521,605.55
      l2: 4,507,744,423
      l3: 101,079,698
      l4: 29,035,463,617,657,948(2.9%)
      l5: 34



      l5: 14, Calls: 20, Loops: 99, Skips l5: , Skip: false
      last_minter_balance_avg:1,364,017
      l2: 5,121,769,091
      l3: 93,940,273
      l4: 13,451,875,657,683,512(1.3%)
      l5: 34



      l5: 14, Calls: 50, Loops: 1, Skips l5: , Skip: false
      last_minter_balance_avg:72,000,000
      l2: 3,600,000,000
      l3: 72,000,000
      l4: 1,000,000,000,000,000,000
      l5: 64








      l5: 14, Calls: 50, Loops: 5, Skips l5: , Skip: false
      last_minter_balance_avg:20,186,666.74
      l2: 5,465,832,795
      l3: 96,536,235
      l4: 277,389,573,121,834,048(27.7%)
      l5: 64



      l5: 14, Calls: 50, Loops: 10, Skips l5: , Skip: false
      last_minter_balance_avg:9,625,423.86
      l2: 6,051,011,634
      l3: 94,186,083
      l4: 135,275,954,279,056,154(13.5%)
      l5: 64



      l5: 14, Calls: 50, Loops: 20, Skips l5: , Skip: false
      last_minter_balance_avg:4,737,722.84
      l2: 6,675,622,488
      l3: 92,767,454
      l4: 65,970,698,177,872,074(6.5%)
      l5: 64




      l5: 14, Calls: 50, Loops: 50, Skips l5: , Skip: false
      last_minter_balance_avg:2,012,316.64
      l2: 7,412,077,475
      l3: 101,078,046
      l4: 29,035,463,617,657,937(2.9%)
      l5: 64



      l5: 14, Calls: 50, Loops: 99, Skips l5: , Skip: false
      last_minter_balance_avg:1,051,519
      l2: 8,068,278,868
      l3: 93,939,848
      l4: 13,451,875,657,683,507(1.3%)
      l5: 64









      l5: 19, Calls: 15, Loops: 23, Skips l5: , Skip: true
      last_minter_balance_avg:5,434,704.2
      l2: 3,295,297,239
      l3: 117,449,443
      l4: 76,944,975,276,713,327(7.6%)
      l5: 34



      l5: 19, Calls: 15, Loops: 23, Skips l5: 14, Skip: true
      last_minter_balance_avg:5,169,612.333,333,333
      l2: 3,177,847,796
      l3: 126,404,709
      l4: 85,257,590,334,308,396(8.5%)
      l5: 34



      l5: 19, Calls: 15, Loops: 23, Skips l5: 13,14, Skip: true
      last_minter_balance_avg:4,900,661.666,666,667
      l2: 3,051,443,087
      l3: 135,384,203
      l4: 94,468,244,137,737,835(9.4%)
      l5: 34


      l5: 19, Calls: 15, Loops: 23, Skips l5: 12,13,14, Skip: true
      last_minter_balance_avg:4,630,300.466,666,667
      l2: 2,916,058,884
      l3: 144,486,556
      l4: 104,673,954,723,255,219(10.4%)
      l5: 34




      l5: 19, Calls: 15, Loops: 23, Skips l5: 11,12,13,14, Skip: true
      last_minter_balance_avg:4,361,959
      l2: 2,771,572,328
      l3: 153,468,974
      l4: 115,982,221,300,005,783(11.5%)
      l5: 34




      l5: 19, Calls: 15, Loops: 23, Skips l5: 10,11,12,13,14, Skip: true
      last_minter_balance_avg:4,093,923.066,666,667
      l2: 2,618,103,354
      l3: 162,763,823
      l4: 128,512,156,565,103,361(12.8%)
      l5: 34





      l5: 19, Calls: 30, Loops: 7, Skips l5: 23,24,25,26,27,28,29, Skip: false
      last_minter_balance_avg:14,298,800.766,666,668
      l2: 3,798,081,086
      l3: 99,197,518
      l4: 203,906,825,745,790,680(20.3%)
      l5: 49


      l5: 19, Calls: 30, Loops: 7, Skips l5: 23,24,25,26,27,28,29, Skip: true
      last_minter_balance_avg:11,188,185.133,333,333
      l2: 3,106,384,140
      l3: 93,840,223
      l4: 193,711,484,458,501,148(19.3%)
      l5: 49

    */








    // [ [0,0,0,5], [bgN(1,6), bgN(3,6)/* 1 */,0,0,0,bgN(51,16)/* 5 */,bgN(95,16), bgN(3,16)/* 7 */,3,0,0,0,2/* 12 */,0,bgN(3,16)/* 14 */,1,bgN(1,9),0,0], [bgN(1,72),bgN(1,72),0/* 2 */,0,0,0,bgN(100,16)], [0], [0] ]

    /* 
      Block: 19, Calls: 10, Loops: 7, Skips Block: , Skip: false
      l1:236,368.9
      l2: 30,853,558
      l3: 3,006,262
      l4: 735,091,890,625,000,000(73.5%)
      l5: 29



      Block: 19, Calls: 25, Loops: 7, Skips Block: , Skip: false
      l1:231,596.16
      l2: 74,846,518
      l3: 3,006,262
      l4: 735,091,890,625,000,000(73.5%)
      l5: 44



      Block: 19, Calls: 7, Loops: 19, Skips Block: , Skip: false
      l1:132,338.7,142,857,143
      l2: 34,821,282
      l3: 4,262,345
      l4: 540,360,087,662,636,962(54%)
      l5: 26



      Block: 19, Calls: 21, Loops: 19, Skips Block: , Skip: false
      l1:99,229.71,428,571,429
      l2: 80,074,541
      l3: 3,033,648
      l4: 277,389,573,121,834,063(27.7%)
      l5: 40



      Block: 19, Calls: 35, Loops: 19, Skips Block: , Skip: false
      l1:89,174
      l2: 121,540,853
      l3: 2,966,796
      l4: 263,520,094,465,742,352(26.3%)
      l5: 54



      Block: 19, Calls: 50, Loops: 19, Skips Block: , Skip: false
      l1:84,635.9
      l2: 166,040,813
      l3: 2,966,796
      l4: 263,520,094,465,742,345(26.3%)
      l5: 69



      Block: 19, Calls: 10, Loops: 32, Skips Block: , Skip: false
      l1:79,985.3
      l2: 53,164,161
      l3: 4,025,227
      l4: 291,989,024,338,772,701(29.1%)
      l5: 29




      Block: 19, Calls: 40, Loops: 32, Skips Block: , Skip: false
      l1:56,142.725
      l2: 145,271,321
      l3: 2,979,474
      l4: 157,779,214,788,227,042(15.7%)
      l5: 59




      Block: 19, Calls: 60, Loops: 32, Skips Block: , Skip: false
      l1:53,160.53,333,333,333
      l2: 204,951,759
      l3: 2,912,360
      l4: 149,890,254,048,815,681(14.9%)
      l5: 79




      Block: 19, Calls: 10, Loops: 51, Skips Block: , Skip: false
      l1:58,915.2
      l2: 62,059,425
      l3: 4,616,516
      l4: 237,826,885,255,332,481(23.7%)
      l5: 29




      Block: 19, Calls: 25, Loops: 51, Skips Block: , Skip: false
      l1:43,389.28
      l2: 112,510,622
      l3: 2,918,597
      l4: 94,468,244,137,737,829(9.4%)
      l5: 44
    */








    //[ [0,0,0,5], [bgN(720,6), bgN(1000,6)/* 1 */,0,0,0,bgN(51,16)/* 5 */,bgN(95,16), bgN(3,16)/* 7 */,3,0,0,0,2/* 12 */,0,bgN(3,16)/* 14 */,1,bgN(1,9),0,0], [bgN(1,72),bgN(1,72),0/* 2 */,0,0,0,bgN(100,16)], [0], [0] ]

    /* 
      Block: 19, Calls: 10, Loops: 10, Skips Block: , Skip: false
      l1:142,755,789
      l2: 21,663,295,341
      l3: 1,342,659,249
      l4: 193,711,484,458,501,152(19.3%)
      l5: 29



      Block: 19, Calls: 30, Loops: 10, Skips Block: , Skip: false
      l1: 113,810,770.43,333,334
      l2: 41,551,034,224
      l3: 973,986,870
      l4: 135,275,954,279,056,162(13.5%)
      l5: 49




      Block: 19, Calls: 50, Loops: 10, Skips Block: , Skip: false
      l1: 107,281,820.6
      l2: 61,040,699,927
      l3: 924,142,739
      l4: 128,512,156,565,103,345(12.8%)
      l5: 69



      Block: 19, Calls: 10, Loops: 20, Skips Block: , Skip: false
      l1: 74,148,676.9
      l2: 27,177,697,692
      l3: 1,560,496,445
      l4: 115,982,221,300,005,783(11.5%)
      l5: 29



      Block: 19, Calls: 25, Loops: 20, Skips Block: , Skip: false
      l1: 61,041,386.4
      l2: 43,305,202,328
      l3: 1,052,607,260
      l4: 73,097,726,512,877,654(7.3%)
      l5: 44




      Block: 19, Calls: 40, Loops: 20, Skips Block: , Skip: false
      l1: 56,916,880.125
      l2: 58,311,891,203
      l3: 1,052,607,260
      l4: 73,097,726,512,877,647(7.3%)
      l5: 59




      Block: 19, Calls: 55, Loops: 20, Skips Block: , Skip: false
      l1: 55,042,104.54,545,455
      l2: 73,318,580,078
      l3: 1,052,607,260
      l4: 73,097,726,512,877,642(7.3%)
      l5: 74




      Block: 19, Calls: 10, Loops: 35, Skips Block: , Skip: false
      l1: 47,182,343.2
      l2: 32,594,708,675
      l3: 1,745,581,548
      l4: 76,944,975,276,713,327(7.6%)
      l5: 29




      Block: 19, Calls: 25, Loops: 35, Skips Block: , Skip: false
      l1: 37,003,390.92
      l2: 49,518,047,555
      l3: 1,047,503,893
      l4: 41,577,993,585,724,241(4.1%)
      l5: 44




      Block: 19, Calls: 25, Loops: 35, Skips Block: , Skip: false
      l1: 37,003,390.92
      l2: 49,518,047,555
      l3: 1,047,503,893
      l4: 41,577,993,585,724,241(4.1%)
      l5: 44




      Block: 19, Calls: 40, Loops: 35, Skips Block: , Skip: false
      l1: 33,768,538.075
      l2: 64,457,349,840
      l3: 1,047,503,893
      l4: 41,577,993,585,724,233(4.1%)
      l5: 59
    
    */

  }).timeout(10000000);

  /* auth(): ensures sender cant send transactions to other contract */
  xit("15. can run f150/f151/f152/f153/f154/f155/f156", async () => {
    const [signer, addr1, addr2] = await ethers.getSigners();

    console.log("15a");
    await expect(e5.connect(signer).func()).to.be.reverted;
    await expect(e52.connect(signer).func()).to.be.reverted;
    await expect(f5.connect(signer).func()).to.be.reverted;
    await expect(g5.connect(signer).func()).to.be.reverted;
    await expect(g52.connect(signer).func()).to.be.reverted;
    await expect(h5.connect(signer).func()).to.be.reverted;
    await expect(h52.connect(signer).func()).to.be.reverted;


    await e5.f1496(signer.address, true);
    await e52.f1496(signer.address, true);
    await f5.f1496(signer.address, true);
    await g5.f1496(signer.address, true);
    await g52.f1496(signer.address, true);
    await h5.f1496(signer.address, true);
    await h52.f1496(signer.address, true);


    await expect(e5.connect(signer).func()).to.not.be.reverted;
    await expect(e52.connect(signer).func()).to.not.be.reverted;
    await expect(f5.connect(signer).func()).to.not.be.reverted;
    await expect(g5.connect(signer).func()).to.not.be.reverted;
    await expect(g52.connect(signer).func()).to.not.be.reverted;
    await expect(h5.connect(signer).func()).to.not.be.reverted;
    await expect(h52.connect(signer).func()).to.not.be.reverted;



    console.log("15b");
    await expect(e5.connect(addr1).func()).to.be.reverted;
    await expect(e52.connect(addr1).func()).to.be.reverted;
    await expect(f5.connect(addr1).func()).to.be.reverted;
    await expect(g5.connect(addr1).func()).to.be.reverted;
    await expect(g52.connect(addr1).func()).to.be.reverted;
    await expect(h5.connect(addr1).func()).to.be.reverted;
    await expect(h52.connect(addr1).func()).to.be.reverted;


    await e5.f1496(addr1.address, true);
    await e52.f1496(addr1.address, true);
    await f5.f1496(addr1.address, true);
    await g5.f1496(addr1.address, true);
    await g52.f1496(addr1.address, true);
    await h5.f1496(addr1.address, true);
    await h52.f1496(addr1.address, true);


    await expect(e5.connect(addr1).func()).to.not.be.reverted;
    await expect(e52.connect(addr1).func()).to.not.be.reverted;
    await expect(f5.connect(addr1).func()).to.not.be.reverted;
    await expect(g5.connect(addr1).func()).to.not.be.reverted;
    await expect(g52.connect(addr1).func()).to.not.be.reverted;
    await expect(h5.connect(addr1).func()).to.not.be.reverted;
    await expect(h52.connect(addr1).func()).to.not.be.reverted;




    console.log("15c");
    await expect(e5.connect(addr2).func()).to.be.reverted;
    await expect(e52.connect(addr2).func()).to.be.reverted;
    await expect(f5.connect(addr2).func()).to.be.reverted;
    await expect(g5.connect(addr2).func()).to.be.reverted;
    await expect(g52.connect(addr2).func()).to.be.reverted;
    await expect(h5.connect(addr2).func()).to.be.reverted;
    await expect(h52.connect(addr2).func()).to.be.reverted;


    await e5.f1496(addr2.address, true);
    await e52.f1496(addr2.address, true);
    await f5.f1496(addr2.address, true);
    await g5.f1496(addr2.address, true);
    await g52.f1496(addr2.address, true);
    await h5.f1496(addr2.address, true);
    await h52.f1496(addr2.address, true);


    await expect(e5.connect(addr2).func()).to.not.be.reverted;
    await expect(e52.connect(addr2).func()).to.not.be.reverted;
    await expect(f5.connect(addr2).func()).to.not.be.reverted;
    await expect(g5.connect(addr2).func()).to.not.be.reverted;
    await expect(g52.connect(addr2).func()).to.not.be.reverted;
    await expect(h5.connect(addr2).func()).to.not.be.reverted;
    await expect(h52.connect(addr2).func()).to.not.be.reverted;

  });




  /* boot(): can correctly boot E5's */
  xit("16. can run f157/f158/f159/f160/f161/f162/f163", async () => {
    const [signer, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 1, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5)/* 11 */, 1, 650, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(85, 16), bgN(72, 8), 90000]
      ]
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    var val/* boot_data */ = await e5./* get_boot_data */f1573(v1);
    var val2/* booted */ = await e5./* get_booted */f1572();

    expect(await val2).to.equal(false);
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(0);
    }

    await expect(e5.connect(addr1).f157(v1, v2, v3, v4, v2[2][1])).to.be.reverted;
    await expect(e52.connect(signer).f158(v1, v3, v4)).to.be.reverted;
    await expect(f5.connect(signer).f159(v1)).to.be.reverted;
    await expect(g5.connect(signer).f160(v1, v2, v3)).to.be.reverted;
    await expect(g52.connect(signer).f161(v1)).to.be.reverted;
    await expect(h5.connect(signer).f162(v1, v2, v3)).to.be.reverted;
    await expect(h52.connect(signer).f163(v1)).to.be.reverted;


    await expect(e5.connect(signer).f157(v1, v2, v3, v4, v2[2][1])).to.emit(e52, "Metadata");
    var contracts = [e5, e52, f5, g5, g52, h5, h52];

    for (let c = 0; c < contracts.length; c++) {
      var val/* boot_data */ = await contracts[c]./* get_boot_data */f1573(v1);
      var val2/* booted */ = await contracts[c]./* get_booted */f1572();

      expect(await val2).to.equal(true);
      for (let j = 0; j < val.length; j++) {
        expect(await val[j]).to.equal(1);
      }
    }

    await expect(e5.connect(signer).f157(v1, v2, v3, v4, v2[2][1])).to.be.reverted;
    await expect(e52.connect(signer).f158(v1, v3, v4)).to.be.reverted;
    await expect(f5.connect(signer).f159(v1)).to.be.reverted;
    await expect(g5.connect(signer).f160(v1, v2, v3)).to.be.reverted;
    await expect(g52.connect(signer).f161(v1)).to.be.reverted;
    await expect(h5.connect(signer).f162(v1, v2, v3)).to.be.reverted;
    await expect(h52.connect(signer).f163(v1)).to.be.reverted;


    var val3/* read_data */ = await e5./* read_data */f1574();
    var exp_vals = [bgN(53, 5)/* 11 */, 1, 650, 1, 72/* 16 */, 3/* 19 */, bgN(85, 16)/* 24 */, bgN(72, 8), 90000];
    for (let j = 0; j < val3.length; j++) {
      expect(await val3[j]).to.equal(exp_vals[j]);
    }
    var val3/* read_data */ = await e52./* read_data */f1574();
    expect(await val3[0]).to.equal(72);


    var val4/* read_id */ = await g5./* read_id */f77(2);
    for (let j = 0; j < v2/* boot_data */[2][1].length; j++) {
      expect(await val4[1][j]).to.equal(v2/* boot_data */[2][1][j]);
    }


    var val4/* read_id */ = await h5.f85(5);
    for (let j = 0; j < v2/* boot_data */[0][1].length; j++) {
      expect(await val4[1][j]).to.equal(v2/* boot_data */[0][1][j]);
    }
    for (let j = 0; j < v2/* boot_data */[0][2].length; j++) {
      expect(await val4[2][j]).to.equal(v2/* boot_data */[0][2][j]);
    }


    var val4/* read_id */ = await h5.f85(3);
    for (let j = 0; j < v2/* boot_data */[1][1].length; j++) {
      expect(await val4[1][j]).to.equal(v2/* boot_data */[1][1][j]);
    }
    for (let j = 0; j < v2/* boot_data */[1][2].length; j++) {
      expect(await val4[2][j]).to.equal(v2/* boot_data */[1][2][j]);
    }

  });

  /* get_accounts(): returns account ids for specified addresses */
  xit("17. can run f166", async () => {
    //f1404(), f1405()
    const [signer, addr1, addr2, addr3] = await ethers.getSigners();

    console.log("18a");
    await e5.f1404(signer.address, 100099);

    // var val = await e5.f166([signer.address]);
    var val = await e5.f167([[]], [signer.address], 2);
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(100099);
    }
    await e5.f1405(signer.address);


    console.log("18b");
    await e5.f1404(addr1.address, 49494949);

    // var val = await e5.f166([addr1.address]);
    var val = await e5.f167([[]], [addr1.address], 2);
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(49494949);
    }
    await e5.f1405(addr1.address);



    console.log("18c");
    await e5.f1404(addr2.address, 4928274);

    // var val = await e5.f166([addr2.address]);
    var val = await e5.f167([[]], [addr2.address], 2);
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(4928274);
    }
    await e5.f1405(addr2.address);



    console.log("18d");
    // var val = await e5.f166([addr3.address]);
    var val = await e5.f167([[]], [addr3.address], 2);
    for (let j = 0; j < val.length; j++) {
      expect(await val[j]).to.equal(0);
    }

  });

  /* ?????? ????????? */
  xit("?????? ?????????", async () => {
    console.log("?????? ?????????");
  });

  //
  //
  //
  //
  //
  //
  //-----------------------~~~~~~RUN_TRANSACTIONS~~~~~~---------------------------------
  /* track sender transaction history and restrict transactions */
  xit("19. can run e/f167/f168", async () => {
    //get_block(), get_time()
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v5/* block_lim */ = 4;
    var v6/* time_lim */ = 9000;
    var v7/* time_inc */ = 40003;

    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 1, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), v5/* block_lim *//* 12 */, v6/* time_lim */, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0/* 29 */,0,0,0,0,0/* 34 */,0,0,0,0,1002/* 39 */,100_000]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v8/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    console.log("l1: "/* BlockLimit */ + v5/* block_lim */ + ", l2: "/* TimeLimit */ + v6/* time_lim */ + ", l3: "/* TimeInc */ + v7/* time_inc */);
    var vv = [[[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 34, 0]]];

    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("1: " + await e5./* get_block */f147(1/* get_block */)+ ", " + tt);
    await e5.connect(addr1).e(v8/* t_limits */, [], vv, [], { gasLimit: 530_000, value: 35 });

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("2: " + await e5./* get_block */f147(1/* get_block */) + ", " + tt);
    await expect(e5.connect(addr1).e(v8/* t_limits */, [], vv, [], { gasLimit: 530_000, value: 35 })).to.be.reverted;

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("3: " + await e5./* get_block */f147(1/* get_block */) + ", " + tt);
    await expect(e5.connect(addr1).e(v8/* t_limits */, [], vv, [], { gasLimit: 530_000, value: 35 })).to.be.reverted;


    await network.provider.send("evm_increaseTime", [v7/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("4: " + await e5./* get_block */f147(1/* get_block */)+ ", " + tt);
    await expect(e5.connect(addr1).e(v8/* t_limits */, [], vv, [], { gasLimit: 530_000, value: 35 })).to.not.be.reverted;


    await network.provider.send("evm_increaseTime", [1000_000]);
    await network.provider.send("evm_mine");

    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("5: " + await e5./* get_block */f147(1/* get_block */)+ ", " + tt);
    await expect(e5.connect(addr2).e(v8/* t_limits */, [], vv, [], { gasLimit: 530_000, value: 35 })).to.be.reverted;


    //i dont really know how to modify blocknumbers so
    await network.provider.send("evm_mine");
    await network.provider.send("evm_mine");
    await network.provider.send("evm_mine");
    await network.provider.send("evm_mine");


    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("6: " + await e5./* get_block */f147(1/* get_block */) + ", " + tt);
    await expect(e5.connect(addr1).e(v8/* t_limits */, [], vv, [], { gasLimit: 530_000, value: 35 })).to.not.be.reverted;
    await expect(e5.connect(addr2).e(v8/* t_limits */, [], vv, [], { gasLimit: 530_000, value: 35 })).to.not.be.reverted;

    /* 
      BlockLimit: 3, TimeLimit: 100, TimeInc: 101
      attempt 1: block: 18, time:1648037572
      attempt 2: block: 19, time:1648037573
      attempt 3: block: 21, time:1648037675

      BlockLimit: 3, TimeLimit: 6500, TimeInc: 65005
      attempt 1: block: 18, time:1648037644
      attempt 2: block: 19, time:1648037645
      attempt 3: block: 21, time:1648102651

      BlockLimit: 3, TimeLimit: 10000, TimeInc: 10044
      attempt 1: block: 18, time:1648037731
      attempt 2: block: 19, time:1648037732
      attempt 3: block: 21, time:1648047777

      BlockLimit: 3, TimeLimit: 9000, TimeInc: 40003
      attempt 1: block: 18, time:1648037789
      attempt 2: block: 19, time:1648037790
      attempt 3: block: 21, time:1648077794

      BlockLimit: 4, TimeLimit: 9000, TimeInc: 40003
      attempt 1: block: 18, time:1648037848
      attempt 2: block: 19, time:1648037849
      attempt 3: block: 20, time:1648037850
      attempt 4: block: 22, time:1648077854
    */
  });

  /* create a custom object */
  xit("20. can run e/f167/f168/f169/f170/f171", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 1, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);



    // 34(custom_object)
    var vv = [
      [[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 34, 0]]
    ];
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 530_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l1: "/* GasEst */ + nWC(v6/* gas_cons */));


    ////////////////////////////
    console.log("-------e-------")
    var v7/* user_acc_id */ = (await e5.f167([], [addr1.address], 2))[0];
    console.log("l2: "/* Account */ + v7/* user_acc_id */);
    await expect(v7/* user_acc_id */).to.equal(1002);

    var v8/* transaction_count */ = (await e5.f279([v7/* user_acc_id */]))[0][3];
    console.log("l3: "/* transaction_count */ + v8/* transaction_count */);
    await expect(v8/* transaction_count */).to.equal(1);

    var v9/* id_type */ = await e52./* read_id_type */f135(1003);
    var v11/* author_owner */ = await e52./* read_author_owner */f133(1003);
    console.log("l4: "/* type */ + v9/* id_type */ + ", l5:"/* auth */ + v11/* author_owner */);
    await expect(v9/* id_type */).to.equal(34);
    await expect(v11/* author_owner */).to.equal(1002);



    /////////////////////////////////////
    /* calculate_max_consumable_gas */
    var v10/* gas_limit */ = await e5.f282([875_000_000]);
    console.log("l6: "/* GasLimit */ + nWC(v10/* gas_limit */));

    //gas limit too high
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 6_000_000, value: 35 })).to.be.reverted;
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 5_400_000, value: 35 })).to.be.reverted;

    /* 
      1st tx, 1 obj
      GasEst: 239,995
      -------e-------
      Account: 1002
      transaction_count: 1
      type: 34, auth:1002
      GasLimit: 5,235,591


      l1: 61,489
      -------e-------
      l2: 1002
      l3: 1
      l4: 34, l5:1002
      l6: 5,235,591
    */
  });

  /* can revert txs if limits have been exceeded */
  xit("21. can run e/f143", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 1, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [200, bgN(19, 2)];


    console.log("l1: "/* BlockLim */ + v5/* t_limits */[0] + ", l2: "/* TimeLim */ + v5/* t_limits */[1]);
    var vv = [[[10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 34, 0]]];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 530_000, value: 35 })).to.be.reverted;

    /* 
      BlockLim: 1000, TimeLim: 1000
      BlockLim: 1900, TimeLim: 1900
      BlockLim: 5, TimeLim: 190000000000000000000000000000000000000000
      BlockLim: 200, TimeLim: 1900
    */
  });





  /* can create subscription objects */
  xit("22. can run e/f169/f170/f171/f172/f173", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 1, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);


    // 33(subscription_object)
    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1001, 1, 0, 100], [23, 23, 23, 23],
        [3, 5], [23, 23],
        [100, 100], [23, 23],
        [0, 0], [23, 23]
      ]
    ];
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 2_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l1: "/* Data */ + await f5.f73(1003));
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));

    console.log("-----------e------------");
    //attempting to create subscription with no amounts or exchanges specified
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1001, 1, 0, 100], [23, 23, 23, 23]
      ]
    ];
     expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 2_300_000, value: 35 })).to.be.reverted;


    //bad subscription object type specified
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1001, 1, 3/* bad! */, 100], [23, 23, 23, 23]
        [3, 5], [23, 23],
        [100, 100], [23, 23]
        [0, 0], [23, 23]
      ]
    ];
     expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 2_300_000, value: 35 })).to.be.reverted;

    /* 
      Data: ,1001,1,0,100,3,5,100,100
      GasEst: 621,694

      l1: ,1001,1,0,100,0,0,0,3,5,100,100,0,0
      l2: 371,703
    */
  });

  /* can create contract objects */
  xit("23. can run e/f169/f170/f174/f175", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 1, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);


    // 30(contract_obj_id)
    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 90_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0/* 13 */, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ]
    ];
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    var rp/* reduction_proportion */ = await h5.f258();
    var v6/* min_end_am */ = await f5.f286(bgN(5, 6), bgN(5, 6), bgN(53, 8), 3, 875_000_000, rp/* reduction_proportion */);
    var v7/* min_spend_am */ = await f5.f286(bgN(5, 6), bgN(5, 6), bgN(53, 8), 5, 875_000_000, rp/* reduction_proportion */);
    console.log("l1: "/* MinimumEndAmmount */ + v6/* min_end_am */ + ", l2: "/* MinimumSpendAmmount */ + v7/* min_spend_am */);

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v8/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l3: "/* Data */ + await g5./* read_id */f77(1003, false));
    console.log("l4: "/* GasEst */ + nWC(v8/* gas_cons */));

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v8/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l5: "/* Data */ + await g5./* read_id */f77(1005, false));
    console.log("l6: "/* GasEst */ + nWC(v8/* gas_cons */));



    /* bad contract entry amount */
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 90_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3000/* bad! */, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ]
    ];
    console.log("e2")
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 2_300_000, value: 35 })).to.be.reverted;



    /* bad entry exchange ids */
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 90_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [/* bad! */], [],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ]
    ];
    console.log("e4")
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 2_300_000, value: 35 })).to.be.reverted;


    /* bad auto wait for all proposals for all voters */
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 90_000/* 6 */, 0, 7/* bad! */, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ]
    ];
    console.log("e5")
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 2_300_000, value: 35 })).to.be.reverted;



    /* bad contract expiry time */
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 90_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0, 0, bgN(1, 2)/* bad! */, 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ]
    ];
    console.log("e7")
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 2_300_000, value: 35 })).to.be.reverted;

    /* good */
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 90_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ]
    ];
    console.log("e8")
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 2_300_000, value: 35 })).to.not.be.reverted;

    /* 
      MinimumEndAmmount: 825471, MinimumSpendAmmount: 5000000
      -----------e-----------
      Data: 30,0,10000000000000000,3600,0,900000,30000,90000,0,0,0,300000,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000,3,5,3000000,3000000,,,
      GasEst: 1,071,046
      -----------e-----------
      Data: 30,0,10000000000000000,3600,0,900000,30000,90000,0,0,0,300000,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000,3,5,3000000,3000000,,,
      GasEst: 998,996




      l1: 825471, l2: 5000000
      -----------e-----------
      l3: 30,0,10000000000000000,3600,0,900000,30000,90000,0,0,0,300000,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,3000000,3000000,0,0,,,,,
      l4: 714,382
      -----------e-----------
      l5: 30,0,10000000000000000,3600,0,900000,30000,90000,0,0,0,300000,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,3000000,3000000,0,0,,,,,
      l6: 714,382
    */

  });

  /* ?????? ????????? */
  xit("?????? ?????????", async () => {
    console.log("?????? ?????????");
  });




  /* can create token exchanges */
  xit("25. can run e/f169/f170/f176/f177", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    // 31(token_exchange)
    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l1: "/* Data */ + await h5.f85(1003));
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));

    // bad object type
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 7/* bad! */],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    //bad token exchange ratio y
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 73/* bad! */), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    //bad active block limit reduction proportion
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(10, 16)/* bad! */],
        [23, 23, 23, 23, 23, 23, 23],

        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    //bad block halfing type
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, bgN(35, 6)/* 11 */, 0, 0, 0, 4/* bad! */, 0/* 16 */, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    //bad trust fee proportion
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 19)/* bad! */, 0/* 8 */, 1002, 1002, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    // ok object type
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5/* ok! */],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.not.be.reverted;
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l3: "/* GasEst */ + nWC(v6/* gas_cons */));

    /* 

    -----------e-----------
    Data: 0,0,0,5,35000000000000,0,0,0,0,0,0,30000000000000000,0,1002,1002,35000000,0,0,0,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000000000000,1000000000000000000000000000000000000000000000000000000000000000000000000,0,0,0,0,1000000000000000000,3,5,1000,1000
    GasEst: 1,047,425
    GasEst: 975,375


    -----------e-----------
    l1: 0,0,0,5,35000000000000,0,0,0,0,0,0,30000000000000000,0,1002,1002,35000000,0,0,0,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000000000000,1000000000000000000000000000000000000000000000000000000000000000000000000,0,0,0,0,1000000000000000000,0,3,5,1000,1000,0,0
    l2: 710,830
    l3: 710,830

    */

  });

  /* can buy and sell tokens */
  xit("26. can run e/f178/f179/f180/f182/f183", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    // <8>buy_tokens/sell_tokens
    // 23-real, 35-stack, 53-sender_account
    /* SPEND */
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5, 1],
        [23, 23, 23, 23, 23],

        [100, 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, 1/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0, 1000],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23, 23],

        [1, 1, 0/* 2 */, 0, 0, 0, bgN(100, 16), 0/* 7 */, bgN(1,54), bgN(1,45), bgN(1,36), bgN(1,27), 60/* 12 */, 0, bgN(1,26), 0, bgN(1,18), 0],
        [23, 23, 23, 23, 23, 23, 23, 23,   23, 23, 23, 23, 23, 23,  23, 23, 23, 23],

        [5], [23],
        [1], [23],
        [0], [23]
      ],/* 1003 */
      [
        [30000, 8, 0],
        [5], [23],/* exchanges */
        [1002], [23],/* receivers */
        [35_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */,
        [0]/* depths */
      ],
    ];



    console.log("-----------e-----------");
    console.log("mint spend");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l1: "/* Data */ + await h52./* balance_of */f140([5], [1002], [0], 1));
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));





    const end_time_minutes = Math.floor(Date.now()/(60*1000)) + 90
    const start_time_minutes = Math.floor(Date.now()/(60*1000)) - 60
    
    console.log('block timestamp', (await e5./* get_block_timestamp */f147(2))/60)
    console.log('my start time', start_time_minutes)
    console.log('my end time', end_time_minutes)

    const price = 100
    const supply = 1000
    const identifier = 1
    const token_class = 1
    const v3_depths_to_add/* depths_to_add */ = [
      bgN(price, 54)/* exchange_ratio_y */, 
      bgN(end_time_minutes, 45)/* end_time */, 
      bgN(start_time_minutes, 36)/* start_time */, 
      bgN(supply, 27)/* supply */, 
      bgN(token_class, 18)/* class */, 
      0/* identifier */
    ]
    var v4_depth_final/* targeted_depth */ = bigInt(0)
    v3_depths_to_add/* depths_to_add */.forEach(value => {
      v4_depth_final/* targeted_depth */ = bigInt(v4_depth_final/* targeted_depth */).plus(bigInt(value.toString().toLocaleString('fullwide', {useGrouping:false}))).toString().toLocaleString('fullwide', {useGrouping:false})
    });

    var vv = [
      [/* buy non-fungible */
        [30000, 8, 0],
        [1003], [23],/* exchanges */
        [1002], [23],/* receivers */
        [100]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */,
        [v4_depth_final]/* depths */
      ],
    ];
    console.log("-----------e-----------");
    console.log("buy non-fungible");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l1.5: "/* Data */ + await h52./* balance_of */f140([1003], [1002], [v4_depth_final], 1));
    console.log("l2.5: "/* GasEst */ + nWC(v6/* gas_cons */));



    /* mint spend twice */
    var vv = [
      [
        [30000, 8, 0],
        [5, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [35_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0, 0]/* depths */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    /* mint spend twice */
    var vv = [
      [
        [30000, 8, 0],
        [5], [23],/* exchanges */
        [1002], [23],/* receivers */
        [35_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0]/* depths */
      ],
      [
        [30000, 8, 0],
        [5], [23],/* exchanges */
        [1002], [23],/* receivers */
        [35_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0]/* depths */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    /* bad action */
    var vv = [
      [
        [30000, 8, 0],
        [5], [23],/* exchanges */
        [1002], [23],/* receivers */
        [35_000_000]/* amounts */, [1],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0]/* depths */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    /* invalid amount */
    var vv = [
      [
        [30000, 8, 0],
        [5], [23],/* exchanges */
        [1002], [23],/* receivers */
        [40_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0]/* depths */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    /* invalid id */
    var vv = [
      [
        [30000, 8, 0],
        [7], [23],/* exchanges */
        [1002], [23],/* receivers */
        [35_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0]/* depths */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    /* END */
    console.log("-----------e-----------");
    var vv = [
      [
        [30000, 8, 0],
        [3], [23],/* exchanges */
        [1002], [23],/* receivers */
        [1001]/* amounts */, [0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0]/* depths */
      ]
    ];

    console.log("-----------e-----------");
    console.log("buy end");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(1001, 9) });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l1: "/* Data */ + await h52./* balance_of */f140([3], [1002], [0], 1));
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));

    console.log("-----------e-----------");
    console.log("buy end");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(1001, 9) });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l1: "/* Data */ + await h52./* balance_of */f140([3], [1002], [0], 1));
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(1001, 9) });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l1: "/* Data */ + await h52./* balance_of */f140([3], [1002], [0], 1));
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));

    /* buy end twice */
    var vv = [
      [
        [30000, 8, 0],
        [3, 3], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [1000, 1000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0, 0]/* depths */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(1001, 9) })).to.be.reverted;


    /* buy end twice */
    var vv = [
      [
        [30000, 8, 0],
        [3], [23],/* exchanges */
        [1002], [23],/* receivers */
        [1000]/* amounts */, [0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0]/* depths */
      ],
      [
        [30000, 8, 0],
        [3], [23],/* exchanges */
        [1002], [23],/* receivers */
        [1000]/* amounts */, [0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0]/* depths */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(1001, 9) })).to.be.reverted;


    /* insufficient value passed for buy */
    var vv = [
      [
        [30000, 8, 0],
        [3], [23],/* exchanges */
        [1002], [23],/* receivers */
        [1000]/* amounts */, [0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0]/* depths */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(400, 9) })).to.be.reverted;


    /* insufficient value passed for sell */
    var vv = [
      [
        [30000, 8, 0],
        [3], [23],/* exchanges */
        [1002], [23],/* receivers */
        [10010000]/* amounts */, [1],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0]/* depths */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(1001, 9) })).to.be.reverted;




    /* END/SPEND */
    var vv = [
      [
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [1000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0, 0]/* depths */
      ]
    ];
    console.log("-----------e-----------");
    console.log("buy end mint spend");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(1001, 9) });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l1: "/* Data */ + await h52./* balance_of */f140([3], [1002], [0], 1));
    console.log("l2es: "/* GasEst */ + nWC(v6/* gas_cons */));


    /* SELL END */
    var vv = [
      [
        [30000, 8, 0],
        [3], [23],/* exchanges */
        [1002], [23],/* receivers */
        [500]/* amounts */, [1],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0]/* depths */
      ]
    ];
    console.log("-----------e-----------");
    console.log("sell end");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l3: "/* end_balance */ + await h52./* balance_of */f140([3], [1002], [0], 1));
    console.log("l4: "/* withdraw_balance */ + nWC(await e5.f167([1002], [], 1)));
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));

    /* attempt to sell end with existing withdraw balance */
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.not.be.reverted;

    console.log("-----------e-----------");
    /* withdraw ether */
    console.log("withdraw ether");
    var v7/* contract_balance */ = await e5./* get_balance */f147(0);
    console.log("l5: "/* withdraw_balance */ + nWC(await e5.f167([1002], [], 1)));
    console.log("l6: "/* contract_balance */ + nWC(v7/* first_contract_balance */));

    await e5.connect(addr1).f145(addr1.address, [bgN(12, 14), bgN(12, 14)], { gasLimit: 65000 });

    console.log("-----------e-----------");
    console.log("l7: "/* withdraw_balance */ + nWC(await e5.f167([1002], [], 1)));
    console.log("l8: "/* contract_balance */ + nWC(await e5./* get_balance */f147(0)));

    /* 
      -----------e-----------
      Data: 35000000
      GasEst: 737,547
      -----------e-----------
      Data: 70000000
      GasEst: 560,977
      -----------e-----------
      -----------e-----------
      Data: 1001
      GasEst: 607,608
      -----------e-----------
      Data: 2001
      GasEst: 556,308
      -----------e-----------
      Data: 3001
      GasEst: 556,308
      -----------e-----------
      Data: 4000
      GasEst: 861,383
      -----------e-----------
      end balance: 3500
      withdraw balance: 500,000,000,000
      GasEst: 579,931
    


      -----------e-----------
      l1: 35000000
      l2: 585,467
      -----------e-----------
      l1: 70000000
      l2: 480,947
      -----------e-----------
      -----------e-----------
      l1: 1001
      l2: 527,779
      -----------e-----------
      l1: 2001
      l2: 476,479
      -----------e-----------
      l1: 3001
      l2: 476,479
      -----------e-----------
      l1: 4000
      l2: 816,919
      -----------e-----------
      l3: 3500
      l4: 500,000,000,000
      l2: 501,728
      -----------e-----------
      l5: 500,000,000,000
      l6: 4,004,000,000,105
      -----------e-----------
      l7: 0
      l8: 3,504,000,000,105
    */
  });

  /* can send tokens to another account */
  xit("27. can run e/f178/f184/f185", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    // 23-real, 35-stack, 53-sender_account
    /* mint SPEND */
    var vv = [
      [
        [30000, 8, 0],
        [5], [23],/* exchanges */
        [1002], [23],/* receivers */
        [35_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0]/* depths */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });


    /* send tokens */
    var vv = [
      [
        [30000, 1, 0],
        [5, 5, 5], [23, 23, 23],/* exchanges */
        [1003, 1004, 1005], [23, 23, 23],/* receivers */
        [1_000_000, 2_000_000, 3_000_000],/* amounts */
        [0, 0, 0]
      ]
    ];
    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l1: "/* Data */ + await h52./* balance_of */f140([5, 5, 5, 5], [1002, 1003, 1004, 1005], [0,0,0,0], 1));
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));




    /* send tokens */
    var vv = [
      [
        [30000, 1, 0],
        [5], [23],/* exchanges */
        [1003], [23],/* receivers */
        [1_000],/* amounts */
        [0]
      ]
    ];
    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l1: "/* Data */ + await h52./* balance_of */f140([5, 5, 5, 5], [1002, 1003, 1004, 1005], [0,0,0,0], 1));
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));


    /* invalid balance */
    var vv = [
      [
        [30000, 1, 0],
        [5], [23],/* exchanges */
        [1003], [23],/* receivers */
        [100_000_000],/* amounts */
        [0]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    /* invalid balance */
    var vv = [
      [
        [30000, 1, 0],
        [5, 5], [23, 23],/* exchanges */
        [1003, 1004], [23, 24],/* receivers */
        [100, 100_000_000],/* amounts */
        [0, 0]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    /* invalid balance */
    var vv = [
      [
        [30000, 1, 0],
        [3, 5], [23, 23],/* exchanges */
        [1003, 1004], [23, 24],/* receivers */
        [100, 1_000_000],/* amounts */
        [0]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    /* 
      -----------e-----------
      Data: 29000000,1000000,2000000,3000000
      GasEst: 254,588


      -----------e-----------
      l1: 29000000,1000000,2000000,3000000
      l2: 147,130 (-100k gas wow!)
      -----------e-----------
      l1: 28999000,1001000,2000000,3000000
      l2: 65,954
    */

  });





  /* can enter contracts */
  xit("28. can run e/f178/f186/f187/f184/f188/f189", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);

    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    var vv = [
      [
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 90_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0/* 13 */, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(17_000_000, 9) });
    console.log("l1: "/* contract */ + await g5./* read_id */f77(1003, false));
    console.log("-----------e-----------");
    console.log("l2: "/* sender end/spend balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002], [0,0], 1));
    console.log("l3: "/* contract end/spend balance */ + await h52./* balance_of */f140([3, 5], [1003, 1003],[0,0], 1));
    console.log("-----------e-----------");

    // <3>enter_contract
    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [
        [30000, 3, 0],
        [1003], [23],/* contract ids */
        [tt+10_000]/* expiry time (seconds) */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();

    console.log("l4: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1002]], 3));
    console.log("l5: "/* AccountTransactionData */ + await e5.f279([1002]));
    console.log("l6: "/* GasEst */ + nWC(v6/* gas_cons */));
    console.log("l7: "/* sender end/spend balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002], [0,0], 1));
    console.log("l8: "/* contract end/spend balance */ + await h52./* balance_of */f140([3, 5], [1003, 1003],[0,0], 1));

    /* enter same contract twice */
    var vv = [
      [
        [30000, 3, 0],
        [1003], [23],/* contract ids */
        [tt+10_000]/* expiry time (seconds) */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    /* enter something that isnt contract */
    var vv = [
      [
        [30000, 3, 0],
        [1004/* bad! */], [23],/* contract ids */
        [tt+10_000]/* expiry time (seconds) */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    /* invalid expiry time */
    var vv = [
      [
        [30000, 3, 0],
        [1003], [23],/* contract ids */
        [/* bad! */30300]/* expiry time (seconds) */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    /* invalid target 2 */
    var vv = [
      [
        [30000, 3, 0],
        [2], [23],/* contract ids */
        [tt+10_000]/* expiry time (seconds) */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    /* 
      contract: 30,0,10000000000000000,3600,0,900000,30000,90000,0,0,0,300000,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000,3,5,3000000,3000000,,,
      -----------e-----------
      sender end/spend balance: 17000000,35000000
      contract end/spend balance: 0,0
      -----------e-----------
      -----------e-----------
      Data: 1683081300,1
      Entered Contracts: 1
      GasEst: 538,572
      sender end/spend balance: 14000000,32000000
      contract end/spend balance: 3000000,3000000



      l1: 30,0,10000000000000000,3600,0,900000,30000,90000,0,0,0,300000,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,3000000,3000000,0,0,,,,,
      -----------e-----------
      l2: 17000000,35000000
      l3: 0,0
      -----------e-----------
      -----------e-----------
      l4: 1683081300
      l5: 40,1675611907,1,2
      l6: 516,856
      l7: 14000000,32000000
      l8: 3000000,3000000
    */
  });

  /* can make and send proposals to contracts */
  xit("29. can run e/f169/f170/f174/f190/f191/f192/f193/f194", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);

    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    //create test contract (END Contract)
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 90_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0/* 13 */, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],
      [
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [32_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [
        [30000, 3, 0],
        [1003], [23],/* contract ids */
        [1683081300]/* expiry time (seconds) */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(32_000_000, 9) });
    console.log("l34: "/* ContractData */ + await g5./* read_id */f77(1003, false));
    console.log("-----------e-----------");
    console.log("l35: "/* sender_end/spend_balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002], [0,0], 1));
    console.log("l36: "/* contract_end/spend_balance */ + await h52./* balance_of */f140([3, 5], [1003, 1003],[0,0], 1));
    console.log("-----------e-----------");
    console.log("l37: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1002]], 3));
    console.log("l38: "/* EnteredContracts */ + await e5.f279([1002]));
    console.log("-----------e-----------");

    // 32(consensus_request)
    // 23-real, 35-stack, 53-sender_account
    //spend(0)
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, bgN(1, 16), 360/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 5_000_001], [23, 23],
        [3], [23],/* 4 <exchanges> */
        [9000], [23],
        [2], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ]
    ];
    var rp/* reduction_proportion */ = await h5.f258();
    var v6/* min_end_am */ = await f5.f286(bgN(5, 6), bgN(5, 6), bgN(53, 8), 3, 875_000_000, rp/* reduction_proportion */);
    var v7/* min_spend_am */ = await f5.f286(bgN(5, 6), bgN(5, 6), bgN(53, 8), 5, 875_000_000, rp/* reduction_proportion */);
    console.log("l1: "/* MinimumEndAmmount */ + v6/* min_end_am */ + ", l2: "/* MinimumSpendAmmount */ + v7/* min_spend_am */);

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v8/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l3: "/* SpendProposalData */ + await g5./* read_id */f77(1005, false));
    console.log("l4: "/* GasEst */ + nWC(v8/* gas_cons */));
    console.log("-----------e-----------");
    console.log("l5: "/* sender_end/spend_balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002],[0,0], 1));
    console.log("l6: "/* proposal_end/spend_balance */ + await h52./* balance_of */f140([3, 5], [1005, 1005],[0,0], 1));


    //reconfig(1)
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [1, bgN(1, 16), 360/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 1003], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [1], [23],/* 4-reconfig_array_pos */
        [2], [23],/* reconfig_array_item_pos */
        [3601], [23],/* reconfig_array_new_item */
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23],
      ]
    ];
    var ss = [[["e", "e", "e"]]];
    console.log("-");
    console.log("-----------e-----------");
    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    var v8/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l7: "/* ReconfigProposalData */ + await g5./* read_id */f77(1007,false));
    console.log("l8: "/* GasEst */ + nWC(v8/* gas_cons */));
    console.log("-----------e-----------");
    console.log("l9: "/* sender_end/spend_balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002],[0,0], 1));
    console.log("l10: "/* proposal_end/spend_balance */ + await h52./* balance_of */f140([3, 5], [1007, 1007],[0,0], 1));


    //buy(2)
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [2, bgN(1, 16), 360/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 1003], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [3, 5], [23, 23],/* <4>buy_exchanges */
        [100_000, 200_000], [23, 23],
        [400003, 400003], [23, 23],
        [0, 0], [23, 23],/* depths */
        [0], [23],
        [0], [23],
        [0, 0], [23, 23],
      ]
    ];
    var ss = [[["e", "e", "e"]]];
    console.log("-");
    console.log("-----------e-----------");
    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    var v8/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l11: "/* BuyProposalData */ + await g5./* read_id */f77(1009, false));
    console.log("l12: "/* GasEst */ + nWC(v8/* gas_cons */));
    console.log("-----------e-----------");
    console.log("l13: "/* sender end/spend balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002],[0,0], 1));
    console.log("l14: "/* proposal end/spend balance */ + await h52./* balance_of */f140([3, 5], [1009, 1009],[0,0], 1));


    //mint(3)
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [3, bgN(1, 16), 360/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 1003], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [5], [23],/* <4>mint_exchanges */
        [200_000], [23],
        [1002], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23],
      ]
    ];
    var ss = [[["e", "e", "e"]]];
    console.log("-");
    console.log("-----------e-----------");
    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    var v8/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l16: "/* Mint Proposal Data */ + await g5./* read_id */f77(1011, false));
    console.log("l17: "/* GasEst */ + nWC(v8/* gas_cons */));
    console.log("-----------e-----------");
    console.log("l18: "/* sender end/spend balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002],[0,0], 1));
    console.log("l19: "/* proposal end/spend balance */ + await h52./* balance_of */f140([3, 5], [1011, 1011],[0,0], 1));



    //freeze(4): 1-freeze_tokens, 0-unfreeze_tokens
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [4, bgN(1, 16), 360/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 1003], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [5], [23],/* <4>freeze_exchanges */
        [200_000], [23],/* freeze amounts */
        [1002], [23],/* freeze accounts */
        [0], [23],/* depth */
        [1], [23],/* 8 - action */
        [0], [23],
        [0, 0], [23, 23],
      ]
    ];
    var ss = [[["e", "e", "e"]]];
    console.log("-");
    console.log("-----------e-----------");
    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    var v8/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l20: "/* Freeze Proposal Data */ + await g5./* read_id */f77(1013, false));
    console.log("l21: "/* GasEst */ + nWC(v8/* gas_cons */));
    console.log("-----------e-----------");
    console.log("l22: "/* sender_end/spend_balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002],[0,0], 1));
    console.log("l23: "/* proposal_end/spend_balance */ + await h52./* balance_of */f140([3, 5], [1013, 1013],[0,0], 1));



    //un-freeze(4): 1-freeze_tokens, 0-unfreeze_tokens
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [4, bgN(1, 16), 360/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 1003], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [5], [23],/* <4>un-freeze exchanges */
        [200_000], [23],/* un-freeze amounts */
        [1002], [23],/* un-freeze accounts */
        [0], [23],/* depth */
        [0], [23],/* 8 - action un-freeze */
        [0], [23],
        [0, 0], [23, 23],
      ]
    ];
    var ss = [[["e", "e", "e"]]];
    console.log("-");
    console.log("-----------e-----------");
    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    var v8/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l24: "/* Un-freezeProposalData */ + await g5./* read_id */f77(1015, false));
    console.log("l25: "/* GasEst */ + nWC(v8/* gas_cons */));
    console.log("-----------e-----------");
    console.log("l26: "/* sender_end/spend_balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002],[0,0], 1));
    console.log("l27: "/* proposal_end/spend_balance */ + await h52./* balance_of */f140([3, 5], [1015, 1015],[0,0], 1));


    //main contract spend
    console.log("l28/l29: "/* AccountTransactionData */ + await e5.f279([1002]));
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, bgN(1, 16), 360/* 2 */, bgN(2, 16), 0, 2, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [3], [23],/* 4 - exchanges */
        [9000], [23],/* amounts */
        [2], [23]/* receivers */
        [0], [23],/* depth */
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ]
    ];
    var ss = [[["e", "e", "e"]]];
    console.log("-");
    console.log("-----------e-----------");
    console.log("-----------e-----------");
     e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    var v8/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l30: "/* ReconfigProposalData */ + await g5./* read_id */f77(1007, false));
    console.log("l31: "/* GasEst */ + nWC(v8/* gas_cons */));
    console.log("-----------e-----------");
    console.log("l32: "/* sender_end/spend_balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002],[0,0], 1));
    console.log("l33: "/* proposal_end/spend_balance */ + await h52./* balance_of */f140([3, 5], [1017, 1017],[0,0], 1));


    /* sender has not entered contract */
    var vv = [
      [
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [53, 53],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, bgN(1, 16), 360/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [3], [23],/* 4 exchange */
        [9000], [23],
        [2], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23],
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(17_000_000, 9) })).to.be.reverted;


    /* sender cannot vote in main contract */
    var vv = [
      [
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [53, 53],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, bgN(1, 16), 360/* 2 */, bgN(2, 16), 0, 2, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [3], [23],/* 4 exchange */
        [9000], [23],
        [1002], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23],
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(17_000_000, 9) })).to.be.reverted;


    /* invalid consensus type targeted */
    var vv = [
      [
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [53, 53],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [33, bgN(1, 16), 360/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [3], [23],/* 4 - exchange */
        [9000], [23],
        [2], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23],
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(17_000_000, 9) })).to.be.reverted;


    /* invalid consensus type targeted */
    var vv = [
      [
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [53, 53],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, bgN(1, 16), 360/* 2 */, bgN(1, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [3], [23],/* 4 - exchange */
        [9000], [23],
        [2], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23],
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(17_000_000, 9) })).to.be.reverted;


    /* invalid modify target set */
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [1, bgN(1, 16), 360/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [1], [23],/* 4 - reconfig_array_pos */
        [2], [23],/* reconfig_array_item_pos */
        [3601], [23],/* reconfig_array_new_item */
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23],
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(17_000_000, 9) })).to.be.reverted;


    /* invalid bounty amount set */
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [1, bgN(1, 16), 360/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 300], [23, 23],
        [1], [23],/* 4 - reconfig_array_pos */
        [2], [23],/* reconfig_array_item_pos */
        [3601], [23],/* reconfig_array_new_item */
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23],
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(17_000_000, 9) })).to.be.reverted;


    /* 
      ContractData: 30,0,10000000000000000,3600,0,900000,30000,90000,0,0,0,300000,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000,3,5,3000000,3000000,,,
      -----------e-----------
      sender end/spend balance: 29000000,32000000
      contract end/spend balance: 3000000,3000000
      -----------e-----------
      contract_entry_expiry, total_voter_count: 1683081300,1
      Entered Contracts: 1
      Transaction Count: 1
      -----------e-----------
      -
      MinimumEndAmmount: 825471, MinimumSpendAmmount: 5000000
      -----------e-----------
      Spend Proposal Data: 32,0,10000000000000000,360,20000000000000000,0,1003,0,0,0,0,0,0,0,0,0,0,,,3,9000,2
      GasEst: 998,690
      -----------e-----------
      sender end/spend balance: 26000000,29000000
      proposal end/spend balance: 3000000,3000000
      -
      -----------e-----------
      -----------e-----------
      Reconfig Proposal Data: 32,1,10000000000000000,360,20000000000000000,0,1003,0,0,0,1003,0,0,0,0,0,0,,,1,2,3601
      GasEst: 1,093,562
      -----------e-----------
      sender end/spend balance: 23000000,26000000
      proposal end/spend balance: 3000000,3000000
      -
      -----------e-----------
      -----------e-----------
      Buy Proposal Data: 32,2,10000000000000000,360,20000000000000000,0,1003,0,0,0,1003,0,0,0,0,0,0,,,3,5,100000,200000,400003,400003
      GasEst: 1,176,849
      -----------e-----------
      sender end/spend balance: 20000000,23000000
      proposal end/spend balance: 3000000,3000000
      target payer for buy: 1002
      -
      -----------e-----------
      -----------e-----------
      Mint Proposal Data: 32,2,10000000000000000,360,20000000000000000,0,1003,0,0,0,1003,0,0,0,0,0,0,,,5,200000,1002
      GasEst: 1,087,484
      -----------e-----------
      sender end/spend balance: 17000000,20000000
      proposal end/spend balance: 3000000,3000000
      -
      -----------e-----------
      -----------e-----------
      Freeze Proposal Data: 32,4,10000000000000000,360,20000000000000000,0,1003,0,0,0,1003,0,0,0,0,0,0,,,5,200000,1002
      GasEst: 1,081,678
      -----------e-----------
      sender end/spend balance: 14000000,17000000
      proposal end/spend balance: 3000000,3000000
      -
      -----------e-----------
      -----------e-----------
      Un-freeze Proposal Data: 32,4,10000000000000000,360,20000000000000000,0,1003,0,0,0,1003,0,0,0,0,0,0,,,5,200000,1002
      GasEst: 1,081,678
      -----------e-----------
      sender end/spend balance: 11000000,14000000
      proposal end/spend balance: 3000000,3000000
      Entered Contracts: 1
      Transaction Count: 7
      -
      -----------e-----------
      -----------e-----------
      Reconfig Proposal Data: 32,1,10000000000000000,360,20000000000000000,0,1003,0,0,0,1003,0,0,0,0,0,0,,,1,2,3601
      GasEst: 1,020,356
      -----------e-----------
      sender end/spend balance: 8000000,11000000
      proposal end/spend balance: 3000000,3000000








      l34: 30,0,10000000000000000,3600,0,900000,30000,90000,0,0,0,300000,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,3000000,3000000,0,0,,,,,
      -----------e-----------
      l35: 29000000,32000000
      l36: 3000000,3000000
      -----------e-----------
      l37: 1683081300
      l38: 40,1675678890,1,1
      -----------e-----------
      l1: 825471, l2: 5000000
      -----------e-----------
      l3: 32,0,10000000000000000,360,20000000000000000,0,1003,0,0,0,0,0,0,0,0,0,0,,,3,9000,2,0,0,0
      l4: 646,792
      -----------e-----------
      l5: 26000000,26999999
      l6: 3000000,5000001
      -
      -----------e-----------
      -----------e-----------
      l7: 32,1,10000000000000000,360,20000000000000000,0,1003,0,0,0,1003,0,0,0,0,0,0,,,1,2,3601,0,0,0
      l8: 698,928
      -----------e-----------
      l9: 23000000,23999999
      l10: 3000000,3000000
      -
      -----------e-----------
      -----------e-----------
      l11: 32,2,10000000000000000,360,20000000000000000,0,1003,0,0,0,1003,0,0,0,0,0,0,,,3,5,100000,200000,400003,400003,0,0,0,0,0,0
      l12: 775,117
      -----------e-----------
      l13: 20000000,20999999
      l14: 3000000,3000000
      -
      -----------e-----------
      -----------e-----------
      l16: 32,3,10000000000000000,360,20000000000000000,0,1003,0,0,0,1003,0,0,0,0,0,0,,,5,200000,1002,0,0,0
      l17: 692,370
      -----------e-----------
      l18: 17000000,17999999
      l19: 3000000,3000000
      -
      -----------e-----------
      -----------e-----------
      l20: 32,4,10000000000000000,360,20000000000000000,0,1003,0,0,0,1003,0,0,0,0,0,0,,,5,200000,1002,0,1,0
      l21: 714,937
      -----------e-----------
      l22: 14000000,14999999
      l23: 3000000,3000000
      -
      -----------e-----------
      -----------e-----------
      l24: 32,4,10000000000000000,360,20000000000000000,0,1003,0,0,0,1003,0,0,0,0,0,0,,,5,200000,1002,0,0,0
      l25: 692,370
      -----------e-----------
      l26: 11000000,11999999
      l27: 3000000,3000000
      l28/l29: 46,1675678896,1,7
      -
      -----------e-----------
      -----------e-----------
      l30: 32,1,10000000000000000,360,20000000000000000,0,1003,0,0,0,1003,0,0,0,0,0,0,,,1,2,3601,0,0,0
      l31: 692,370
      -----------e-----------
      l32: 11000000,11999999
      l33: 0,0
    */
  });

  /* can vote in a proposal */
  xit("30. can run e/f178/f189/f195/f79", async () => {
    const [booter, addr1, addr2, addr3] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);

    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    //create test contract and proposal (END Contract)
    var vv = [
      [ /* create-contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 0/* 6 */, 0, 1, 0, 300_000, 0, 0, 0/* 13 */, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [32_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [ /* enter contract */
        [30000, 3, 0],
        [1003], [23],/* contract ids */
        [bgN(1, 69)]/* expiry time (seconds) */
      ],
      [ /* make proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, bgN(1, 16), 360/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [3], [23],/* 4 exchanges */
        [9000], [23],
        [2], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23],
      ]
    ];
    var vv2 = [
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [53, 53],/* receivers */
        [32_000_001, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [ /* enter contract */
        [30000, 3, 0],
        [1003], [23],/* contract ids */
        [bgN(1, 69)]/* expiry time (seconds) */
      ]
    ];
    var ss = [[["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(32_000_000, 9) });
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, ss, { gasLimit: 4_300_000, value: bgN(32_000_001, 9) });

    console.log("l1: "/* ContractData */ + await g5./* read_id */f77(1003, false));
    console.log("-----------e-----------");
    console.log("l2: "/* ProposalData */ + await g5./* read_id */f77(1004, false));
    console.log("-----------e-----------");
    console.log("l3: "/* sender end/spend balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002], [0,0], 1));
    console.log("l4: "/* contract end/spend balance */ + await h52./* balance_of */f140([3, 5], [1003, 1003], [0,0], 1));
    console.log("l5: "/* proposal end/spend balance */ + await h52./* balance_of */f140([3, 5], [1004, 1004], [0,0], 1));
    console.log("l6: "/* sender2 end/spend balance */ + await h52./* balance_of */f140([3, 5], [1006, 1006], [0,0], 1));
    console.log("-----------e-----------");
    // console.log("l7: "/* contract_entry_expiry, total_voter_count */ + await g52.f167([[1003, 2, 1002], [1003, 2, 1006], [1003, 1, 1]]));
    console.log("l7: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1002]], 3));
    // console.log("l8: "/* EnteredContracts */ + await e5.f167([[1002, 1, 4], [1006, 1, 4]], [], 3));
    // console.log("l9: "/* TransactionCount */ + await e5.f167([[1002, 1, 3], [1006, 1, 3]], [], 3));

    console.log("l8, l9: "/* AccountTransactionData */ + await e5.f279([1002]));
    console.log("l10: "/* proposal consensus(y,w,n,auto_w) */ + await g52./* get_total_consensus_data */f266([1004], [], 0));
    console.log("-----------e-----------");
    console.log("-----------e-----------");



    /* <4>vote_proposal */
    // 23-real, 35-stack, 53-sender_account
    // 1-yes, 2-wait, 3-no
    var vv = [
      [
        [30000, 4, 0],
        [1004], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0],
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(32_000_000, 9) });
    await e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(32_000_000, 9) });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l11: "/* GasEst */ + nWC(gas_cons));
    console.log("l12: "/* sender end/spend balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002], [0,0], 1));
    console.log("l13: "/* sender2 end/spend balance */ + await h52./* balance_of */f140([3, 5], [1006, 1006], [0,0], 1));
    console.log("l14: "/* proposal end/spend balance */ + await h52./* balance_of */f140([3, 5], [1004, 1004], [0,0], 1));
    // console.log("l15: "/* senders vote */ + await g52./* scan_int_int_int */f167([[1004, 3, 1002], [1004, 3, 1006]]));
    console.log("l15: "/* senders vote */ + await g52./* get_account votes_data */f237([1004], [[1002, 1006]]));
    console.log("l16: "/* proposal consensus(y,w,n,auto_w) */ + await g52./* get_total_consensus_data */f266([1004], [], 0));


    //sender is not part of contract
    await expect(e5.connect(addr3).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(32_000_000, 9) })).to.be.reverted;


    //invalid vote
    var vv = [
      [
        [30000, 4, 0],
        [1004], [23],/* proposal ids */
        [7/* bad! */],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0],
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(32_000_000, 9) })).to.be.reverted;


    //invalid id passed as proposal
    var vv = [
      [
        [30000, 4, 0],
        [1003/* bad! */], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0],
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(32_000_000, 9) })).to.be.reverted;


    //invalid id passed as proposal
    var vv = [
      [
        [30000, 4, 0],
        [2/* bad! */], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0],
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(32_000_000, 9) })).to.be.reverted;


    /* 

      ContractData: 30,0,10000000000000000,3600,0,900000,30000,10000000000000000000000000000000000000000000000000000000000000000000000,0,1,0,300000,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000,3,5,3000000,3000000,,,
      -----------e-----------
      ProposalData: 32,0,10000000000000000,360,20000000000000000,0,1003,0,0,0,0,0,0,0,0,0,0,,,3,9000,2
      -----------e-----------
      sender end/spend balance: 26000000,29000000
      contract end/spend balance: 6000000,6000000
      proposal end/spend balance: 3000000,3000000
      sender2 end/spend balance: 29000000,32000000
      -----------e-----------
      contract_entry_expiry, total_voter_count: 1000000000000000000000000000000000000000000000000000000000000000000000,1000000000000000000000000000000000000000000000000000000000000000000000,2
      Entered Contracts: 1,1
      Transaction Count: 1,1
      proposal consensus(y,w,n,auto_w): 0,1,0,1
      -----------e-----------
      -----------e-----------
      GasEst: 418,080
      sender end/spend balance: 26030000,29030000
      sender2 end/spend balance: 29029700,32029700
      proposal end/spend balance: 2940300,2940300
      senders vote: 1,1
      proposal consensus(y,w,n,auto_w): 2,0,0,0






      l1: 30,0,10000000000000000,3600,0,900000,30000,0,0,1,0,300000,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,3000000,3000000,0,0,,,,,
      -----------e-----------
      l2: 32,0,10000000000000000,360,20000000000000000,0,1003,0,0,0,0,0,0,0,0,0,0,,,3,9000,2,0,0,0
      -----------e-----------
      l3: 26000000,29000000
      l4: 6000000,6000000
      l5: 3000000,3000000
      l6: 29000000,32000000
      -----------e-----------
      l7: 1000000000000000000000000000000000000000000000000000000000000000000000
      l8, l9: 40,1675754405,1,1
      l10: 1,0,0
      -----------e-----------
      -----------e-----------
      l11: 378,369
      l12: 26030000,29030000
      l13: 29029700,32029700
      l14: 2940300,2940300
      l15: 1,1
      l16: 0,2,0

    */

  });





  /* can modify subscription as authority */
  xit("31. can run e/f178/f196/f197", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1002, 1, 0, 100], [23, 23, 23, 23],
        [3, 5], [23, 23],
        [300_000, 500_000], [23, 23],
        [0, 0], [23, 23]
      ]
    ];
    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l1: "/* Data */ + await f5.f73(1003));

    var vv = [
      [
        [20000, 11, 0],
        [1003], [23],/* targets */
        [1],/* target_array_pos */
        [3],/* target_array_items */
        [108], [23]/* new_items */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l2: "/* Data */ + await f5.f73(1003));


    /* bad target passed */
    var vv = [
      [
        [20000, 11, 0],
        [2/* bad! */], [23],/* targets */
        [1],/* target_array_pos */
        [3],/* target_array_items */
        [108], [23]/* new_items */
      ]
    ];
    console.log("e3");
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    /* bad authority */
    var vv = [
      [
        [20000, 11, 0],
        [1003], [23],/* targets */
        [1],/* target_array_pos */
        [3],/* target_array_items */
        [108], [23]/* new_items */
      ]
    ];
    console.log("e4");
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    //bad array pos
    // var vv = [
    //   [
    //     [20000, 11, 0],
    //     [1003], [23],/* targets */
    //     [/* bad! */4],/* target_array_pos */
    //     [3],/* target_array_items */
    //     [108], [23]/* new_items */
    //   ]
    // ];
    // console.log("e5");
    // await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    /* bad target array item */
    var vv = [
      [
        [20000, 11, 0],
        [1003], [23],/* targets */
        [1],/* target_array_pos */
        [/* bad! */2],/* target_array_items */
        [108], [23]/* new_items */
      ]
    ];
    console.log("e6");
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    //bad array item while adding exchange id
    var vv = [
      [
        [20000, 11, 0],
        [1003], [23],/* targets */
        [2],/* target_array_pos */
        [/* bad! */3],/* target_array_items */
        [1000], [23]/* new_items */
      ]
    ];
    console.log("e7");
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    var vv = [
      [
        [20000, 11, 0],
        [1003, 1003], [23, 23],/* targets */
        [2, 3],/* target_array_pos */
        [2, 2],/* target_array_items */
        [1005, 69000], [23, 23]/* new_items */
      ]
    ];
    console.log("e8");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l3: "/* Data */ + await f5.f73(1003));


    var vv = [
      [
        [20000, 11, 0],
        [1003, 1003], [23, 23],/* targets */
        [2, 3],/* target_array_pos */
        [2, 2],/* target_array_items */
        [1005, 69000], [23, 23]/* new_items */
      ]
    ];
    console.log("e9");
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.emit(f5, "e3"/* ModifySubscription */);

    /* 

      -----------e-----------
      Data: ,1002,1,0,100,3,5,300000,500000
      -----------e-----------
      Data: ,1002,1,0,108,3,5,300000,500000
      -----------e-----------
      Data: ,1002,1,0,108,3,5,1005,300000,500000,69000

    */
  });

  /* can modify token exchange as an authority */
  xit("32. can run e/f178/f179/f198", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    // 31(token_exchange)
    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l1: "/* Data */ + await h5.f85(1003));


    //modify token exchange
    var vv = [
      [
        [20000, 3, 0],
        [1003], [23],/* targets */
        [1],/* target_array */
        [0],/* target_array_items */
        [bgN(36, 12)], [23]/* new_items */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l2: "/* Data */ + await h5.f85(1003));


    //modify token exchange
    var vv = [
      [
        [20000, 3, 0],
        [1003], [23],/* targets */
        [1],/* target_array */
        [0],/* target_array_items */
        [bgN(37, 12)], [23]/* new_items */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l3: "/* Data */ + await h5.f85(1003));


    //modify token exchange
    var vv = [
      [
        [20000, 3, 0],
        [1003], [23],/* targets */
        [1],/* target_array */
        [0],/* target_array_items */
        [bgN(38, 12)], [23]/* new_items */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l4: "/* Data */ + await h5.f85(1003));


    //bad authority
    var vv = [
      [
        [20000, 3, 0],
        [1003], [23],/* targets */
        [1],/* target_array */
        [0],/* target_array_items */
        [bgN(38, 12)], [23]/* new_items */
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //bad value
    var vv = [
      [
        [20000, 3, 0],
        [1003], [23],/* targets */
        [1],/* target_array */
        [0],/* target_array_items */
        [bgN(38, 66)], [23]/* new_items */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //bad value
    var vv = [
      [
        [20000, 3, 0],
        [1003], [23],/* targets */
        [1],/* target_array */
        [12],/* target_array_items */
        [bgN(38, 12)], [23]/* new_items */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //bad authority
    var vv = [
      [
        [20000, 3, 0],
        [1003], [23],/* targets */
        [1],/* target_array */
        [7],/* target_array_items */
        [0], [23]/* new_items */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;
  });

  /* can freeze and unfreeze balances as an authority */
  xit("33. can run e/f178/f185/f199", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ],
      [
        [30000, 8, 0],
        [3, 5, 0], [23, 23, 35],/* exchanges */
        [1002, 1002, 1002], [23, 23, 23],/* receivers */
        [32_000_000, 35_000_000, 1000]/* amounts */, [0, 0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(32_000_000, 9) });
    console.log("l1: "/* End, Spend, Custom */ + await h52./* balance_of */f140([3, 5, 1003], [1002, 1002, 1002],[0,0,0], 1));

    //1-freeze_tokens , 0-unfreeze_tokens 
    //freeze 530 tokens
    var vv = [
      [
        [30000, 6, 0],
        [1003], [23],/* target_exchanges */
        [1002], [23],/* target_account_ids */
        [530],/* freeze_amounts */
        [1],/* action */
        [0]
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l2: "/* GasEst */ + nWC(gas_cons));
    console.log("l3: "/* Balance */ + await h52./* balance_of */f140([1003], [1002], [0], 1));
    console.log("l4: "/* Balance Frozen */ + await h52./* balance_of */f140([1003], [1002], [0], 2));

    //unfreeze 350 tokens
    var vv = [
      [
        [30000, 6, 0],
        [1003], [23],/* target_exchanges */
        [1002], [23],/* target_account_ids */
        [350],/* freeze_amounts */
        [0],/* action */
        [0]
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l5: "/* GasEst */ + nWC(gas_cons));
    console.log("l6: "/* Balance */ + await h52./* balance_of */f140([1003], [1002], [0], 1));
    console.log("l7: "/* Balance Frozen */ + await h52./* balance_of */f140([1003], [1002],[0], 2));


    //sender not exchange authority
    var vv = [
      [
        [30000, 6, 0],
        [1003], [23],/* target_exchanges */
        [1002], [23],/* target_account_ids */
        [10],/* freeze_amounts */
        [1],/* action */
        [0]
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    //sender not exchange authority
    var vv = [
      [
        [30000, 6, 0],
        [1003], [23],/* target_exchanges */
        [1002], [23],/* target_account_ids */
        [10],/* freeze_amounts */
        [0],/* action */
        [0]
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //attempting to unfreeze larger amount than balance
    var vv = [
      [
        [30000, 6, 0],
        [1003], [23],/* target_exchanges */
        [1002], [23],/* target_account_ids */
        [/* bad! */1000000],/* freeze_amounts */
        [0],/* action */
        [0]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;




    //invalid target exchange passed
    var vv = [
      [
        [30000, 6, 0],
        [1002/* bad! */], [23],/* target_exchanges */
        [1002], [23],/* target_account_ids */
        [1],/* freeze_amounts */
        [0],/* action */
        [0]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    /* 
      -----------e-----------
      End, Spend, Custom: 31000000,34000000,1000
      -----------e-----------
      GasEst: 393,509
      Balance: 470
      Balance Frozen: 530
      -----------e-----------
      GasEst: 376,577
      Balance: 820
      Balance Frozen: 180
    */
  });





  /* can submit a proposal */
  xit("34. can run e/f178/f200/f201/f202", async () => {
    const [booter, addr1, addr2, addr3] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(36, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 30_000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);

    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    console.log("t: " + tt);

    //create test contract and proposal (END Contract)
    var vv = [
      [/* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, bgN(1, 70)/* 6 */, 0, 1, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [32_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0, 0]
      ],
      [/* enter contract */
        [30000, 3, 0],
        [1003], [23],/* contract ids */
        [bgN(1, 69)]/* expiry time (seconds) */
      ],
      [/* make proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, (tt+35_000), 0/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [1_000_000, 100_000], [23, 23],
        [3], [23],/* 4 exchanges */
        [100_000], [23],
        [35000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ],
      [/* vote proposal */
        [30000, 4, 0],
        [1004], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];
    var vv2 = [
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [53, 53],/* receivers */
        [32_000_001, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0, 0]
      ],
      [ /* enter contract */
        [30000, 3, 0],
        [1003], [23],/* contract ids */
        [bgN(1, 69)]/* expiry time (seconds) */
      ],
      [/* vote proposal */
        [30000, 4, 0],
        [1004], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];
    var ss = [[["e", "e", "e"]]];
    console.log("---l0----");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(32_000_001, 9) });
    console.log("---l02----");
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, ss, { gasLimit: 4_300_000, value: bgN(32_000_001, 9) });

    console.log("l1: "/* Contract Data Sample:  */ + (await g5./* read_id */f77(1003, false))[1][2]);
    console.log("-----------e-----------");
    console.log("l2: "/* Proposal Data Sample */ + (await g5./* read_id */f77(1004, false))[1][1]);
    console.log("-----------e-----------");
    console.log("l3: "/* sender end/spend balance: */ + await h52./* balance_of */f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l4: "/* contract end/spend balance */ + await h52./* balance_of */f140([3, 5], [1003, 1003], [0, 0], 1));
    console.log("l5: "/* proposal end/spend balance */ + await h52./* balance_of */f140([3, 5], [1004, 1004], [0, 0], 1));
    console.log("l6: "/* sender2 end/spend balance */ + await h52./* balance_of */f140([3, 5], [1006, 1006], [0, 0], 1));
    console.log("-----------e-----------");
    // console.log("l7: "/* contract_entry_expiry, total_voter_count */ + await g52.f167([[1003, 2, 1002], [1003, 2, 1006], [1003, 1, 1]]));
    console.log("l7: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1002]], 3));
    // console.log("l8: "/* Entered Contracts */ + await e5.f167([[1002, 1, 4], [1006, 1, 4]], [], 3));
    // console.log("l9: "/* Transaction Count */ + await e5.f167([[1002, 1, 3], [1006, 1, 3]], [], 3));
    console.log("l8, l9: "/* AccountTransactionData */ + await e5.f287([1002]));
    // console.log("l10: "/* proposal consensus(y,w,n,auto_w) */ + await g52./* get_vote_data */f167([[1004, 1, 3], [1004, 1, 2], [1004, 1, 4], [1004, 1, 7]]));
    console.log("l10: "/* proposal consensus(y,w,n,auto_w) */ + await g52./* get_total_consensus_data */f266([1004], [[1002]], 0));


    var v6/* time_inc */ = 1000_000;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);

    console.log("-----------e-----------");
    console.log("-----------e-----------");



    //<5>submit_consensus_request
    //type spend
    var vv = [
      [
        [30000, 5, 0, 0, 0],
        [1004], [23]/* targets */
      ]
    ];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    var v7/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l11: "/* GasEst */ + nWC(v7/* gas_cons */));
    console.log("l12: "/* contract end balance */ + await h52./* balance_of */f140([3], [1003], [0], 1));
    console.log("l13: "/* target end balance */ + await h52./* balance_of */f140([3], [35000], [0], 1));
    console.log("l14: "/* burn address end balance */ + await h52./* balance_of */f140([3], [0], [0], 1));



    console.log("-----------e-----------");
    console.log("-----------e-----------");



    //recofig contract
    var vv = [
      [/* create proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [1, (parseInt(tt)+35_000), 0/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 1003], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [1], [23],/* 4 - reconfig_array_pos */
        [2], [23],/* reconfig_array_item_pos */
        [3601], [23],/* reconfig_array_new_item */
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ],
      [/* vote proposal */
        [30000, 4, 0],
        [0], [35],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    var vv2 = [
      [/* vote proposal */
        [30000, 4, 0],
        [1009], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    console.log("l15: "/* "Reconfig proposal data sample */ + (await g5./* read_id */f77(1009, false))[1][5]);
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, ss, { gasLimit: 4_300_000, value: 35 });

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");



    //submit reconfig contract consensus
    var vv = [
      [
        [30000, 5, 0, 0, 0],
        [1009], [23]/* targets */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    console.log("l16: "/* Contract Data Sample */ + (await g5./* read_id */f77(1003, false))[1][2]);


    console.log("-----------e-----------");
    console.log("-----------e-----------");



    //recofig subscription
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1003, 1, 0, 100], [23, 23, 23, 23],
        [3, 5], [23, 23],
        [100, 100], [23, 23],
        [0, 0], [23, 23]
      ],
      [/* create proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [1, (parseInt(tt)+35_000), 0/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 35],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [1], [23],/* 4 - reconfig_array_pos */
        [3], [23],/* reconfig_array_item_pos */
        [109], [23],/* reconfig_array_new_item */
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ],
      [/* vote proposal */
        [30000, 4, 0],
        [1], [35],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    var vv2 = [
      [/* vote proposal */
        [30000, 4, 0],
        [1014], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];
    ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    console.log("l17: "/* Subscription Data Sample */ + (await f5.f73(1013))[1][0]);
    console.log("l18: "/* Reconfig proposal data sample */ + (await g5./* read_ids */f78([1014], false))[0][1][1]);
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, ss, { gasLimit: 4_300_000, value: 35 });

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    v6 = 100_000_000
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");



    //submit reconfig subscription consensus
    var vv = [
      [
        [30000, 5, 0, 0, 0],
        [1014], [23]/* targets */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    console.log("l19: "/* Subscription Data sample */ + (await f5.f73(1013))[1][0]);
    console.log("l20: "/* Current Id */ + await e5.f147(3/* get_id */));//1016
    console.log("-----------e-----------");

    console.log("-----------e-----------");
    console.log("-----------e-----------");




    //recofig token
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1003, 1003, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ],
      [/* create proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [1, (parseInt(tt)+35_000), 0/* 2 */, bgN(2, 16), 0, 2, 0/* 6 */, 0, 0, 5], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [1], [23],/* 4 - reconfig_array_pos */
        [11], [23],/* reconfig_array_item_pos */
        [bgN(45, 12)], [23],/* reconfig_array_new_item */
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ],//1019
      [/* vote proposal */
        [30000, 4, 0],
        [1], [35],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    var vv2 = [
      [/* vote proposal */
        [30000, 4, 0],
        [1019], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    console.log("l21: "/* Token Exchange Data sample */ + (await h5.f85(1018))[1][0]);
    console.log("l22: "/* Reconfig proposal data sample */ + (await g5./* read_ids */f78([1019], false))[0][1][1]);
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, ss, { gasLimit: 4_300_000, value: 35 });

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");

    //submit reconfig token consensus
    var vv = [
      [
        [30000, 5, 0, 0, 0],
        [1019], [23]/* targets */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    console.log("l23: "/* Token Exchange Data sample */ + (await h5.f85(1018))[1][0]);
    console.log("l24: "/* Current Id */ + await e5.f147(3/* get_id */));//1021
    console.log("-----------e-----------");


    console.log("-----------e-----------");
    console.log("-----------e-----------");




    //buy
    var vv = [
      [/* create proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [2, (parseInt(tt)+35_000), 0/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 35],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [3, 5], [23, 23],/* <4>buy_exchanges */
        [100_000, 100_000], [23, 23],
        [0], [23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ],
      [/* vote proposal */
        [30000, 4, 0],
        [0], [35],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    var vv2 = [
      [/* vote proposal */
        [30000, 4, 0],
        [1023], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    console.log("l25: "/* Buy proposal data sample */ + (await g5./* read_ids */f78([1023], false))[0][1][0]);
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, ss, { gasLimit: 4_300_000, value: 35 });

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");

    //submit buy consensus
    var vv = [
      [
        [30000, 5, 0, 0, 0],
        [1023], [23]/* targets */
      ]
    ];
    console.log("l26: "/* contract end/spend balance */ + await h52./* balance_of */f140([3, 5], [1003, 1003], [0, 0], 1));
    console.log("l27: "/* sender end/spend balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l28: "/* trust fee targets end/spend balance */ + await h52./* balance_of */f140([3, 5], [0, 2], [0, 0], 1));
    console.log("-----------e-----------");

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    console.log("l29: "/* contract end/spend balance */ + await h52./* balance_of */f140([3, 5], [1003, 1003], [0, 0], 1));
    console.log("l30: "/* sender end/spend balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l31: "/* trust fee targets end/spend balance */ + await h52./* balance_of */f140([3, 5], [0, 2], [0, 0], 1));
    console.log("l32: "/* Current Id */ + await e5.f147(3/* get_id */));
    console.log("-----------e-----------");



    //authmint token
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1003, 1003, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ],
      [ /* create mint proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [3, (parseInt(tt)+35_000), 0/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0], [35],/* <4>mint_exchanges */
        [200_000], [23],
        [53000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ],
      [/* vote proposal */
        [30000, 4, 0],
        [1], [35],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    var vv2 = [
      [/* vote proposal */
        [30000, 4, 0],
        [1028], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });

    console.log("l33: "/* mint proposal data */ + (await g5./* read_ids */f78([1028], false))[0][1][0]);
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, ss, { gasLimit: 4_300_000, value: 35 });

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");

    var vv = [
      [
        [30000, 5, 0, 0, 0],
        [1028], [23]/* targets */
      ]
    ];
    console.log("l34e: "/* get proposal object */ + (await g5.f77/* read_id */(1028, false))[11]);
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    console.log("l34: "/* auth mint target balance */ + await h52./* balance_of */f140([1027], [53000], [0], 1));
    console.log("l35: "/* Token Exchange Data sample */ + (await h5.f85(1027))[1][0]);
    console.log("l36: "/* Current Id */ + await e5.f147(3/* get_id */));
    console.log("-----------e-----------");


    //freeze token
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1003, 1003, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ],
      [
        [30000, 8, 0],
        [0], [35],/* exchanges */
        [1002], [23],/* receivers */
        [1000]/* amounts */, [0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0]
      ],
      [ /* create freeze proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [4, (parseInt(tt)+35_000), 0/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0], [35],/* <4>freeze_exchanges */
        [42], [23],/* freeze amounts */
        [1002], [23],/* freeze accounts */
        [0], [23],/* depth */
        [1], [23],/* action */
        [0], [23],
        [0, 0], [23, 23]
      ],
      [/* vote proposal */
        [30000, 4, 0],
        [2], [35],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    var vv2 = [
      [/* vote proposal */
        [30000, 4, 0],
        [1033], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    console.log("l37: "/* ProposalData */ + (await g5./* read_id */f77(1033, false))[1][0]);
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, ss, { gasLimit: 4_300_000, value: 35 });

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);

    console.log("-----------e-----------");


    var vv = [
      [
        [30000, 5, 0, 0, 0],
        [1033], [23]/* targets */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    console.log("l38: "/* freeze target balance */ + await h52./* balance_of */f140([1032], [1002], [0], 1));
    console.log("l39: "/* Balance Frozen */ + await h52./* balance_of */f140([1032], [1002], [0], 2));
    console.log("l40: "/* Current Id */ + await e5.f147(3/* get_id */));
    console.log("-----------e-----------");



    //invalid submit time
    var id = 1037;
    var vv = [
      [ /* make proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, (parseInt(tt)+35_000), 0/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [1_000_000, 100_000], [23, 23],
        [3], [23],/* 4 - exchange */
        [100_000], [23],
        [35000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ],
      [/* vote proposal */
        [30000, 4, 0],
        [0], [35],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    var vv2 = [
      [/* vote proposal */
        [30000, 4, 0],
        [id], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, ss, { gasLimit: 4_300_000, value: 35 });

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("-----------e-----------");

    /* submit proposal */
    var vv = [
      [
        [30000, 5, 0, 0, 0],
        [id], [23]/* targets */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;
    console.log("l41: "/* Current Id */ + await e5.f147(3/* get_id */));
    console.log("-----------e-----------");


    //invalid submit time
    var id = 1040;
    var vv = [
      [ /* make proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, (parseInt(tt)+35_000), 0/* 2 */, (parseInt(tt)+300_000), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [1_000_000, 100_000], [23, 23],
        [3], [23],
        [100_000], [23],
        [35000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ],
      [/* vote proposal */
        [30000, 4, 0],
        [0], [35],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    var vv2 = [
      [/* vote proposal */
        [30000, 4, 0],
        [id], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, ss, { gasLimit: 4_300_000, value: 35 });

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");

    /* submit proposal */
    var vv = [
      [
        [30000, 5, 0, 0, 0],
        [id], [23]/* targets */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;
    console.log("l42: "/* Current Id */ + await e5.f147(3/* get_id */));
    console.log("-----------e-----------");




    //invalid submit time
    var id = 1043;
    var vv = [
      [ /* make proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, (parseInt(tt)+35_000), 0/* 2 */, (parseInt(tt)+90_000), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [1_000_000, 100_000], [23, 23],
        [3], [23],/* 4 - exchange */
        [100_000], [23],
        [35000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ],
      [/* vote proposal */
        [30000, 4, 0],
        [0], [35],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    var vv2 = [
      [/* vote proposal */
        [30000, 4, 0],
        [id], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, ss, { gasLimit: 4_300_000, value: 35 });

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");


    /* submit proposal */
    var vv = [
      [
        [30000, 5, 0, 0, 0],
        [id], [23]/* targets */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;
    console.log("l43: "/* Current Id */ + await e5.f147(3/* get_id */));
    console.log("-----------e-----------");




    //invalid owner
    var id = 1046;
    var vv = [
      [ /* make proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, (parseInt(tt)+35_000), 0/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [1_000_000, 100_000], [23, 23],
        [3], [23],/* 4 - exchange */
        [100_000], [23],
        [35000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ],
      [/* vote proposal */
        [30000, 4, 0],
        [0], [35],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    var vv2 = [
      [/* vote proposal */
        [30000, 4, 0],
        [id], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, ss, { gasLimit: 4_300_000, value: 35 });

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");

    /* submit proposal */
    var vv = [
      [
        [30000, 5, 0, 0, 0],
        [id], [23]/* targets */
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.not.be.reverted;
    console.log("l44: "/* Current Id */ + await e5.f147(3/* get_id */));
    console.log("-----------e-----------");


    var id = 1050;
    var vv = [
      [ /* make proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [1, (parseInt(tt)+35_000), 0/* 2 */, bgN(12, 13), 0, 2, 0/* 6 */, 0, 0, 2/* main_contract */], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [1_000_000, 100_000], [23, 23],
        [1], [23],/* 4 - reconfig_array_pos */
        [16], [23],/* reconfig_array_item_pos */
        [36], [23],/* reconfig_array_new_item */
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ],
      [/* vote proposal */
        [30000, 4, 0],
        [0], [35],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    var vv2 = [
      [/* vote proposal */
        [30000, 4, 0],
        [id], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23],/* target bounty exchanges */
        [0, 0]
      ]
    ];

    ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, ss, { gasLimit: 4_300_000, value: 35 });

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");

    /* submit proposal */
    var vv = [
      [
        [30000, 5, 0, 0, 0],
        [id], [23]/* targets */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.not.be.reverted;
    console.log("l45: "/* Updated value: */ + await e52.f207([[2, 1, 16]]));
    console.log("l46: "/* Current Id */ + await e5.f147(3/* get_id */));
    console.log("-----------e-----------");

    /* 
      Contract Data Sample: 3600
      -----------e-----------
      Proposal Data Sample: 1683081300
      -----------e-----------
      sender end/spend balance: 28010000,31901000
      contract end/spend balance: 6000000,6000000
      proposal end/spend balance: 980100,98010
      sender2 end/spend balance: 29009900,32000990
      -----------e-----------
      contract_entry_expiry, total_voter_count: 1000000000000000000000000000000000000000000000000000000000000000000000,1000000000000000000000000000000000000000000000000000000000000000000000,2
      Entered Contracts: 1,1
      Transaction Count: 1,1
      proposal consensus(y,w,n,auto_w): 2,0,0,0
      time: 1648645710
      time: 1748645711
      -----------e-----------
      -----------e-----------
      GasEst: 493,898
      contract end balance: 5900000
      target end balance: 97000
      burn address end balance: 3000
      -----------e-----------
      -----------e-----------
      reconfig contract
      Reconfig proposal data sample: 1003
      time: 1748645714
      time: 1848645714
      -----------e-----------
      Contract Data Sample: 3601
      -----------e-----------
      -----------e-----------
      -----------e-----------
      reconfig subscription
      Subscription Data Sample: 1003
      Reconfig proposal data sample: 1918546813
      time: 1848645717
      time: 1948645718
      -----------e-----------
      Subscription Data sample: 1003
      Current Id: 1016
      -----------e-----------
      -----------e-----------
      -----------e-----------
      reconfig token exchange
      Token Exchange Data sample: 35000000000000
      Reconfig proposal data sample: 2008546813
      time: 1948645721
      time: 2048645721
      -----------e-----------
      Token Exchange Data sample: 45000000000000
      Current Id: 1021
      -----------e-----------
      -----------e-----------
      -----------e-----------
      Buy consensus request
      Buy proposal data sample: 2
      time: 2048645724
      time: 2148645724
      -----------e-----------
      contract end/spend balance: 5900000,6000000
      sender end/spend balance: 16130000,20021000
      trust fee targets end/spend balance: 3000,0
      -----------e-----------
      contract end/spend balance: 5997000,6095000
      sender end/spend balance: 16030000,19921000
      trust fee targets end/spend balance: 6000,5000
      Current Id: 1025
      -----------e-----------
      mint from token exchange
      mint proposal data: 3
      time: 2148645727
      time: 2248645727
      -----------e-----------
      auth mint target balance: 200000
      Token Exchange Data sample: 35000000000000
      Current Id: 1030
      -----------e-----------
      freeze balance in token exchange
      ProposalData: 4
      time: 2248645730
      time: 2348645730
      -----------e-----------
      freeze target balance: 958
      Balance Frozen: 42
      Current Id: 1035
      -----------e-----------
      -----------e-----------
      Current Id: 1038
      -----------e-----------
      time: 2348645737
      time: 2448645737
      -----------e-----------
      Current Id: 1041
      -----------e-----------
      time: 2448645740
      time: 2548645740
      -----------e-----------
      Current Id: 1044
      -----------e-----------
      time: 2548645743
      time: 2648645744
      -----------e-----------
      Current Id: 1048
      -----------e-----------
      time: 2648645748
      time: 2748645748
      -----------e-----------
      Updated value: 36
      Current Id: 1052
      -----------e-----------
    */
  });

  /* can extend entering contract */
  xit("35. can run e/f178/f189/f208", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);

    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    //create test contract (END Contract)
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), bgN(1, 36)/* 2 */, 0, 900_000, 30_000, 1_000_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
        
      ],
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [32_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [ /* enter contract */
        [30000, 3, 0],
        [1003], [23],/* contract ids */
        [tt+100_000]/* expiry time (seconds) */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(32_000_000, 9) });
    console.log("l1: "/* max_extend_enter_contract_limit */ + (await g5./* read_id */f77(1003, false))[1][2]);
    console.log("-----------e-----------");
    console.log("l2: "/* sender end/spend balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l3: "/* contract end/spend balance */ + await h52./* balance_of */f140([3, 5], [1003, 1003], [0, 0], 1));
    console.log("-----------e-----------");
    // console.log("l4: "/* contract_entry_expiry, total_voter_count */ + await g52.f167([[1003, 2, 1002], [1003, 1, 1]]));
    // console.log("l5: "/* Entered Contracts */ + await e5.f167([[1002, 1, 4]], [], 3));
    // console.log("l6: "/* Transaction Count */ + await e5.f167([[1002, 1, 3]], [], 3));

    console.log("l4: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1002]], 3));
    console.log("l5: "/* AccountTransactionData */ + await e5.f279([1002]));
    console.log("-----------e-----------");
    console.log("-");

    tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    console.log("t: " + tt);


    // <14>execute_extend_enter_contract_work
    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [
        [30000, 14, 0],
        [1003], [23],/* contract ids */
        [tt+100_000]/* expiry time (seconds) */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l4: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1002]], 3));
    console.log("l5: "/* AccountTransactionData */ + await e5.f279([1002]));
    console.log("l9: "/* GasEst */ + nWC(v6/* gas_cons */));


    // invalid expiry time passed
    var vv = [
      [
        [30000, 14, 0],
        [1003], [23],/* contract ids */
        [bgN(1, 54)]/* expiry time (seconds) */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    /* 
        max_extend_enter_contract_limit: 1000000000000000000000000000000000000
        -----------e-----------
        sender end/spend balance: 29000000,32000000
        contract end/spend balance: 3000000,3000000
        -----------e-----------
        contract_entry_expiry, total_voter_count: 1649549977,1
        Entered Contracts: 1
        Transaction Count: 1
        -----------e-----------
        -
        time: 1648651980
        -----------e-----------
        contract_entry_expiry, total_voter_count: 1650549977,1
        Entered Contracts: 1
        GasEst: 304,215




        l1: 1000000000000000000000000000000000000
        -----------e-----------
        l2: 29000000,32000000
        l3: 3000000,3000000
        -----------e-----------
        l4: 1676031143
        l5: 40,1675931144,1,1
        -----------e-----------
        -
        t: 1675931144
        -----------e-----------
        l4: 1676031144
        l5: 41,1675931145,1,2
        l9: 322,471
    */
  });

  /* can exit a contract and force exit accounts */
  xit("36. can run e/f178/f189/f209", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);

    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    //create test contract (END Contract)
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), bgN(1, 36)/* 2 */, 0, 900_000, 30_000, 1000_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,1/* 38 */,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
        
      ],
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [32_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [ /* enter contract */
        [30000, 3, 0],
        [1003], [23],/* contract ids */
        [tt+100_000]/* expiry time (seconds) */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(32_000_000, 9) });
    console.log("-----------e-----------");
    console.log("l1: "/* sender end/spend balance */ + await h52./* balance_of */f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l2: "/* contract end/spend balance */ + await h52./* balance_of */f140([3, 5], [1003, 1003], [0, 0], 1));
    console.log("-----------e-----------");
    // console.log("l3: "/* contract_entry_expiry, total_voter_count */ + await g52.f167([[1003, 2, 1002], [1003, 1, 1]]));
    console.log("l4: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1002]], 3));
    console.log("l5: "/* AccountTransactionData */ + await e5.f279([1002]));
    console.log("-----------e-----------");
    console.log("-");


    // <11>exit_contract
    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [
        [30000, 11, 0],
        [1003], [23]/* contract ids */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    // console.log("l6: "/* contract_entry_expiry, total_voter_count */ + await g52.f167([[1003, 2, 1002], [1003, 1, 1]]));
    // console.log("l7: "/* Entered Contracts */ + await e5.f167([[1002, 1, 4]], [], 3));
    console.log("l6: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1002]], 3));
    console.log("l7: "/* AccountTransactionData */ + await e5.f279([1002]));
    console.log("l8: "/* GasEst */ + nWC(gas_cons));



    //attempt exit contract twice
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //attempt exit main contract
    var vv = [
      [
        [30000, 11, 0],
        [2], [23]/* contract ids */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    // enter a contract
    var vv = [
      [
        [30000, 3, 0],
        [1003], [23],/* contract ids */
        [tt+100_000]/* expiry time (seconds) */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l9: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1002]], 3));


    // enter a contract
    var vv = [
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [0, 0], [53, 53],/* receivers */
        [32_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [
        [30000, 3, 0],
        [1003], [23],/* contract ids */
        [tt+100_000]/* expiry time (seconds) */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(32_000_000, 9) });
    console.log("l10: "/* sender2 account */ + await e5.f167([], [addr2.address], 2));
    console.log("l11: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1007]], 3));


    //attempt a force exit not as moderator
    var vv = [
      [
        [30000, 18, 0],
        [1003], [23],/* contract ids */
        [1002]/* account ids */
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;
    console.log("l12: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1002]], 3));



    //attempt a force exit as moderator
    var vv = [
      [
        [30000, 18, 0],
        [1003], [23],/* contract ids */
        [1007]/* account ids */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l13: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1007]], 3));



    //attempt a force exit for user not part of contract
    var vv = [
      [
        [30000, 18, 0],
        [1003], [23],/* contract ids */
        [1007]/* account ids */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    /* 

      -----------e-----------
      sender end/spend balance: 29000000,32000000
      contract end/spend balance: 3000000,3000000
      -----------e-----------
      contract_entry_expiry, total_voter_count: 1649549977,1
      Entered Contracts: 1
      Transaction Count: 1
      -----------e-----------
      -
      -----------e-----------
      contract_entry_expiry, total_voter_count: 0,0
      Entered Contracts: 1
      GasEst: 164,329

    */
  });






  /* can archive contracts and proposals */
  xit("37. can run e/f178/f189/f210/f211/f212", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);

    var v1/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    //create test contract (END Contract)
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    var id = 1003;
    var vv = [
      [ /* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), bgN(1, 36)/* 2 */, 0, 900_000, 30_000, 1000_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0, 0, tt+1_000_000, 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [32_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [ /* enter contract */
        [30000, 3, 0],
        [id], [23],/* contract ids */
        [1689549977]/* expiry time (seconds) */
      ],
      [ /* make proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, tt+35_000, 360/* 2 */, tt+53_000, 0, id, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [3], [23],
        [9000], [23],
        [2], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ],
      [/* vote proposal */
        [30000, 4, 0],
        [1004], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23], [0, 0]/* target bounty exchanges */
      ]
    ];
    await e5.connect(addr1).e(v1/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(32_000_000, 9) });
    console.log("-----------e-----------");
    console.log("l1: "/* contract data */ + await g5.f77(1003, false));
    console.log("-----------e-----------");
    console.log("l2: "/* proposal data */ + await g5.f77(1004, false));
    console.log("-----------e-----------");
    console.log("l3: "/* proposal balance */ + await h52.f140([3, 5], [1004, 1004], [0, 0], 1));
    console.log("l4: "/* contract balance */ + await h52.f140([3, 5], [1003, 1003], [0, 0], 1));
    console.log("l5: "/* senders balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    // console.log("l6: "/* EnteredContractData, total_voter_count */ + await g52.f167([[1003, 2, 1002], [1003, 1, 1]]));
    console.log("l6: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1002]], 3));
    // console.log("l7: "/* senders vote */ + await g52./* scan_int_int_int */f167([[1004, 3, 1002], [1004, 3, 1006]]));
    // console.log("l8: "/* proposal consensus(y,w,n,auto_w) */ + await g52./* get_vote_data */f167([[1004, 1, 3], [1004, 1, 2], [1004, 1, 4], [1004, 1, 7]]));
    console.log("l7: "/* senders vote */ + await g52./* get_account_votes_data */f237([1004],[[1002]]));
    console.log("l8: "/* proposal consensus(y,w,n,auto_w) */ + await g52./* get_total_consensus_data */f266([1004], [], 0));
    console.log("-----------e-----------");


    var v2/* time_inc */ = 150_999_990;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v2/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    console.log("t: " + tt);


    //<15>archive_proposals_or_contracts
    //archive proposal
    var vv = [
      [
        [30000, 15, 0],
        [1004], [23],/* contract ids */
        [1002], [3, 5], [0, 0]
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v1/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l9: "/* proposal data */ + await g5.f77(1004, false));
    console.log("l10: "/* proposal balance */ + await h52.f140([3, 5], [1004, 1004], [0, 0], 1));
    console.log("l11: "/* senders balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    // console.log("l12: "/* senders vote */ + await g52./* scan_int_int_int */f167([[1004, 3, 1002], [1004, 3, 1006]]));
    console.log("l12: "/* senders vote */ + await g52./* get_account_votes_data */f237([1004],[[1002]]));
    // console.log("l13: "/* proposal consensus(y,w,n,auto_w) */ + await g52./* get_vote_data */f167([[1004, 1, 3], [1004, 1, 2], [1004, 1, 4], [1004, 1, 7]]));
    console.log("l13: "/* proposal consensus(y,w,n,auto_w) */ + await g52./* get_total_consensus_data */f266([1004], [], 0));
    console.log("l14: "/* GasEst */ + nWC(gas_cons));


    //archive contract
    var vv = [
      [
        [30000, 15, 0],
        [1003], [23],/* contract ids */
        [1002], [3, 5], [0, 0]
      ]
    ];
    console.log("-----------e-----------");
    await e5.connect(addr1).e(v1/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l15: "/* contract data */ + await g5.f77(1003, false));
    console.log("l16: "/* contract balance */ + await h52.f140([3, 5], [1003, 1003], [0, 0], 1));
    console.log("l17: "/* senders balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    // console.log("l18: "/* EnteredContractData, total_voter_count */ + await g52.f167([[1003, 2, 1002], [1003, 1, 1]]));
    console.log("l18: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1002]], 3));
    console.log("l19: "/* GasEst */ + nWC(gas_cons));
    console.log("l20: "/* Current Id */ + await e5.f147(3/* get_id */));
    console.log("-----------e-----------");

    var id = 1008;
    var vv = [
      [ /* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), bgN(1, 36)/* 2 */, 0, 900_000, 30_000, 1000_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0, 0, tt+1000_000, 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [32_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [ /* enter contract */
        [30000, 3, 0],
        [id], [23],/* contract ids */
        [1849549977]/* expiry time (seconds) */
      ],
      [ /* make proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, tt+300_000, 360/* 2 */, tt+400_000, 0, id, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [3], [23],
        [9000], [23],
        [2], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ],
      [/* vote proposal */
        [30000, 4, 0],
        [1009], [23],/* proposal ids */
        [1],/* votes */
        [3, 5], [23, 23], [0, 0]/* target bounty exchanges */
      ]
    ];
    await e5.connect(addr1).e(v1/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(32_000_000, 9) });
    console.log("l21: "/* contract and proposal data */ + await g5.f78([1009, 1008], false));


    //archive proposal before expiry
    var vv = [
      [
        [30000, 15, 0],
        [1009], [23],/* proposal ids */
        [1002], [3, 5], [0, 0]
      ]
    ];
    await expect(e5.connect(addr1).e(v1/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    //archive contract before expiry
    var vv = [
      [
        [30000, 15, 0],
        [id], [23],/* contract ids */
        [1002], [3, 5], [0, 0]
      ]
    ];
    await expect(e5.connect(addr1).e(v1/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    var v2/* time_inc */ = 150_999_990;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v2/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);



    //archive proposal, invalid sender
    var vv = [
      [
        [30000, 15, 0],
        [1009], [23],/* proposal ids */
        [1002], [3, 5], [0, 0]
      ]
    ];
    console.log("archive proposal, invalid sender")
    await expect(e5.connect(addr2).e(v1/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //archive proposal, invalid target
    var vv = [
      [
        [30000, 15, 0],
        [10011], [23],/* proposal ids */
        [1002], [3, 5], [0, 0]
      ]
    ];
    console.log("archive proposal, invalid target")
    await expect(e5.connect(addr1).e(v1/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //archive contract and proposal after expiry
    var vv = [
      [
        [30000, 15, 0],
        [1009, id], [23, 23],/* contract ids */
        [1002], [3, 5], [0, 0],
        [1002], [3, 5], [0, 0]
      ]
    ];
    console.log("archive contract and proposal after expiry")
    await expect(e5.connect(addr1).e(v1/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.not.be.reverted;
    console.log("l22: "/* contract and proposal data */ + await g5.f78([1009, 1008], false));

    /*       
      -----------e-----------
      contract data: 30,0,10000000000000000,1000000000000000000000000000000000000,0,900000,30000,1000000,0,0,0,300000,0,0,0,0,1749149977,3,5,3000000,3000000,,,
      -----------e-----------
      proposal data: 32,0,1669549977,360,1689549977,0,1003,0,0,0,0,0,0,0,0,0,0,,,3,9000,2
      -----------e-----------
      proposal balance: 2970000,2970000
      contract balance: 3000000,3000000
      senders balance: 26030000,29030000
      EnteredContractData, total_voter_count: 1649549977,1
      senders vote: 1,0
      proposal consensus(y,w,n,auto_w): 1,0,0,0
      -----------e-----------
      time: 1648698737
      time: 1799698729
      -----------e-----------
      proposal data: 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,
      proposal balance: 0,0
      senders balance: 29000000,32000000
      senders vote: 0,0
      proposal consensus(y,w,n,auto_w): 0,0,0,0
      GasEst: 442,287
      -----------e-----------
      contract data: 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,
      contract balance: 0,0
      senders balance: 32000000,35000000
      EnteredContractData, total_voter_count: 0,0
      GasEst: 450,937
    */
  });

  /* can pay or cancel subscriptions */
  xit("38. can run e/f178/f197/f213/f214", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);


    // 33(subscription_object)
    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [ /* create un-cancellable subscription */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1001, 1, 0, 100, 0], [23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ],//1003
      [ /* create cancellable subscription */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1001, 1, 1, 100, 0], [23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ],//1004
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 2_300_000, value: bgN(17_000_000, 9) });
    console.log("l1: "/* un-cancellable subscription Data */ + await f5.f73(1003));
    console.log("l2: "/* cancellable subscription Data */ + await f5.f73(1004));
    console.log("l3: "/* un-cancellable target balance */ + await h52.f140([3, 5], [1001, 1001], [0, 0], 1));
    console.log("l4: "/* ancellable subscription balance */ + await h52.f140([3, 5], [1004, 1004], [0, 0], 1));
    console.log("l5: "/* senders balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("-----------e------------");



    // <2>pay_subscription
    var vv = [
      [
        [30000, 2, 0],
        [1003, 1004], [23, 23],/* target subscription ids */
        [5, 10]/* subscription buy amounts */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l6: "/* un-cancellable target balance */ + await h52.f140([3, 5], [1001, 1001], [0, 0], 1));
    console.log("l7: "/* cancellable subscription balance */ + await h52.f140([3, 5], [1004, 1004], [0, 0], 1));
    console.log("l8: "/* senders balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));

    console.log("l9: "/* un-cancellable LastTimePaid, TimePaidFor, UnclaimedTimePaid */ + await f5.f168([[1003, 1, 1002], [1003, 2, 1002], [1003, 3, 1002]]));

    console.log("l10: "/* cancellable LastTimePaid, TimePaidFor, UnclaimedTimePaid */ + await f5.f168([[1004, 1, 1002], [1004, 2, 1002], [1004, 3, 1002]]));

    console.log("available time: "/* time */ + await f5.f229([1004, 1003], [1002, 1002]));
    console.log("collectible time: "/* collectible time */ + await f5.f235([1004], [1002]));

    console.log("l11: "/* GasEst */ + nWC(v6/* gas_cons */));



    // <12>cancel_subscription 
    var vv = [
      [
        [30000, 12, 0],
        [1004], [23],/* target subscription ids */
        [3]/* subscription sell amounts */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();

    console.log("l12: "/* un-cancellable target balance */ + await h52.f140([3, 5], [1001, 1001], [0, 0], 1));
    console.log("l13: "/* cancellable subscription balance */ + await h52.f140([3, 5], [1004, 1004], [0, 0], 1));
    console.log("l14: "/* senders balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));

    console.log("l15: "/* cancellable LastTimePaid, TimePaidFor, UnclaimedTimePaid */ + await f5.f168([[1004, 1, 1002], [1004, 2, 1002], [1004, 3, 1002]]));

    console.log("available time: "/* time */ + await f5.f229([1004, 1003], [1002, 1002]));
    console.log("collectible time: "/* collectible time */ + await f5.f235([1004], [1002]));

    console.log("l16: "/* GasEst */ + nWC(v6/* gas_cons */));



    // attempting to cancel greater than existing amount
    var vv = [
      [
        [30000, 12, 0],
        [1004], [23],/* target subscription ids */
        [30]/* subscription sell amounts */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    var v7/* time_inc */ = 23260;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v7/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);

    console.log("available time: "/* time */ + await f5.f229([1004, 1003], [1002, 1002]));
    console.log("collectible time: "/* collectible time */ + await f5.f235([1004], [1002]));



    // attempting to cancel after expiry
    var vv = [
      [
        [30000, 12, 0],
        [1004], [23],/* target subscription ids */
        [1]/* subscription sell amounts */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //attempting to pay for item thats not a subscription
    var vv = [
      [
        [30000, 2, 0],
        [1009], [23],/* target subscription ids */
        [5]/* subscription buy amounts */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    /* 
        un-cancellable subscription Data: ,1001,1,0,100,3,5,1000,1000
        cancellable subscription Data: ,1001,1,1,100,3,5,1000,1000
        un-cancellable target balance: 0,0
        cancellable subscription balance: 0,0
        senders balance: 17000000,35000000
        -----------e------------
        -----------e-----------
        un-cancellable target balance: 5000,5000
        cancellable subscription balance: 10000,10000
        senders balance: 16985000,34985000
        un-cancellable LastTimePaid, TimePaidFor, UnclaimedTimePaid: 1648728816,15900,0
        cancellable LastTimePaid, TimePaidFor, UnclaimedTimePaid: 1648728816,31800,31800
        GasEst: 514,789
        -----------e-----------
        un-cancellable target balance: 5000,5000
        cancellable subscription balance: 7000,7000
        senders balance: 16988000,34988000
        cancellable LastTimePaid, TimePaidFor, UnclaimedTimePaid: 1648728816,22260,22260
        GasEst: 261,957
        time: 1648728818
        time: 1648752078





        l1: ,1001,1,0,100,0,0,0,3,5,1000,1000,0,0
        l2: ,1001,1,1,100,0,0,0,3,5,1000,1000,0,0
        l3: 0,0
        l4: 0,0
        l5: 17000000,35000000
        -----------e------------
        -----------e-----------
        l6: 5000,5000
        l7: 10000,10000
        l8: 16985000,34985000
        l9: 1676016153,15900,0
        l10: 1676016153,31800,31800
        available time: 31800,15900
        collectible time: 0
        l11: 450,819
        -----------e-----------
        l12: 5000,5000
        l13: 7000,7000
        l14: 16988000,34988000
        l15: 1676016153,22260,22260
        available time: 22259,15899
        collectible time: 1
        l16: 176,496
        t: 1676016155
        t: 1676039415
        available time: 0,0
        collectible time: 22260
    */
  });

  /* can collect subscriptions */
  xit("39. can run e/f178/f197/f215", async () => {
    //f302()
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);


    // 33(subscription_object)
    var vv = [
      [ /* create cancellable subscription */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1002, 1, 1, 100, 0], [23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ],//1003
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [
        [30000, 2, 0],
        [1003], [23],/* target subscription ids */
        [15]/* subscription buy amounts */
      ]
    ];
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 2_300_000, value: bgN(17_000_000, 9) });
    console.log("l1: "/* cancellable subscription balance */ + await h52.f140([3, 5], [1003, 1003], [0, 0], 1));
    console.log("l2: "/* senders balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l3: "/* cancellable LastTimePaid, TimePaidFor, UnclaimedTimePaid */ + await f5.f168([[1003, 1, 1002], [1003, 2, 1002], [1003, 3, 1002]]));


    // <13>collect_subscriptions
    var vv = [
      [
        [30000, 13, 0],
        [1003], [23],/* target subscription ids */
        [1002]/* subscription collect accounts */
      ]
    ];

    console.log("-----------e-----------");
    var time_inc = 10023260;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [time_inc]);
    await network.provider.send("evm_mine");


    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);


    console.log("-----------e-----------");
    //attempt to collect subscription not as authority
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();

    console.log("l4: "/* cancellable subscription balance */ + await h52.f140([3, 5], [1003, 1003], [0, 0], 1));
    console.log("l5: "/* senders balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l6: "/* cancellable LastTimePaid, TimePaidFor, UnclaimedTimePaid */ + await f5.f168([[1003, 1, 1002], [1003, 2, 1002], [1003, 3, 1002]]));

    console.log("l7: "/* GasEst */ + nWC(gas_cons));

    /* 
      cancellable subscription balance: 15000,15000
      senders balance: 16985000,34985000
      cancellable LastTimePaid, TimePaidFor, UnclaimedTimePaid: 1648740502,47700,47700
      -----------e-----------
      time: 1648740502
      time: 1658763763
      -----------e-----------
      cancellable subscription balance: 0,0
      senders balance: 17000000,35000000
      cancellable LastTimePaid, TimePaidFor, UnclaimedTimePaid: 1648740502,47700,0
      GasEst: 268,562



      l1: 15000,15000
      l2: 16985000,34985000
      l3: 1676016502,47700,47700
      -----------e-----------
      t: 1676016502
      t: 1686039762
      -----------e-----------
      l4: 0,0
      l5: 17000000,35000000
      l6: 1676016502,47700,0
      l7: 187,469
    */

  });






  /* can send awwards */
  xit("40. can run e/f178/f185/f184", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    // 23-real, 35-stack, 53-sender_account
    /* mint SPEND */
    var vv = [
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(17_000_000, 9) });


    //create contract
    var vv = [
      [
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 90_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });



    //enter contract
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    var vv = [
      [
        [30000, 3, 0],
        [1004], [23],/* contract ids */
        [tt+35_000]/* expiry time (seconds) */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });


    /* send awwards */
    var vv = [
      [
        [30000, 7, 0],
        [10035], [23],/* target receivers */
        [35],/* awward contexts */
        [3, 5], [23, 23],/* exchange ids for first target receiver */
        [200035, 200035],/* amounts for first target receiver */
        [0, 0]
      ]
    ];
    console.log("-----------e-----------");
    var ss = [[["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });

    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l1: "/* End/Spend balance */ + await h52./* balance_of */f140([3, 5], [10035, 10035], [0, 0], 1));
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));
    console.log("l3: "/* Current Id */ + await e5.f147(3/* get_id */));



    //attempt awward without being main contract votable
    var vv = [
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1008, 1008], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [
        [30000, 7, 0],
        [10035], [23],/* target receivers */
        [35],/* awward contexts */
        [3, 5], [23, 23],/* exchange ids for first target receiver */
        [200035, 200035],/* amounts for first target receiver */
        [0, 0]
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: bgN(17_000_000, 9) })).to.be.reverted;



    //attempt to awward more than balance
    var vv = [
      [
        [30000, 7, 0],
        [10035], [23],/* target receivers */
        [35],/* awward contexts */
        [3, 5], [23, 23],/* exchange ids for first target receiver */
        [200035, bgN(13, 12)],/* amounts for first target receiver */
        [0, 0]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //attempt awward without specifying end as first exchange id used
    var vv = [
      [
        [30000, 7, 0],
        [10035], [23],/* target receivers */
        [35],/* awward contexts */
        [5, 3], [23, 23],/* exchange ids for first target receiver */
        [200035, 5000],/* amounts for first target receiver */
        [0, 0]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    /* 
      -----------e-----------
      End/Spend balance: 200035,200035
      GasEst: 276,772
      Current Id: 1006


      -----------e-----------
      l1: 200035,200035
      l2: 146,504
      l3: 1006
    */
  });

  /* can auth mint tokens */
  xit("41. can run e/f178/f179/f180", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    // 31(token_exchange)
    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [ //make token exchange
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ],
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(17_000_000, 9) });
    console.log("l1: "/* Data */ + await h5.f85(1003));


    /* <9>auth_mint */
    var vv = [
      [/* authmint token */
        [30000, 9, 0],
        [1003], [23],/* exchanges */
        [1002], [23],/* receivers */
        [17_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];
    console.log("-----------e-----------");
    var ss = [[["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l2: "/* token balance */ + await h52./* balance_of */f140([1003], [1002], [0], 1));
    console.log("l3: "/* GasEst */ + nWC(v6/* gas_cons */));
    console.log("l4: "/* Current Id */ + await e5.f147(3/* get_id */));


    console.log("-----------e-----------");
    var ss = [[["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l5: "/* token balance */ + await h52./* balance_of */f140([1003], [1002], [0], 1));
    console.log("l6: "/* GasEst */ + nWC(v6/* gas_cons */));
    console.log("l7: "/* Current Id */ + await e5.f147(3/* get_id */));



    //attempting to authmint twice in one transaction
    var vv = [
      [/* authmint token */
        [30000, 9, 0],
        [1003, 1003], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [17_000_000, 17_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //attempting to authmint twice in one transaction
    var vv = [
      [/* authmint token */
        [30000, 9, 0],
        [1003], [23],/* exchanges */
        [1002], [23],/* receivers */
        [17_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [/* authmint token */
        [30000, 9, 0],
        [1003], [23],/* exchanges */
        [1002], [23],/* receivers */
        [17_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //attempting to authmint without being the token exchange authority
    var vv = [
      [/* authmint token */
        [30000, 9, 0],
        [1003], [23],/* exchanges */
        [1002], [23],/* receivers */
        [17_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    /* 
      -----------e-----------
      Data: 0,0,0,5,35000000000000,0,0,0,0,0,0,30000000000000000,0,1002,1002,35000000,0,0,0,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000000000000,1000000000000000000000000000000000000000000000000000000000000000000000000,0,0,0,0,1000000000000000000,3,5,1000,1000
      -----------e-----------
      token balance: 17000000
      GasEst: 566,009
      Current Id: 1004
      -----------e-----------
      token balance: 34000000
      GasEst: 497,609
      Current Id: 1005
      -----------e-----------
      token balance: 5000
      Current Id: 1007



      -----------e-----------
      l1: 0,0,0,5,35000000000000,0,0,0,0,0,0,30000000000000000,0,1002,1002,35000000,0,0,0,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000000000000,1000000000000000000000000000000000000000000000000000000000000000000000000,0,0,0,0,1000000000000000000,0,3,5,1000,1000,0,0
      -----------e-----------
      l2: 17000000
      l3: 462,389
      l4: 1004
      -----------e-----------
      l5: 34000000
      l6: 393,989
      l7: 1005
    */

  });

  /* can modify moderator accounts */
  xit("42. can run e/f178/f217/f218", async () => {
    const [booter, addr1, addr2, addr3] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    // 33(subscription_object)
    var vv = [
      [ /* create un-cancellable subscription */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1001, 1, 0, 100], [23, 23, 23, 23],
        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ],//1003
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];

    var vv2 = [
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1005, 1005], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 2_300_000, value: bgN(17_000_000, 9) });
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, [], { gasLimit: 2_300_000, value: bgN(17_000_000, 9) });
    console.log("l1: "/* un-cancellable subscription Data */ + await f5.f73(1003));
    console.log("l2: "/* un-cancellable target balance */ + await h52.f140([3, 5], [1001, 1001], [0, 0], 1));
    console.log("l3: "/* senders balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l4: "/* sender2 account */ + await e5.f167([], [addr2.address], 2));
    console.log("l5: "/* sender2 balance */ + await h52.f140([3, 5], [1005, 1005], [0, 0], 1));
    console.log("l6: "/* Current Id */ + await e5.f147(3/* get_id */));
    console.log("-----------e------------");


    //enable account as author
    var vv = [
      [
        [20000, 4, 0],
        [1003], [23],/* target objects */
        [2023], [23]/* target moderator account ids*/
      ]
    ];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l7: "/* num data */ + await e52.f207([[1003, 1, 2023]]));
    console.log("l8: "/* GasEst */ + nWC(gas_cons));
    console.log("-----------e------------");



    //attempting enable account not as moderator or author
    var vv = [
      [
        [20000, 4, 0],
        [1003], [23],/* target objects */
        [2025], [23]/* target moderator account ids*/
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //enable account as author
    var vv = [
      [
        [20000, 4, 0],
        [1003], [23],/* target objects */
        [1005], [23]/* target moderator account ids*/
      ]
    ];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l9: "/* num data */ + await e52.f207([[1003, 1, 1005]]));
    console.log("l10: "/* GasEst */ + nWC(gas_cons));
    console.log("-----------e------------");



    //enable another account as moderator
    var vv = [
      [
        [20000, 4, 0],
        [1003], [23],/* target objects */
        [1075], [23]/* target moderator account ids*/
      ]
    ];

    await e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l11: "/* num data */ + await e52.f207([[1003, 1, 1075]]));
    console.log("l12: "/* GasEst */ + nWC(gas_cons));
    console.log("-----------e------------");



    //disable another account as moderator
    var vv = [
      [
        [20000, 4, 0],
        [1003], [23],/* target objects */
        [1075], [23]/* target moderator account ids*/
      ]
    ];

    await e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l13: "/* num data */ + await e52.f207([[1003, 1, 1075]]));
    console.log("l14: "/* GasEst */ + nWC(gas_cons));
    console.log("-----------e------------");



    //disable account as author
    var vv = [
      [
        [20000, 4, 0],
        [1003], [23],/* target objects */
        [2023], [23]/* target moderator account ids*/
      ]
    ];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l15: "/* num data */ + await e52.f207([[1003, 1, 2023]]));
    console.log("l16: "/* GasEst */ + nWC(gas_cons));
    console.log("-----------e------------");



    //attempting disable account not as moderator or author
    var vv = [
      [
        [20000, 4, 0],
        [1003], [23],/* target objects */
        [1005], [23]/* target moderator account ids*/
      ]
    ];
    await expect(e5.connect(addr3).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    /*   
      un-cancellable subscription Data: ,1001,1,0,100,3,5,1000,1000
      un-cancellable target balance: 0,0
      senders balance: 17000000,35000000
      sender2 account: 1005
      sender2 balance: 16999999,35000000
      Current Id: 1005
      -----------e------------
      num data: 1
      GasEst: 204,091
      -----------e------------
      num data: 1
      GasEst: 204,091
      -----------e------------
      num data: 1
      GasEst: 206,280
      -----------e------------
      num data: 0
      GasEst: 189,172
      -----------e------------
      num data: 0
      GasEst: 186,983
      -----------e------------





      l1: ,1001,1,0,100,0,0,0,3,5,1000,1000,0,0
      l2: 0,0
      l3: 17000000,35000000
      l4: 1005
      l5: 16999999,35000000
      l6: 1005
      -----------e------------
      l7: 1
      l8: 96,341
      -----------e------------
      l9: 1
      l10: 96,341
      -----------e------------
      l11: 1
      l12: 93,990
      -----------e------------
      l13: 0
      l14: 76,882
      -----------e------------
      l15: 0
      l16: 79,233
      -----------e------------
    */

  });






  /* can set and modify interactible accounts */
  xit("43. can run e/f178/f217/f219/f188/f69", async () => {
    const [booter, addr1, addr2, addr3] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [ /* create un-cancellable subscription */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1002, 1, 0, 100], [23, 23, 23, 23],
        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ],//1003
      [ /* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 900_000_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1004
      [ /* create token exchange */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3], [23],
        [100], [23],
        [0], [23]
      ],//1005
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];

    var vv2 = [
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1007, 1007], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(17_000_000, 9) });
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, [], { gasLimit: 2_300_000, value: bgN(17_000_000, 9) });
    console.log("l1: "/* un-cancellable subscription Data */ + await f5.f73(1003));
    console.log("l2: "/* un-cancellable target balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l3: "/* senders balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l4: "/* sender2 account */ + await e5.f167([], [addr2.address], 2));
    console.log("l5: "/* sender2 balance */ + await h52.f140([3, 5], [1007, 1007], [0, 0], 1));
    console.log("l6: "/* num data */ + await e52.f207([[1003, 1, 2023]]));
    console.log("l7: "/* Current Id */ + await e5.f147(3/* get_id */));
    console.log("-----------e------------");


    // <2>pay_subscription
    var vv = [
      [
        [30000, 2, 0],
        [1003], [23],/* target subscription ids */
        [10]/* subscription buy amounts */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l8: "/* un-cancellable target balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l9: "/* un-cancellable LastTimePaid, TimePaidFor, UnclaimedTimePaid */ + await f5.f168([[1003, 1, 1007], [1003, 2, 1007], [1003, 3, 1007]]));
    console.log("-----------e-----------");


    //<5>enable/disable_interactible_checkers: enable interactible checkers as author
    var vv = [
      [
        [20000, 5, 0],
        [1003], [23]/* target objects */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l10: "/* interactible_enabled */ + await e52.f207([[1003, 0, 1]]));
    console.log("l11: "/* GasEst */ + nWC(gas_cons));
    console.log("-----------e------------");


    // attempt to pay subscription without authority
    var vv = [
      [
        [30000, 2, 0],
        [1003], [23],/* target subscription ids */
        [10]/* subscription buy amounts */
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    //set account to be interactible
    //<2>add_interactible account
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    var vv = [
      [
        [20000, 2, 0],
        [1003], [23],/* target objects */
        [1007], [23],/* target moderator account ids*/
        [tt+35_000]/* interacible expiry time limit */
      ]
    ];
    console.log("-----------e------------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l12: "/* interactible_account */ + await e52.f207([[1003, 2, 1007]]));
    console.log("l13: "/* GasEst */ + nWC(gas_cons));
    console.log("-----------e------------");


    // <2>pay_subscription again
    var vv = [
      [
        [30000, 2, 0],
        [1003], [23],/* target subscription ids */
        [10]/* subscription buy amounts */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l14: "/* un-cancellable target balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l15: "/* un-cancellable LastTimePaid, TimePaidFor, UnclaimedTimePaid */ + await f5.f168([[1003, 1, 1007], [1003, 2, 1007], [1003, 3, 1007]]));
    console.log("-----------e-----------");



    // attempt to set interactible without being moderator
    var vv = [
      [
        [20000, 2, 0],
        [1003], [23],/* target objects */
        [1007], [23],/* target moderator account ids*/
        [1749941427]/* interacible expiry time limit */
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //<5>enable/disable_interactible_checkers in contract and token objects
    var vv = [
      [
        [20000, 4, 0],
        [1004, 1005], [23, 23],/* target objects */
        [1002, 1002], [23, 23]/* target moderator account ids*/
      ],
      [
        [20000, 5, 0],
        [1004, 1005], [23, 23]/* target objects */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l16: "/* interactible_enabled */ + await e52.f207([[1004, 0, 1], [1005, 0, 1]]));
    console.log("-----------e------------");



    // attempt to buy token without authority
    var vv = [
      [/* buy token */
        [30000, 8, 0],
        [1005], [23],/* exchanges */
        [1002], [23],/* receivers */
        [100]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    // attempt to enter contract without authority
    var vv = [
      [
        [30000, 3, 0],
        [1004], [23],/* contract ids */
        [1749941427]/* expiry time (seconds) */
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //set account to be interactible
    //<2>add_interactible account
    var vv = [
      [
        [20000, 2, 0],
        [1004, 1005], [23, 23],/* target objects */
        [1007, 1007], [23, 23],/* target moderator account ids*/
        [tt+35_000, tt+35_000]/* interacible expiry time limit */
      ]
    ];
    console.log("-----------e------------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l17: "/* interactible_account */ + await e52.f207([[1004, 2, 1007], [1005, 2, 1007]]));
    console.log("-----------e------------");



    // attempt to buy token and enter contract
    var vv = [
      [/* buy token */
        [30000, 8, 0],
        [1005], [23],/* exchanges */
        [1007], [23],/* receivers */
        [100]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [
        [30000, 3, 0],
        [1004], [23],/* contract ids */
        [1783081300]/* expiry time (seconds) */
      ]
    ];
    await e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })
    console.log("l18: "/* addr2 token balance */ + await h52.f140([1005], [1007], [0, 0], 1));
    // console.log("l19: "/* EnteredContractData */ + await g52.f167([[1004, 2, 1007], [1004, 1, 1]]));
    console.log("l19: "/* account_entry_expiry_time */ + await g52.f266([1004], [[1004]], 3));

    /*
      un-cancellable subscription Data: ,1002,1,0,100,3,5,1000,1000
      un-cancellable target balance: 17000000,35000000
      senders balance: 17000000,35000000
      sender2 account: 1007
      sender2 balance: 16999999,35000000
      num data: 0
      Current Id: 1007
      -----------e------------
      -----------e-----------
      un-cancellable target balance: 17010000,35010000
      un-cancellable LastTimePaid, TimePaidFor, UnclaimedTimePaid: 1648829053,31800,0
      -----------e-----------
      interactible_enabled: 1
      GasEst: 353,855
      -----------e------------
      -----------e------------
      interactible_account: 1648841427
      GasEst: 216,684
      -----------e------------
      -----------e-----------
      un-cancellable target balance: 17020000,35020000
      un-cancellable LastTimePaid, TimePaidFor, UnclaimedTimePaid: 1648829053,63600,0
      -----------e-----------
      interactible_enabled: 1,1
      -----------e------------
      -----------e------------
      interactible_account: 1648841427,1648841427
      -----------e------------
      addr2 token balance: 100
      EnteredContractData: 1683081300,1





      l1: ,1002,1,0,100,0,0,0,3,5,1000,1000,0,0
      l2: 17000000,35000000
      l3: 17000000,35000000
      l4: 1007
      l5: 16999999,35000000
      l6: 0
      l7: 1007
      -----------e------------
      -----------e-----------
      l8: 17010000,35010000
      l9: 1676085371,31800,0
      -----------e-----------
      l10: 1
      l11: 93,143
      -----------e------------
      -----------e------------
      l12: 1676120373
      l13: 103,224
      -----------e------------
      -----------e-----------
      l14: 17020000,35020000
      l15: 1676085371,63600,0
      -----------e-----------
      l16: 1,1
      -----------e------------
      -----------e------------
      l17: 1676120373,1676120373
      -----------e------------
      l18: 100
      l19: 0
    */

  });

  /* can set metadata in object */
  xit("44. can run e/f178/f217/f220", async () => {
    const [booter, addr1, addr2, addr3] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [ /* create un-cancellable subscription */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1002, 1, 0, 100], [23, 23, 23, 23],
        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ],//1003 
      [ /* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 900_000_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1004
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];

    var vv2 = [
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1007, 1007], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    var ss = [[["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]]];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(17_000_000, 9) });
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, [], { gasLimit: 2_300_000, value: bgN(17_000_000, 9) });
    console.log("l1: "/* un-cancellable subscription Data */ + await f5.f73(1003));
    console.log("l2: "/* un-cancellable target balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l3: "/* senders balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l4: "/* sender2 account */ + await e5.f167([], [addr2.address], 2));
    console.log("l5: "/* sender2 account and balance */ + await e5.f167([], [addr2.address], 2) + "; " + await h52.f140([3, 5], [1007, 1007], [0, 0], 1));
    console.log("l6: "/* Current Id */ + await e5.f147(3/* get_id */));
    console.log("-----------e------------");

    // console.log("a");
    //enable addr2 account to be mod
    var vv = [
      [
        [20000, 4, 0],
        [1003], [23],/* target objects */
        [1006], [23]/* target moderator account ids*/
      ]
    ];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l7: "/* mod status */ + await e52.f207([[1003, 1, 1006]]));


    // console.log("b");
    //add metadata as author
    //<1>modify_metadata
    var vv = [
      [
        [20000, 1, 0],
        [1003], [23],/* target objects */
        [0], [23]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.emit(e52, "e5"/* Metadata */);

    // console.log("c");
    //add metadata as moderator
    var vv = [
      [
        [20000, 1, 0],
        [1003], [23],/* target objects */
        [0], [23]
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.emit(e52, "e5"/* Metadata */);


    // console.log("d");
    //bad target passed
    var vv = [
      [
        [20000, 1, 0],
        [1004/* bad! */], [23],/* target objects */
        [0], [23]
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    // console.log("e");
    //sender not author and moderator
    var vv = [
      [
        [20000, 1, 0],
        [1003], [23],/* target objects */
        [0], [23]
      ]
    ];
    await expect(e5.connect(addr3).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    /* 
      un-cancellable subscription Data: ,1002,1,0,100,3,5,1000,1000
      un-cancellable target balance: 17000000,35000000
      senders balance: 17000000,35000000
      sender2 account: 1006
      sender2 account and balance: 1006; 16999999,35000000
      Current Id: 1006
      -----------e------------
      mod status: 1
    */
  });

  /* can alias objects, add data and index objects */
  xit("45. can run e/f178/f217/f221/f222", async () => {
    const [booter, addr1, addr2, addr3] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 0, 0, 0/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 2, 2, 0, 2/* 12 */, 0, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [ /* create un-cancellable subscription */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1002, 1, 0, 100], [23, 23, 23, 23],
        [3, 5], [23, 23],
        [1000, 1000], [23, 23],
        [0, 0], [23, 23]
      ],//1003 
      [ /* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 900_000_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1004
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [ /* enter contract */
        [30000, 3, 0],
        [1004], [23],/* contract ids */
        [1783981300]/* expiry time (seconds) */
      ]
    ];

    var vv2 = [
      [/* buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1007, 1007], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    var ss = [[["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]]];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(17_000_000, 9) });
    await e5.connect(addr2).e(v5/* t_limits */, [], vv2, [], { gasLimit: 2_300_000, value: bgN(17_000_000, 9) });
    console.log("l1: "/* un-cancellable subscription Data */ + await f5.f73(1003));
    console.log("l2: "/* un-cancellable subscription target balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l3: "/* senders balance */ + await h52.f140([3, 5], [1002, 1002], [0, 0], 1));
    console.log("l4: "/* sender2 account */ + await e5.f167([], [addr2.address], 2));
    console.log("l5: "/* sender2 account and balance */ + await e5.f167([], [addr2.address], 2) + "; " + await h52.f140([3, 5], [1007, 1007], [0, 0], 1));
    console.log("l6: "/* Current Id */ + await e5.f147(3/* get_id */));
    console.log("-----------e------------");



    //add data as random user
    //<13>add_data
    var vv = [
      [
        [20000, 13, 0],
        [1003], [23],/* target objects */
        [53], /* contexts */
        [65] /* int_data */
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.emit(e52, "e4"/* Data */);



    //enable interactible checkers
    var vv = [
      [/* set self as mod */
        [20000, 4, 0],
        [1003], [23],/* target objects */
        [1002], [23]/* target moderator account ids*/
      ],
      [/* enable interactible checkers */
        [20000, 5, 0],
        [1003], [23]/* target objects */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l7: " + await e52.f207([[1003, 0, 1]]));




    //attempt to add data as random user with interactible enabled
    var vv = [
      [
        [20000, 13, 0],
        [1003], [23],/* target objects */
        [53], /* contexts */
        [65] /* int_data */
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //attempt to add data as author with interactible enabled
    var vv = [
      [
        [20000, 13, 0],
        [1003], [23],/* target objects */
        [53], /* contexts */
        [65] /* int_data */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.emit(e52, "e4"/* Data */);


    //set addr2 account to be interactible
    //<2>add_interactible account
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    var vv = [
      [
        [20000, 2, 0],
        [1003], [23],/* target objects */
        [1006], [23],/* target moderator account ids*/
        [tt+35_000]/* interacible expiry time limit */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l8: "/* interactible_account */ + await e52.f207([[1003, 2, 1006]]));



    //add data as interactible user
    //<13>add_data
    var vv = [
      [
        [20000, 13, 0],
        [1003], [23],/* target objects */
        [53], /* contexts */
        [65] /* int_data */
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.emit(e52, "e4"/* Data */);



    //set addr2 account to not be interactible
    //<2>add_interactible account
    var vv = [
      [
        [20000, 2, 0],
        [1003], [23],/* target objects */
        [1006], [23],/* target moderator account ids*/
        [0]/* interacible expiry time limit */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l9: "/* interactible_account */ + await e52.f207([[1003, 2, 1006]]));


    //attempt to add data as random user with interactible enabled
    var vv = [
      [
        [20000, 13, 0],
        [1003], [23],/* target objects */
        [53], /* contexts */
        [65] /* int_data */
      ]
    ];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //attempt to alias object as author
    //<10>alias_objects
    var vv = [
      [
        [20000, 10, 0],
        [1003], [23],/* target objects */
        [53], /* contexts */
        [65] /* int_data */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.emit(e52, "e3"/* AliasObject */);


    //attempt to alias object not as author
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    //attempt to index item as author
    //<12>record_entity_in_tag
    var vv = [
      [
        [20000, 12, 0],
        [1003], [23]/* target objects */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.emit(e52, "e2"/* IndexItem */);


    //attempt to index object not as author
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 })).to.be.reverted;

    /* 
      un-cancellable subscription Data: ,1002,1,0,100,3,5,1000,1000
      un-cancellable target balance: 17000000,35000000
      senders balance: 17000000,35000000
      sender2 account: 1006
      sender2 account and balance: 1006; 16999999,35000000
      Current Id: 1006
      -----------e------------
      a
      b
      -----------e------------
      interactible enabled: 1
      c
      d
      e
      -----------e------------
      interactible_account: 1649941427
      f
      g
      -----------e------------
      interactible_account: 0
      g
    */
  });





  /* depth authmint: can create and use end tokens */
  xit("46. can run e/f178/f185/f227", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(900, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    // 31(token_exchange)
    var vv = [
      [/* buy end/spend */
        [30000, 8, 0],
        [3], [23],/* exchanges */
        [1002], [23],/* receivers */
        [17_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(17_000_000, 9) });
    console.log("-----------e-----------");
    console.log("My End balance: "/* End balance */ + nWC(await h52./* balance_of */f140([3], [1002], [0], 1)));
    console.log("-----------e-----------");

    var target_exchanges = [];
    var target_exchange_types = [];
    var target_receivers = [];/* this and the target receiver types are specified but not used, */
    var target_receiver_types = [];/* the function that uses this cant be deployed because of size issues */
    var actions = [];
    var depths = [];
    var amounts = [];

    var exchanges = [];
    var accounts = [];

    var depth_amounts = 10; /* 100,000,000e1000 */
    var primary_power = 153;
    var depth_gap = 280;
    for (let j = 0; j < depth_amounts; j++) {
      var final_depth_gap = Math.floor(
        ((depth_amounts - j)/depth_amounts) * depth_gap
      );
      
      if(j>= depth_amounts - primary_power || j % final_depth_gap == 0){
        target_exchanges.push(0);
        target_exchange_types.push(35);

        target_receivers.push(0);
        target_receiver_types.push(53);

        actions.push(2);
        depths.push(j);
        amounts.push(bgN(1, 72));

        exchanges.push(1004);
        accounts.push(1002);
      }
      
    }

    // <16>depth_auth_mint: actions --->  2(depth_auth_mint), 1(swap_up), 0(swap_down)
    var vv = [
      [/* mint_token */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [1, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(1, 53), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, 1/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3], [23],
        [1], [23],
        [0], [23]
      ],//1004
      [/* buy token */
        [30000, 8, 0],
        [0], [35],/* exchanges */
        [1002], [23],/* receivers */
        [1_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      // [/* depth_swap */
      //   [30000,16,0],
      //   target_exchanges, 
      //   target_exchange_types,/* target exchange ids */

      //   target_receivers,
      //   target_receiver_types,

      //   actions,/* action */ 
      //   depths,/* depth */
      //   amounts/* amount */
      // ],
      [/* depth_swap */
        [30000,16,0],
        [0, 0], 
        [35, 35],/* target exchange ids */

        [0, 0],
        [53, 53],

        [2, 0],/* action */ 
        [1, 1],/* depth */
        [5, 0]/* amount */
      ],
      [/* modify_token_as_authority */
        [20000, 3, 0],
        [0], [35],/* targets */
        [1],/* target_array_pos */
        [9],/* target_array_items */
        [0], [23]/* new_items */
      ],
      [/* ✔️send tokens to another account */
        [30000, 1, 0],
        [0], [35],/* exchanges */
        [0], [23],/* receivers */
        [bgN(1, 23).toString().toLocaleString('fullwide', {useGrouping:false})],/* amounts */
        [0]/* depths */
      ],
    ];

    
    /* 
      estimated gas consumed: 1,886,272 for two depth values 
      estimated gas consumed: 2,031,645 for three depths (+ 145,373)
      estimated gas consumed: 2,177,244 for four depths (+ 145,599)
    */

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 80_000_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("My new End balance: "/* End balance */ + nWC(await h52./* balance_of */f140([3], [1002], [0], 1)));
    console.log("estimated gas consumed: "/* GasEst */+nWC(v6/* gas_cons */));
    // console.log("" + await h52./* balance_of */f140(exchanges, accounts, depths.reverse(), 1));
    console.log("" + await h52./* balance_of */f140([1004], [1002], [0], 1));

  }).timeout(10000000000);;

  /* can make a new account */
  xit("47. can run e/f169/f170/f225", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];


    // 29(account_obj_id)
    //create new account from address
    var vv = [
      [[10000, 0, 0, 25/* context */, 0/* 4 */, 0, 0, 0, 0, 29, 0]]
    ];
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    var aa = [[addr2.address]];
    await expect(e5.connect(addr1).e(v5/* t_limits */, aa, vv, [], { gasLimit: 530_000, value: 35 })).to.emit(e5, "e6"/* MakeAccount */);
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l1: "/* sender2 account */ + await e5.f167([], [addr2.address], 2));
    console.log("l2: "/* GasEst */ + nWC(gas_cons));
    console.log("-----------e-----------");

    // 29(account_obj_id)
    //recreate new account from address
    var vv = [
      [[10000, 0, 0, 25/* context */, 0/* 4 */, 0, 0, 0, 0, 29, 0]]
    ];
    var aa = [[addr2.address]];
    await e5.connect(addr1).e(v5/* t_limits */, aa, vv, [], { gasLimit: 530_000, value: 35 });
    var gas_cons = await e5./* get_gas_consumed */f5300g();
    console.log("l3: "/* sender2 account */ + await e5.f167([], [addr2.address], 2));
    console.log("l4: "/* GasEst */ + nWC(gas_cons));
    console.log("-----------e-----------");


    // 29(account_obj_id)
    //tx should be reverted if address already has an account
    var vv = [
      [[10000, 0, 0, 25/* context */, 0/* 4 */, 1, 0, 0, 0, 29, 0]]
    ];
    var aa = [[addr2.address]];
    await expect(e5.connect(addr1).e(v5/* t_limits */, aa, vv, [], { gasLimit: 530_000, value: 35 })).to.be.reverted;
    console.log("l5: "/* sender2 account */ + await e5.f167([], [addr2.address], 2));

    /* 
      sender2 account: 1003
      GasEst: 189,303
      -----------e-----------
      sender2 account: 1003
      GasEst: 92,517
      -----------e-----------
      sender2 account: 1003



      l1: 1003
      l2: 33,758
      -----------e-----------
      l3: 1003
      l4: 10,511
      -----------e-----------
      l5: 1003
    */
  });

  /* can run exchange transfers */
  xit("48. can run e/f179/f230/f184", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    // 31(token_exchange)
    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [/* create token */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 1, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3], [23],
        [100], [23],
        [0], [23]
      ],
      [/* mint end, spend then the token */
        [30000, 8, 0],
        [3, 0], [23, 35],/* exchanges */
        [0, 0], [53, 53],/* receivers */
        [35_000, 100]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: bgN(35_001, 9) });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));
    console.log("add1(end, tokenX):"/* Data */ + await h52./* balance_of */f140([3, 1003], [1002, 1002], [0, 0], 1));
    console.log("tokenX(end): "/* Data */ + await h52./* balance_of */f140([3], [1003], [0, 0], 1));




    // <17>exchange_transfer 1 end
    var vv = [
      [
        [30000, 17, 0],
        [1003], [23],/* exchange ids */
        [0], [53],/* receivers */
        [1], [0],
        [3], [23],/* token targets */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));
    console.log("add1(end, tokenX):"/* Data */ + await h52./* balance_of */f140([3, 1003], [1002, 1002], [0, 0], 1));
    console.log("tokenX(end): "/* Data */ + await h52./* balance_of */f140([3], [1003], [0, 0], 1));




    // <17>exchange_transfer 10 end
    var vv = [
      [
        [30000, 17, 0],
        [1003], [23],/* exchange ids */
        [0], [53],/* receivers */
        [10], [0],
        [3], [23],/* token targets */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));
    console.log("add1(end, tokenX):"/* Data */ + await h52./* balance_of */f140([3, 1003], [1002, 1002], [0, 0], 1));
    console.log("tokenX(end): "/* Data */ + await h52./* balance_of */f140([3], [1003], [0, 0], 1));




    // <17>exchange_transfer 100 end
    var vv = [
      [
        [30000, 17, 0],
        [1003], [23],/* exchange ids */
        [0], [53],/* receivers */
        [100], [0],
        [3], [23],/* token targets */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));
    console.log("add1(end, tokenX):"/* Data */ + await h52./* balance_of */f140([3, 1003], [1002, 1002], [0, 0], 1));
    console.log("tokenX(end): "/* Data */ + await h52./* balance_of */f140([3], [1003], [0, 0], 1));



    // invalid exchange_transfer 100,000 end
    var vv = [
      [
        [30000, 17, 0],
        [1003], [23],/* exchange ids */
        [0], [53],/* receivers */
        [100_000], [0],/* amounts */
        [3], [23],/* token targets */
      ]
    ];

    console.log("-----------e-----------");
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    // exchange_transfer 100 end, sender not exchange's authority
    var vv = [
      [
        [30000, 17, 0],
        [1003], [23],/* exchange ids */
        [0], [53],/* receivers */
        [10], [0],
        [3], [23],/* token targets */
      ]
    ];

    console.log("-----------e-----------");
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    /* 
    
      -----------e-----------
      l2: 1,547,286
      add1(end, tokenX):25000,100
      tokenX(end): 10000
      -----------e-----------
      l2: 124,040
      add1(end, tokenX):25001,100
      tokenX(end): 9999
      -----------e-----------
      l2: 124,040
      add1(end, tokenX):25011,100
      tokenX(end): 9989
      -----------e-----------
      l2: 124,040
      add1(end, tokenX):25111,100
      tokenX(end): 9889
      -----------e-----------
      -----------e-----------

    */

  });






  /* can run exchange transfer via consensus */
  xit("48. can run e/f178/f200/f201/f202", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    // set up proposal
    // 23-real, 35-stack, 53-sender_account
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    var vv = [
      [/* create token */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 1, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 2, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 35, 35, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3], [23],
        [100], [23],
        [0], [23]
      ],//1003
      [/* mint end, spend then the token */
        [30000, 8, 0],
        [3, 0], [23, 35],/* exchanges */
        [0, 0], [53, 53],/* receivers */
        [35_000_000, 100]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [ /* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 900_000_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23, 23],
        [3_000_000], [23, 23],
        [0, 0], [23, 23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1004
      [/* enter contract */
        [30000, 3, 0],
        [2], [35],/* contract ids */
        [bgN(1, 69)]/* expiry time (seconds) */
      ],
      [/* make proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [6, tt+35_000, 0/* 2 */, bgN(2, 16), 0, 2, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],
        [0], [35],/* 4 exchanges */
        [0], [53],/* receivers */
        [10], [23],/* amounts */
        [0], [23],/* amount depths */
        [3], [23],/* token targets */
        [0], [23],
        [0], [23]
      ],//1005
      [/* vote proposal */
        [30000, 4, 0],
        [4], [35],/* proposal ids */
        [1],/* votes */
        [3], [23],/* target bounty exchanges */
        [0]
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_900_000, value: bgN(35_000_001, 9) });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));
    console.log("add1(end, tokenX):"/* Data */ + await h52./* balance_of */f140([3, 1003], [1002, 1002], [0, 0], 1));
    console.log("tokenX(end): "/* Data */ + await h52./* balance_of */f140([3], [1003], [0, 0], 1));

    var v6/* time_inc */ = 1000_000;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");


    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1005], [23]/* targets */
      ]
    ];
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    console.log("add1(end, tokenX):"/* Data */ + await h52./* balance_of */f140([3, 1003], [1002, 1002], [0, 0], 1));
    console.log("tokenX(end): "/* Data */ + await h52./* balance_of */f140([3], [1003], [0, 0], 1));
    
    /* 

      -----------e-----------
      l2: 3,498,900
      add1(end, tokenX):31000000,100
      tokenX(end): 10000
      t: 1684769097
      t: 1685769100
      -----------e-----------
      add1(end, tokenX):31000010,100
      tokenX(end): 9990

    */
  });

  /* can run buy/sell tokens via consensus */
  xit("49. can run e/f178/f200/f201/f202", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 0, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));

    // set up proposal
    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [/* create token */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 2, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 35, 35, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3], [23],
        [100], [23],
        [0], [23]
      ],//1003
      [/* mint end, spend then the token */
        [30000, 8, 0],
        [3, 0], [23, 35],/* exchanges */
        [0, 0], [53, 53],/* receivers */
        [35_000_000, 100]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, [],/* upper_bounds */
        [0, 0]
      ],
      [/* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, bgN(1, 70)/* 6 */, 0, 1, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [3_000_000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1004
      [/* enter contract */
        [30000, 3, 0],
        [2], [35],/* contract ids */
        [bgN(1, 69)]/* expiry time (seconds) */
      ],
      [/* make proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [5, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 2, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],
        [0], [35],/* 4 exchanges */
        [10], [23],/* amounts */
        [2], [35],/* receivers */
        [0], [23],/* actions */
        [0], [23],/* lower-bounds */
        [0], [23],/* upper-bounts */
        [0], [23]/* bounty_depths */
      ],//1005
      [/* make proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [5, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 2, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],
        [0], [35],/* 4 exchanges */
        [10], [23],/* amounts */
        [2], [35],/* receivers */
        [0], [23],/* actions */
        [0], [23],/* lower-bounds */
        [0], [23],/* upper-bounts */
        [0], [23]/* bounty_depths */
      ],//1006
      [/* vote proposal */
        [30000, 4, 0],
        [4, 5], [35, 35],/* proposal ids */
        [1, 1],/* votes */
        [3], [23], [0],/* target bounty exchanges */
        [3], [23], [0],/* target bounty exchanges */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 7_900_000, value: bgN(35_000_001, 9) });
    var v6/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l2: "/* GasEst */ + nWC(v6/* gas_cons */));
    console.log("contract(end, tokenX):"/* Data */ + await h52./* balance_of */f140([3, 1003], [1004, 1004], [0, 0], 1));

    var v6/* time_inc */ = 1000_000;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");


    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1005], [23]/* targets */
      ]
    ];
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    console.log("contract(end, tokenX):"/* Data */ + await h52./* balance_of */f140([3, 1003], [1004, 1004], [0, 0], 1));


    //enable interactible checkers as author
    var vv = [
      [
        [20000, 5, 0],
        [1003], [23]/* target objects */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l3: "/* interactible_enabled */ + await e52.f254([1003], 0));



    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1006], [23]/* targets */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;
    /* exclusivity bug! try fixing it */



    //set contract account to be interactible
    //<2>add_interactible account
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    var vv = [
      [
        [20000, 2, 0],
        [1003], [23],/* target objects */
        [1004], [23],/* target account ids */
        [tt+35_000]/* interacible expiry time limit */
      ]
    ];
    console.log("-----------e------------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });


    /* attempt to submit consensus buy token action again */
    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1006], [23]/* targets */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    console.log("contract(end, tokenX):"/* Data */ + await h52./* balance_of */f140([3, 1003], [1004, 1004], [0, 0], 1));

    /* 

      -----------e-----------
      l2: 4,303,592
      contract(end, tokenX):3000000,0
      t: 1684768793
      t: 1685768795
      -----------e-----------
      contract(end, tokenX):2999000,10
      l3: true
      -----------e------------
      contract(end, tokenX):2998000,20

    */
  });

  /* can run depth authmint via consensus */
  xit("50. can run e/f178/f200/f201/f202", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));


    // set up proposal
    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [/* create token */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [1, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 2, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 35, 35, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3], [23],
        [100], [23],
        [0], [23]
      ],//1003
      [/* mint end, spend then the token */
        [30000, 8, 0],
        [3, 0], [23, 35],/* exchanges */
        [0, 0], [53, 53],/* receivers */
        [35_000_000, 100]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [/* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, bgN(1, 70)/* 6 */, 0, 1, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [3_000_000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1004
      [/* enter contract */
        [30000, 3, 0],
        [2], [35],/* contract ids */
        [bgN(1, 69)]/* expiry time (seconds) */
      ],
      [/* make proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [7, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 2, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],
        [0, 0], [35, 35],/* 4 exchanges */
        [2/* authmint */, 0/* swap_down */], [23, 23],/* action */
        [1, 1], [23, 23],/* depth */
        [135, 0], [23, 23],/* amount */
        [2, 2], [35, 35],/* receiver */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1005
      [/* vote proposal */
        [30000, 4, 0],
        [4], [35],/* proposal ids */
        [1],/* votes */
        [3], [23],/* target bounty exchanges */
        [0]
      ]
    ];


    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_900_000, value: bgN(35_000_000, 9) });
    var gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l2: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("contract(end, tokenX):"/* Data */ + await h52./* balance_of */f140([1003, 1003], [1004, 1004], [0, 1], 1));

    var v6/* time_inc */ = 1000_000;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");


    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1005], [23]/* targets */
      ]
    ];
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l3: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("contract(tokenX):"/* Data */ + await h52./* balance_of */f140([1003, 1003], [1004, 1004], [1, 0], 1));

    
    /* 

      -----------e-----------
      l2: 4,365,803
      contract(end, tokenX):0,0
      t: 1673536738
      t: 1674536740
      -----------e-----------
      l3: 698,185
      contract(tokenX):134,1000000000000000000000000000000000000000000000000000000000000000000000000
    
    */
  });






  /* can modify sent proposals */
  xit("51. can run e/f178/f238", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    var current_time = parseInt(await e5./*get_time*/f147(2/* get_time */));


    // set up proposal
    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [/* create token */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 2, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 35, 35, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3], [23],
        [100], [23],
        [0], [23]
      ],//1003
      [/* mint end, spend then the token */
        [30000, 8, 0],
        [3, 0], [23, 35],/* exchanges */
        [0, 0], [53, 53],/* receivers */
        [35_000_000, 100]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [/* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, bgN(1, 70)/* 6 */, 0, 1, 0, 300_000, 0, 0, 0, 0, bgN(1, 63)/* 15 */, 0, 0, 0, 0, 0, 0/* 21 */, 0, 0, 0, 0, 0, 1000/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [3_000_000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1004
      [/* enter contract */
        [30000, 3, 0],
        [2], [35],/* contract ids */
        [bgN(1, 69)]/* expiry time (seconds) */
      ],
      [/* make proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [7, (current_time+100_000), 0/* 2 */, bgN(2, 16), 0, 2, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],
        [0, 0], [35, 35],/* 4 exchanges */
        [2/* authmint */, 0/* swap_down */], [23, 23],/* action */
        [1, 1], [23, 23],/* depth */
        [135, 0], [23, 23],/* amount */
        [2, 2], [35, 35],/* receiver */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1005
      [/* vote proposal */
        [30000, 4, 0],
        [4], [35],/* proposal ids */
        [1],/* votes */
        [3], [23],/* target bounty exchanges */
        [0]
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_900_000, value: bgN(35_000_000, 9) });
    var gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l2: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("proposal data: "+ await g5./* read_id */f77(1005, false));




    //change the amount '135' to '136
    var vv = [
      [/* modify proposal */
        [20000, 14, 0],
        [1005], [23],/* targets */
        [7],/* target_array_pos */
        [0],/* target_array_items */
        [136], [23]/* new_items */
      ]
    ];
    console.log("-----------e-----------");
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("mod: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("proposal data: "+ await g5./* read_id */f77(1005, false));




    //change the amount '136' to '13709
    var vv = [
      [/* modify proposal */
        [20000, 14, 0],
        [1005], [23],/* targets */
        [7],/* target_array_pos */
        [0],/* target_array_items */
        [13709], [23]/* new_items */
      ]
    ];
    console.log("-----------e-----------");
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l3: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("proposal data: "+ await g5./* read_id */f77(1005, false));
    


    //attempting to modify proposal without being its creator
    console.log("-----------e-----------");
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    var v6/* time_inc */ = 99_500;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");


    //attempting to modify proposal right before expiry
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    var v6/* time_inc */ = 99_500;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");


    //attempting to modify proposal after expiry
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    /* 
    
      -----------e-----------
      l2: 4,454,901
      proposal data: 32,7,1673638280,0,20000000000000000,0,1004,0,0,0,0,0,0,0,0,0,0,,,1003,1003,2,0,1,1,135,0,1004,1004,0,0
      -----------e-----------
      l3: 97,651
      proposal data: 32,7,1673638280,0,20000000000000000,0,1004,0,0,0,0,0,0,0,0,0,0,,,1003,1003,2,0,1,1,136,0,1004,1004,0,0
      -----------e-----------
      l3: 97,651
      proposal data: 32,7,1673638280,0,20000000000000000,0,1004,0,0,0,0,0,0,0,0,0,0,,,1003,1003,2,0,1,1,13709,0,1004,1004,0,0
      -----------e-----------
      t: 1673538297
      t: 1673637797
      -----------e-----------
      t: 1673637928
      t: 1673737428
      -----------e-----------

    */

  });

  /* can modify my contracts */
  xit("52. can run e/f178/f238", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    var current_time = parseInt(await e5./*get_time*/f147(2/* get_time */));


    // set up contracts
    // 23-real, 35-stack, 53-sender_account
    var vv = [
      [/* buy end */
        [30000, 8, 0],
        [3], [23],/* exchanges */
        [0], [53],/* receivers */
        [35_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [/* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, bgN(1, 70)/* 6 */, 0, 1, 0, 300_000, 0, 0, 0, 0, bgN(1, 63)/* 15 */, 0, 0, 0, 0, 0, 0/* 21 */, 0, 0, 0, 0, 0, 1000/* 27 */, 1, 0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [3_000_000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1003
      [/* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, bgN(1, 70)/* 6 */, 0, 1, 0, 300_000, 0, 0, 0, 0, bgN(1, 63)/* 15 */, 0, 0, 0, 0, 0, 0/* 21 */, 0, 0, 0, 0, 0, 1000/* 27 */, 0, 0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [3_000_000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1004
      [/* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, bgN(1, 70)/* 6 */, 0, 1, 0, 300_000, 0, 0, 0, 0, bgN(1, 63)/* 15 */, 0, 0, 0, 0, 0, 0/* 21 */, 0, 0, 0, 0, 0, 1000/* 27 */, 1, 0, 0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [3_000_000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1005
      [/* set the moderators of the contract */
        [20000, 4, 0],
        [1, 2], [35, 35],/* target objects */
        [0, 0], [53, 53]/* target moderator account ids*/
      ],
      [/* enter contract */
        [30000, 3, 0],
        [1, 2, 3], [35, 35, 35],/* contract ids */
        [bgN(1, 69), bgN(1, 69), bgN(1, 69)]/* expiry time (seconds) */
      ],
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_900_000, value: bgN(35_000_000, 9) });
    var gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l2: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("contract data: "+ await g5./* read_id */f77(1003, false));
    console.log("l3: "/* num data */ + await e52.f207([[1003, 1, 1002]]));


    //change the <2>max_extend_enter_contract_limit from '3600' to '3602'
    var vv = [
      [/* modify contract */
        [20000, 15, 0],
        [1003], [23],/* targets */
        [1],/* target_array_pos */
        [2],/* target_array_items */
        [3602], [23]/* new_items */
      ]
    ];
    console.log("-----------e-----------");
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("mod: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("contract data: "+ await g5./* read_id */f77(1003, false));


    //add entry fee of 3000 Spend
    var vv = [
      [/* modify contract */
        [20000, 15, 0],
        [1003, 1003], [23, 23],/* targets */
        [2, 3],/* target_array_pos */
        [1, 1],/* target_array_items */
        [5, 3000], [23, 23]/* new_items */
      ]
    ];
    console.log("-----------e-----------");
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("mod: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("contract data: "+ await g5./* read_id */f77(1003, false));



    //attempting to modify contract that cannot be modified as a moderator
    var vv = [
      [/* modify contract */
        [20000, 15, 0],
        [1004], [23],/* targets */
        [1],/* target_array_pos */
        [2],/* target_array_items */
        [3602], [23]/* new_items */
      ]
    ];
    console.log("-----------e-----------");
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    //attempting to modify contract without being an author or moderator
    var vv = [
      [/* modify contract */
        [20000, 15, 0],
        [1005], [23],/* targets */
        [1],/* target_array_pos */
        [2],/* target_array_items */
        [3602], [23]/* new_items */
      ]
    ];
    console.log("-----------e-----------");
    console.log("attempting to mofify contract without being moderator")
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    //attempting to modify main contract
    var vv = [
      [/* modify contract */
        [20000, 15, 0],
        [2], [23],/* targets */
        [1],/* target_array_pos */
        [2],/* target_array_items */
        [3602], [23]/* new_items */
      ]
    ];
    console.log("-----------e-----------");
    console.log("attempting to modify main contract")
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //attempting to modify object thats not a contract
    var vv = [
      [/* modify contract */
        [20000, 15, 0],
        [24], [23],/* targets */
        [1],/* target_array_pos */
        [2],/* target_array_items */
        [3602], [23]/* new_items */
      ]
    ];
    console.log("-----------e-----------");
    console.log("attempting to modify object thats not a contract")
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    /* 
    
      -----------e-----------
      l2: 4,376,299
      contract data: 30,0,10000000000000000,3600,0,900000,30000,10000000000000000000000000000000000000000000000000000000000000000000000,0,1,0,300000,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000,0,0,0,0,0,0,0,0,0,0,0,1000,1,0,3,3000000,0,,,,,
      l3: 1
      -----------e-----------
      mod: 189,216
      contract data: 30,0,10000000000000000,3602,0,900000,30000,10000000000000000000000000000000000000000000000000000000000000000000000,0,1,0,300000,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000,0,0,0,0,0,0,0,0,0,0,0,1000,1,0,3,3000000,0,,,,,
      -----------e-----------
      mod: 284,985
      contract data: 30,0,10000000000000000,3602,0,900000,30000,10000000000000000000000000000000000000000000000000000000000000000000000,0,1,0,300000,0,0,0,0,1000000000000000000000000000000000000000000000000000000000000000,0,0,0,0,0,0,0,0,0,0,0,1000,1,0,3,5,3000000,3000,0,0,,,,,
      -----------e-----------
      -----------e-----------
      -----------e-----------
      -----------e-----------
    
    */
    
  });

  /* can revoke author privelages and block accounts */
  xit("53. can run e/f178/f217/f276/f219", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 65000, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    var current_time = parseInt(await e5./*get_time*/f147(2/* get_time */));
    


    // 33(subscription_object)
    var vv = [
      [ /* create un-cancellable subscription */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1001, 1, 0, 100], [23, 23, 23, 23],
        [3], [23],
        [1000], [23],
        [0], [23]
      ],//1003
      [/* mint end, spend then the token */
        [30000, 8, 0],
        [3], [23],/* exchanges */
        [0], [53],/* receivers */
        [35_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [[10000, 0, 0, 25/* context */, 0/* 4 */, 0, 0, 0, 0, 29, 0]]
    ];
    var aa = [[], [addr2.address]];
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];

    await e5.connect(addr1).e(v5/* t_limits */, aa, vv, [], { gasLimit: 2_300_000, value: bgN(35_000_000, 9) });
    console.log("l1: "/* un-cancellable subscription Data */ + await f5.f73(1003));
    console.log("l2: "/* Current Id */ + await e5.f147(3/* get_id */));
    console.log("l3: "/* get_auth_privelages_setting */ + await e52.f254([1003], 1));
    console.log("l4: "/* sender2 account */ + await e5.f167([], [addr2.address], 2));
    console.log("-----------e------------");


    //enable account moderator as author
    var vv = [
      [
        [20000, 4, 0],
        [1003], [23],/* target objects */
        [1004], [23]/* target moderator account ids */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l4: "/* get_moderator_settings */ + await e52.f255([1003], [[1004]]));
    console.log("-----------e------------");


    //revoke author privelages
    var vv = [
      [
        [20000, 16, 0],
        [1003], [23],/* target objects */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l5: "/* get_auth_privelages_setting */ + await e52.f254([1003], 1));



    //attempt to revoke author privelages again
    var vv = [
      [
        [20000, 16, 0],
        [1003], [23],/* target objects */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    //attempt to disable account moderator as author after auth privelages disabled
    var vv = [
      [
        [20000, 4, 0],
        [1003], [23],/* target objects */
        [1004], [23]/* target moderator account ids */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;



    // <2>pay_subscription
    var vv = [
      [
        [30000, 2, 0],
        [1003], [23],/* target subscription ids */
        [5]/* subscription buy amounts */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("available time: "/* time */ + await f5.f229([1003], [[1002]]));



    //attempt to block account as author after auth privelages disabled
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    var vv = [
      [
        [20000, 17, 0],
        [1003], [23],/* target objects */
        [1002], [23],/* target moderator account ids */
        [tt+35_000]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;
    console.log("l6: "/* blocked_account_time_limits */ + await e52.f256([1003], [[1002]], 1, 3));


    //attempt to block account as moderator
    var vv = [
      [
        [20000, 17, 0],
        [1003], [23],/* target objects */
        [1002], [23],/* target moderator account ids */
        [tt+35_000]
      ]
    ];
    await e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l7: "/* blocked_account_time_limits */ + await e52.f256([1003], [[1002]], 1, 3));


    // attempt to pay subscription after being blocked by moderators
    var vv = [
      [
        [30000, 2, 0],
        [1003], [23],/* target subscription ids */
        [5]/* subscription buy amounts */
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    var v7/* time_inc */ = 500_000;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v7/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);



    // pay subscription after the bloked time period has passed
    var vv = [
      [
        [30000, 2, 0],
        [1003], [23],/* target subscription ids */
        [5]/* subscription buy amounts */
      ]
    ];
    console.log("available time: "/* time */ + await f5.f229([1003], [[1002]]));
    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("available time: "/* time */ + await f5.f229([1003], [[1002]]));


    /* 

      l1: ,1001,1,0,100,0,0,0,3,1000,0
      l2: 22
      l3: false
      l4: 1004
      -----------e------------
      l4: true
      -----------e------------
      l5: true
      -----------e-----------
      available time: 15900
      l6: 0
      l7: 34998
      t: 1684768354
      t: 1685268354
      available time: 0
      -----------e-----------
      available time: 15900

    */
  });







  /* can perform moderator actions via consensus */
  xit("54. can run e/f178/f200/f201/f202", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 0, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];

    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));



    // set up proposals
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    var vv = [
      [/* create token */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [1, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 2, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 35, 35, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3], [23],
        [100], [23],
        [0], [23]
      ],//1003
      [/* mint end, spend then the token */
        [30000, 8, 0],
        [3, 0], [23, 35],/* exchanges */
        [0, 0], [53, 53],/* receivers */
        [35_000_000, 100]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [/* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, bgN(1, 70)/* 6 */, 0, 1, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [3_000_000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1004

      [/* enter contract */
        [30000, 3, 0],
        [2], [35],/* contract ids */
        [bgN(1, 69)]/* expiry time (seconds) */
      ],

      [/* make modify_moderators proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [16, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 2, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],

        [0], [35],/* targets */
        [1001], [23],/* new_moderators */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1005

      [/* make enable_disable_interactible_checkers proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [17, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 2, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],

        [0], [35],/* targets */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1006

      [/* make add_interactible_account proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [18, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 2, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],

        [0], [35],/* targets */
        [1009], [23],/* new_interactible_account */
        [10_000_000], [72],/* new_interactible_time_limit */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1007

      [/* make revoke_author_privelages proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [19, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 2, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],

        [0], [35],/* targets */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1008

      [/* make block_accounts proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [20, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 2, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],

        [0], [35],/* targets */
        [109928], [23],/* target_accounts */
        [10_000_000], [72],/* time_limits */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1009
      
      [/* vote proposal */
        [30000, 4, 0],
        [4, 5, 6, 7, 8], [35, 35, 35, 35, 35],/* proposal ids */
        [1, 1, 1, 1, 1],/* votes */
        [3], [23], [0],/* target bounty exchanges */
        [3], [23], [0],/* target bounty exchanges */
        [3], [23], [0],/* target bounty exchanges */
        [3], [23], [0],/* target bounty exchanges */
        [3], [23], [0],/* target bounty exchanges */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 9_900_000, value: bgN(35_000_000, 9) });
    var gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l2: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("contract(end):"/* Data */ + await h52./* balance_of */f140([3], [1004], [0], 1));



    var v6/* time_inc */ = 1_000_000;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");

    

    //attempt to submit modify_moderators propsal for toke exchange object without being moderator
    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1005], [23]/* targets */
      ]
    ];
    console.log("l3: "/* get_moderator_settings */ + await e52.f255([1003], [[1002, 1004, 1001]]));
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;


    //enable account as author
    var vv = [
      [
        [20000, 4, 0],
        [1003], [23],/* target objects */
        [1004], [23]/* target moderator account ids*/
      ]
    ];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 });
    console.log("l4: "/* get_moderator_settings */ + await e52.f255([1003], [[1002, 1004, 1001]]));




    //submit modify_moderators proposal
    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1005], [23]/* targets */
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l5: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("l6: "/* get_moderator_settings */ + await e52.f255([1003], [[1002, 1004, 1001]]));
    console.log("-----------e-----------");




    //submit enable_disable_interactible_checkers proposal
    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1006], [23]/* targets */
      ]
    ];
    console.log("l7: "/* get_interactible_checker_settings */ + await e52.f254([1003], 0));
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l8: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("l9: "/* get_interactible_checker_settings */ + await e52.f254([1003], 0));
    console.log("-----------e-----------");



    //submit add_interactible_account proposal
    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1007], [23]/* targets */
      ]
    ];
    console.log("l10: "/* get_interactible_time_limits */ + await e52.f256([1003], [[1009]], 1, 2));
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l11: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("l12: "/* get_interactible_time_limits */ + await e52.f256([1003], [[1009]], 1, 2));
    console.log("-----------e-----------");




    //submit revoke_author_privelages proposal
    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1008], [23]/* targets */
      ]
    ];
    console.log("l13: "/* get_auth_privelages_setting */ + await e52.f254([1003], 1));
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l14: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("l15: "/* get_auth_privelages_setting */ + await e52.f254([1003], 1));
    console.log("-----------e-----------");



    //submit block_accounts proposal
    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1009], [23]/* targets */
      ]
    ];
    console.log("l16: "/* blocked_account_time_limits */ + await e52.f256([1003], [[109928]], 1, 3));
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l17: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("l18: "/* blocked_account_time_limits */ + await e52.f256([1003], [[109928]], 1, 3));


    /* 
    
      -----------e-----------
      l2: 6,632,552
      contract(end):3000000
      t: 1676270334
      t: 1677270337
      -----------e-----------
      l3: true,false,false
      l4: true,true,false
      l5: 462,225
      l6: true,true,true
      -----------e-----------
      l7: false
      l8: 464,782
      l9: true
      -----------e-----------
      l10: 0
      l11: 468,555
      l12: 8999992
      -----------e-----------
      l13: false
      l14: 460,735
      l15: true
      -----------e-----------
      l16: 0
      l17: 469,650
      l18: 8999990
    
    */
  });

  /* can perform subscription actions via consensus */
  xit("55. can run e/f178/f200/f201/f202", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 0, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];
    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    
    // set up proposals
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    var vv = [
      [ /* create un-cancellable subscription */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [3, 1, 0, 100, 0, 0, 2], [35, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [100], [23],
        [0], [23]
      ],//1003
      [ /* create cancellable subscription */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [3, 1, 1, 100, 0, 0, 3], [35, 23, 23, 23, 23, 23, 35],
        [3], [23],
        [100], [23],
        [0], [23]
      ],//1004
      [ /* mint end, spend then the token */
        [30000, 8, 0],
        [3], [23],/* exchanges */
        [0], [53],/* receivers */
        [35_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [ /* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, bgN(1, 70)/* 6 */, 0, 1, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [3_000_000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1005
      [ /* enter contract */
        [30000, 3, 0],
        [3], [35],/* contract ids */
        [bgN(1, 69)]/* expiry time (seconds) */
      ],

      [/* make pay_subscription proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [9, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 3, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],

        [0, 1], [35, 35],/* targets */
        [100, 100], [23, 23],/* amounts */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1006

      [/* make cancel_subscription proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [10, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 3, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],

        [1], [35],/* targets */
        [10], [23],/* amounts */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1007

      [/* make collect_subscriptions proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [8, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 3, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],

        [1], [35],/* targets */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1008

      [/* vote proposal */
        [30000, 4, 0],
        [5, 6, 7], [35, 35, 35],/* proposal ids */
        [1, 1, 1],/* votes */
        [3], [23], [0],/* target bounty exchanges */
        [3], [23], [0],/* target bounty exchanges */
        [3], [23], [0],/* target bounty exchanges */
      ]
    ];

    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 9_900_000, value: bgN(35_000_000, 9) });
    var gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l2: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("contract(end):"/* Data */ + await h52./* balance_of */f140([3], [1005], [0], 1));
    console.log("-----------e-----------");
    console.log("l3: "/* ProposalData */ + await g5./* read_id */f77(1006, false));
    console.log("-----------e-----------");




    var v6/* time_inc */ = 1_000_000;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");



    // var v1e/* target_nums */ = [
    //   [[0], [9, 0, 0, 0, 0, 1005/* 5 */, 0, 0, 0, 0], [0], [0],  [1003], [5]/* 5 */, [], [], []]
    // ];
    // var v3e/* consensus_type_data */ = [0,0,0,0,0,0,0,0, 0,1,0, 0,0,0,0,0,0,0,0,0,0];
    // var v4e/* payer_accounts */ = [];
    // await f5.f263t(v1e/* target_nums */, v3e/* consensus_type_data */, v4e/* payer_accounts */);
    // console.log("l5: "/* get_subscription_time_value */ + await f5.f229([1003], [[1005]]));
    // console.log(await f5.f2632t());



    //submit pay_subscription proposal
    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1006], [23]/* targets */
      ]
    ];
    console.log("l3: "/* get_subscription_time_value */ + await f5.f229([1003], [[1005]]));
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l4: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("l5: "/* get_subscription_time_value */ + await f5.f229([1003, 1004], [[1005], [1005]]));
    console.log("-----------e-----------");

    //submit cancel_subscription proposal
    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1007], [23]/* targets */
      ]
    ];

    console.log("l6: "/* get_subscription_time_value */ + await f5.f229([1004], [[1005]]));
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l7: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("l8: "/* get_subscription_time_value */ + await f5.f229([1004], [[1005]]));
    console.log("-----------e-----------");



    var v6/* time_inc */ = 1_000_000;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");


    //submit collect_subscription proposal
    var vv = [
      [/* submit consensus */
        [30000, 5, 3, 3, 0, 0],
        [1008], [23],/* targets */
        [1005]
      ]
    ];
    console.log("contract(end):"/* Data */ + await h52./* balance_of */f140([3], [1005], [0], 1));
    console.log("cancellable_subscription(end):"/* Data */ + await h52./* balance_of */f140([3], [1004], [0], 1));
    console.log("l9: "/* get_subscription_time_value */ + await f5.f229([1004], [[1005]]));
    console.log("l10: "/* get_subscription_collectible_time_value */ + await f5.f235([1004], [[1005]]));
    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l11: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("contract(end):"/* Data */ + await h52./* balance_of */f140([3], [1005], [0], 1));
    console.log("cancellable_subscription(end):"/* Data */ + await h52./* balance_of */f140([3], [1004], [0], 1));
    console.log("l12: "/* get_subscription_time_value */ + await f5.f229([1004], [[1005]]));
    console.log("l13: "/* get_subscription_collectible_time_value */ + await f5.f235([1004], [[1005]]));

    /* 

      -----------e-----------
      l2: 4,800,998
      contract(end):3000000
      -----------e-----------
      l3: 32,9,1684868083,0,20000000000000000,0,1005,0,0,0,0,0,0,0,0,0,0,,,1003,1004,100,100,0,0,0,0,0,0,0,0
      -----------e-----------
      t: 1684768084
      t: 1685768087
      -----------e-----------
      l3: 0
      l4: 708,568
      l5: 318000,318000
      -----------e-----------
      l6: 318000
      l7: 478,919
      l8: 286199
      -----------e-----------
      t: 1685768089
      t: 1686768089
      -----------e-----------
      contract(end):2981000
      cancellable_subscription(end):9000
      l9: 0
      l10: 286200
      -----------e-----------
      l11: 485,633
      contract(end):2990000
      cancellable_subscription(end):0
      l12: 0
      l13: 0

    */
  });

  /* can perform contract actions via consensus */
  xit("56. can run e/f178/f200/f201/f202", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 0, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];
    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    
    // set up proposals
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    var vv = [
      [ /* mint end, spend then the token */
        [30000, 8, 0],
        [3], [23],/* exchanges */
        [0], [53],/* receivers */
        [35_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [ /* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, bgN(1, 70)/* 6 */, 0, 1, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [3_000_000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1003

      [ /* create subject contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), bgN(1,35)/* 2 */, 0, 900_000, 30_000, bgN(1, 70)/* 6 */, 0, 1, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,1,0,0,0,0,0/* 34 */,0,0,0,1,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [3_000_000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1004
      
      [/* enter contract */
        [30000, 3, 0],
        [1, 2], [35, 35],/* contract ids */
        [bgN(1, 23), bgN(1, 23)]/* expiry time (seconds) */
      ],

      [/* make enter_contract proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [11, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 1, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],

        [2], [35],/* targets */
        [bgN(1, 23)], [23],/* amounts */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1005

      [/* make extend_enter_contract proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [12, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 1, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],

        [2], [35],/* targets */
        [bgN(3, 23)], [23],/* amounts */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1006

      [/* make spend proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, (tt+10_000_000), 0/* 2 */, bgN(2, 16), 0, 2, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],

        [3], [23],/* target_exchange */
        [100], [23],/* amounts */
        [1003], [23],/* receivers */
        [0], [23],/* depths */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1007

      [/* make vote_contract_proposal proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [13, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 1, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],

        [6], [35],/* targets */
        [2], [23],/* vote */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1008

      [/* make exit_contract proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [14, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 1, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],

        [2], [35],/* targets */
        [0], [23],/* vote */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1009

      [/* make force_exit_contract proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [15, (tt+100_000), 0/* 2 */, bgN(2, 16), 0, 1, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 35, 23, 23, 23, 23],
        [3], [23],
        [1_000_000], [23],

        [2], [35],/* targets */
        [0], [53],/* accounts */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23],/* (unused) */
        [0], [23]/* bounty_depths */
      ],//1010

      [/* make contract moderator */
        [20000, 4, 0],
        [2], [35],/* target objects */
        [1], [35]/* target moderator account ids*/
      ],

      [/* vote proposal */
        [30000, 4, 0],
        [4, 5, 7, 8, 9], [35, 35, 35, 35, 35],/* proposal ids */
        [1, 1, 1, 1, 1],/* votes */
        [3], [23], [0],/* target bounty exchanges */
        [3], [23], [0],/* target bounty exchanges */
        [3], [23], [0],/* target bounty exchanges */
        [3], [23], [0],/* target bounty exchanges */
        [3], [23], [0],/* target bounty exchanges */
      ],

      [/* send 6 million end to contract */
        [30000, 1, 0],
        [3], [23],/* exchanges */
        [1], [35],/* receivers */
        [6_000_000],/* amounts */
        [0]/* depths */
      ]
    ];
    console.log("-----------e-----------");
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 9_900_000, value: bgN(35_000_000, 9) });
    console.log("-----------e-----------");
    var gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l1: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("contract(end):"/* Data */ + await h52./* balance_of */f140([3], [1003], [0], 1));
    console.log("subject_contract(end):"/* Data */ + await h52./* balance_of */f140([3], [1004], [0], 1));
    console.log("l2: "/* account_entry_expiry_time */ + await g52.f266([1003, 1004], [[1002],[1003]], 3));
    console.log("-----e-----");
    console.log("l3: "/* senders vote */ + await g52./* get_account votes_data */f237([1005, 1006, 1007, 1008, 1009, 1010], [[1002, 1003], [1002, 1003], [1002, 1003], [1002, 1003], [1002, 1003], [1002, 1003]]));
    console.log("-----e-----");
    console.log("l4: "/* proposal consensus(y,w,n,auto_w) */ + await g52./* get_total_consensus_data */f266([1005, 1006, 1007, 1008, 1009, 1010], [], 0));
    console.log("-----------e-----------");



    var v6/* time_inc */ = 1_000_001;
    var tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    await network.provider.send("evm_increaseTime", [v6/* time_inc */]);
    await network.provider.send("evm_mine");

    tt = await e5./*get_time*/f147(2/* get_time */);
    console.log("t: " + tt);
    console.log("-----------e-----------");


    //submit enter_contract proposal
    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1005], [23]/* targets */
      ]
    ];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l5: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("l6: "/* account_entry_expiry_time */ + await g52.f266([1003, 1004], [[1002],[1003]], 3));
    console.log("-----------e-----------");



    //submit extend_enter_contract proposal
    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1006], [23]/* targets */
      ]
    ];

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l7: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("l8: "/* account_entry_expiry_time */ + await g52.f266([1003, 1004], [[1002],[1003]], 3));
    console.log("-----------e-----------");


    //submit vote_contract_proposal proposal
    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 3, 4],
        [1008], [23],/* targets */
        [3], [0]/* vote bounties */
      ]
    ];
    console.log("l9: "/* senders vote */ + await g52./* get_account votes_data */f237([1007], [[1003]]));
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l10: "/* senders vote */ + await g52./* get_account votes_data */f237([1007], [[1003]]));
    // console.log("l11: "+await g52.f2671t());


    //submit force_exit_contract proposal
    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1010], [23]/* targets */
      ]
    ];
    console.log("l11: "/* account_entry_expiry_time */ + await g52.f266([1004], [[1002]], 3));
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l12: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("l13: "/* account_entry_expiry_time */ + await g52.f266([1004], [[1002]], 3));
    console.log("-----------e-----------");


    //submit force_exit_contract proposal
    var vv = [
      [/* submit consensus */
        [30000, 5, 0, 0, 0, 0],
        [1009], [23]/* targets */
      ]
    ];
    console.log("l14: "/* account_entry_expiry_time */ + await g52.f266([1004], [[1003]], 3));
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 4_300_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l15: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("l16: "/* account_entry_expiry_time */ + await g52.f266([1004], [[1003]], 3));
    console.log("-----------e-----------");

    /* 

    -----------e-----------
    -----------e-----------
    l1: 7,319,837
    contract(end):9000000
    subject_contract(end):3000000
    l2: 100000000000000000000000,0
    -----e-----
    l3: 1,0,1,0,0,0,1,0,1,0,1,0
    -----e-----
    l4: 0,1,0,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0
    -----------e-----------
    t: 1690476272
    t: 1691476279
    -----------e-----------
    l5: 725,049
    l6: 100000000000000000000000,100000000000000000000000
    -----------e-----------
    l7: 622,655
    l8: 100000000000000000000000,300000000000000000000000
    -----------e-----------
    l9: 0
    l10: 2
    l11: 100000000000000000000000
    l12: 632,261
    l13: 0
    -----------e-----------
    l14: 300000000000000000000000
    l15: 611,344
    l16: 0
    -----------e-----------

    */
  });







  /* can force exit accounts from contract */
  xit("57. can run e/f178/f200/f189/f267", async () => {
    const [booter, addr1, addr2] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 2, 1], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 0, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];
    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    
    // set up proposals
    var ss = [[["e", "e", "e"]], [["e", "e", "e"]]];
    var vv = [
      [ /* mint end, spend then the token */
        [30000, 8, 0],
        [3], [23],/* exchanges */
        [0], [53],/* receivers */
        [35_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],

      [ /* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, bgN(1, 70)/* 6 */, 0, 1, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,1,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [3_000_000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1003

      [ /* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, bgN(1, 70)/* 6 */, 0, 1, 0, 300_000, 0, 0, 0, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [3_000_000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1004

      [/* enter contract */
        [30000, 3, 0],
        [1, 2], [35, 35],/* contract ids */
        [bgN(1, 23), bgN(1, 23)]/* expiry time (seconds) */
      ],
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 9_900_000, value: bgN(35_000_000, 9) });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l1: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("l2: "/* account_entry_expiry_time */ + await g52.f266([1003, 1004], [[1002], [1002]], 3));
    console.log("-----------e-----------");


    var vv = [
      [ /* mint end, spend then the token */
        [30000, 8, 0],
        [3], [23],/* exchanges */
        [0], [53],/* receivers */
        [35_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [/* enter contract */
        [30000, 3, 0],
        [1003, 1004], [23, 23],/* contract ids */
        [bgN(1, 23), bgN(1, 23)]/* expiry time (seconds) */
      ]
    ];
    await e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 9_900_000, value: bgN(35_000_000, 9) });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l3: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("l4: "/* account_entry_expiry_time */ + await g52.f266([1003, 1004], [[1006], [1006]], 3));
    console.log("-----------e-----------");


    //attempt to force exit account not as moderator
    var vv = [
      [/* force exit account */
        [30000, 18, 0],
        [1003], [23],/* contract ids */
        [1002]
      ]
    ];
    
    await expect(e5.connect(addr2).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;
    // console.log("-----------e-----------");


    //attempt to force exit account with force exit disabled
    var vv = [
      [/* force exit account */
        [30000, 18, 0],
        [1004], [23],/* contract ids */
        [1006]
      ]
    ];
    
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;
    // console.log("-----------e-----------");



    var vv = [
      [/* force exit account */
        [30000, 18, 0],
        [1003], [23],/* contract ids */
        [1006]
      ]
    ];
    await e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 9_900_000, value: 35 });
    gas/* gas_cons */ = await e5./* get_gas_consumed */f5300g();
    console.log("l5: "/* GasEst */ + nWC(gas/* gas_cons */));
    console.log("l6: "/* account_entry_expiry_time */ + await g52.f266([1003], [[1006]], 3));
    console.log("-----------e-----------");


    //attempt to force exit account not part of contract
    var vv = [
      [/* force exit account */
        [30000, 18, 0],
        [1003], [23],/* contract ids */
        [1006]
      ]
    ];
    await expect(e5.connect(addr1).e(v5/* t_limits */, [], vv, [], { gasLimit: 4_300_000, value: 35 })).to.be.reverted;
    // console.log("-----------e-----------");
    

    /* 

    l1: 2,602,654
    l2: 100000000000000000000000,100000000000000000000000
    -----------e-----------
    l3: 1,233,070
    l4: 100000000000000000000000,100000000000000000000000
    -----------e-----------
    l5: 322,365
    l6: 0
    -----------e-----------
    
    */
  });

  /* gas! */
  xit("gassssssssssssss", async () => {
    const [booter, addr1, addr2, addr3, addr4, addr5, addr6] = await ethers.getSigners();
    var v1/* boot_addresses */ = [e5.address, e52.address, f5.address, g5.address, g52.address, h5.address, h52.address];
    /* 126000: 35hrs 3024000: 35dys */
    var v2/* boot_data */ = [
      [ /* spend */
        [0, 0, 0, 5], [bgN(35, 6), bgN(35, 6), 3, 0, 126000/* 4 */, bgN(53, 16), bgN(90, 16), bgN(5, 16)/* 7 */, 3, 0, 0, 0, 2/* 12 */, 1, bgN(3, 16), 1, bgN(53, 9), 0, 0], [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)], [0], [0]
      ],
      [ /* end */
        [0, 0, 0, 3],
        [bgN(35, 12), 0, 0, 0, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 2, 0, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0], [bgN(1, 72), bgN(1, 72), bgN(1, 70)/* 2 */, 0, 0, 0, 0], [0], [bgN(1, 9)]
      ],
      [ /* main contract */
        [0], [0, bgN(1, 16), 0, bgN(5, 6)/* 3 */, bgN(5, 6), 3024000, 0, 0/* 7 */, 0, bgN(5, 6), bgN(5, 6), bgN(53, 5), 0/* 12 */, 0, 1, 0/* 15 */, 72, 0, 0, 3/* 19 */, 0, 0, 0, bgN(53, 8)/* 23 */, bgN(90, 16), bgN(72, 8), 0, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
      //<12>contract_block_invocation_limit - 1
      //<13>contract_time_invocation_limit - 650
    ];
    var v3/* boot_id_data_type_data */ = [[5, 31], [3, 31], [2, 30]];
    var v4/* boot_object_metadata */ = [["e", "e"], ["e2", "e2"], ["e3", "e3"]];
    await e5.connect(booter)./*boot*/f157(v1, v2, v3, v4, v2[2][1]);
    var v5/* t_limits */ = [bgN(10, 17), bgN(10, 17)];
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));

    var aa = [[addr6.address], [addr3.address], [addr4.address], [addr5.address], [addr5.address], [addr5.address], [addr5.address], [addr5.address]];
    var ss = [
      [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]],
      [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]],
      [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]], [["e", "e", "e"], ["e", "e", "e"], ["e", "e", "e"]]
    ];
    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));

    var create_templates = [
      [/* custom object */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 34, 0]
      ],
      [/* create account object */
        [10000, 0, 0, 25/* context */, 0/* 4 */, 0, 0, 0, 0, 29, 0]
      ],
      [/* create subscription */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1001, 1, 0, 100, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [100], [23],
        [0, 0], [23, 23]
      ],
      [/* create token */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [0, 0, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3], [23, 23],
        [1000], [23, 23],
        [0], [23]
      ],
      [/* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), 3600/* 2 */, 0, 900_000, 30_000, 90_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0/* 13 */, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,0/* 27 */,0,0,0,0,0,0,0/* 34 */,0,0,0,0,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [3_000_000], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],
      [/* create proposal */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 32, 0],
        [0], [23],
        [0, bgN(1, 16), 0/* 2 */, bgN(2, 16), 0, 1003, 0/* 6 */, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3, 5], [23, 23],
        [3_000_000, 5_000_001], [23, 23],
        [3], [23],/* 4 <exchanges> */
        [9000], [23],
        [2], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0, 0], [23, 23]
      ]
    ];

    var action_templates = [
      [/* ✔️buy end/spend */
        [30000, 8, 0],
        [3, 5], [23, 23],/* exchanges */
        [1002, 1002], [23, 23],/* receivers */
        [17_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */, [0, 0]/* depths */
      ],
      [/* ✔️send tokens to another account */
        [30000, 1, 0],
        [5], [23],/* exchanges */
        [0], [23],/* receivers */
        [100_000],/* amounts */
        [0]/* depths */
      ],
      [/* ✔️enter a contract */
        [30000, 3, 0],
        [1003], [23],/* contract ids */
        [1683081300]/* expiry time (seconds) */
      ],
      [/* ✔️vote proposal */
        [30000, 4, 0],
        [1004], [23],/* proposal ids */
        [1],/* votes */
        [3], [23], [0]/* target bounty exchanges */
      ],
      /* action used to vote on a given proposal sent to a contract. three types of votes can be cast, a yes(1), wait(2) or no(3) */

      [/* ✔️auth modify subscription */
        [20000, 11, 0],
        [1003], [23],/* targets */
        [1],/* target_array_pos */
        [3],/* target_array_items */
        [108], [23]/* new_items */
      ],
      /* action used to modify a subscriptions data as a moderator. the targets are subscription ids and the following three arrays are the data to be modified. by default, only the subscriptions authority can modify a given subscription and certain values are restricted from modifying based on the type of subscription in focus. for instance the time_unit setting cant be modified after creation if your dealing with a cancellable subscription */

      [/* ✔️auth modify token exchange */
        [20000, 3, 0],
        [1003], [23],/* targets */
        [1],/* target_array */
        [17],/* target_array_items */
        [2], [23]/* new_items */
      ],
      /* action used to modify a tokens data as a moderator. the targets are exchange ids and the following three arrays are the data to be modified. by default, only the exchanges authority can modify a given exchange and only the exchange's configuration can be modified. to have full control over the exchange and set details like the tokens exchange ratios and buying price, fully_custom setting should be turned on while creating the exchange(its not something you can change after creating the token)*/

      [/* ✔️auth modify contract */
        [20000, 15, 0],
        [1003], [23],/* targets */
        [1],/* target_array_pos */
        [2],/* target_array_items */
        [3602], [23]/* new_items */
      ],
      /* action used to modify a contracts data as a moderator. the targets are contract ids and the following three arrays indicates the data to be modified. to run this action in a contract, its can_modify_contract_as_moderator setting should be turned on and the sender has to be a moderator of the contract */

      [/* auth modify proposal */
        [20000, 14, 0],
        [1005], [23],/* targets */
        [7],/* target_array_pos */
        [0],/* target_array_items */
        [136], [23]/* new_items */
      ],
      /* action used to modify a proposals data as the author. the targets are proposal ids and the following three arrays indicates the data to be modified. you cant modify a proposal thats already expired and it has to be modified before an expiry time set by the contract authority its targeting(check out the proposal_modify_expiry_duration_limit value in contracts) */

      [/* ✔️auth freeze tokens [1-freeze_tokens , 0-unfreeze_tokens] */
        [30000, 6, 0],
        [1003], [23],/* target_exchanges */
        [1002], [23],/* target_account_ids */
        [530],/* freeze_amounts */
        [1],/* action */
        [0]/* depths */
      ],
      /* action used to freeze tokens in specific targeted accounts. for each targeted account, a target exchange is passed and a targetes amount and depth is also passed. two actions can occur, freezing(1) and unfreezing(0). to freeze the balance of a particular account, i should be the exchanges authority. meaning you cant freeze someones spend for instance.  */

      [/* ✔️submit consensus request */
        [30000, 5, 0/* payer_account_data_start */, 0/* payer_account_data_end */, 0/* vote_proposal_bounty_data_start */, 0/* vote_proposal_bounty_data_end */, 0],
        [1004, 1009], [23, 23],/* targets */
        /* payer_account_data */
        [1002, 1004],/* for 1004 */
        [1002, 1003],/* for 1009 */
        /* vote_proposal_bounty_data */
        [3, 5],/* bounty_exchanges for 1004 */
        [0, 0],/* bounty_exchange depths for 1004*/
        [3, 5],/* bounty_exchanges for 1009*/
        [0, 0]/* bounty_exchange depths for 1009*/
      ],
      /* action used to submit proposals after receiving consensus. the targets passed are proposal ids and do not necessarily have to be of the same contract. also you should know that the proposals passed are not processed in the order of their appearance(you should check out the bottom of function f200 in G5). if you prefer a specific order of processing your proposals(for instance all the collect subscription proposals first, before the spend proposals), just use multiple stacks(two or more of these👆 2d arrays in that case). in the event youre submitting collect subscription proposal, the payer account data is included since to collect subscriptions, you need account ids for the accounts that paid for the subscription. in the event youre submitting a vote proposal, the vote proposal bounty data is passed, since when voting I collect bounty(in this case the contract that received the vote proposal would be receiving the bounty) */

      [/* ✔️extend enter contract */
        [30000, 14, 0],
        [1003], [23],/* contract ids */
        [tt+100_000]/* expiry time (seconds) */
      ],
      /* action used for extending stay in a given contract. when you enter a contract, you specify a time after which you cant participate in consensus activity. when this time has almost reached, you can use this action to reset that time to a future time, that way you can keep participating in consensus activity. by default, you can only extend stay in a contract when that time has almost reached, unless you turn on the can_extend_enter_contract_at_any_time setting in the contract. so for instance if i can only extend stay in my contract by four hours, i can only extend my stay when im at most four hours away from my expiry time. but if that can_extend_enter_contract_at_any_time setting is turned on, i can extend at any time(even immediately after entering the contract)*/

      [/* ✔️exit contract */
        [30000, 11, 0],
        [1003], [23]/* contract ids */
      ],
      /* action used for exiting a contract. exiting basically means you no longer wish to participate in consensus activities in a particular contract. to exit a contract, specify its id as the target. you can argue that this action doesnt need to be carried out since when entering a contract, a specific expiry time is specified, a time after which you cant participate in the consensus. so this action is useful if you had entered a contract indefinitely. oh and you cant exit the main contract(because its special, like you. yeah. you. one in a million, all 8 thousand of you) */

      [/* ✔️archive proposal/contract */
        [30000, 15, 0],
        [1004, 1005], [23, 23],/* proposal/contract ids */
        /* for target 1004 */
        [1002],/* voters/participants */
        [3, 5],[0, 0]/* exchanges to loot */
        /* for target 1005 */
        [1002],/* voters/participants */
        [3, 5],[0, 0]/* exchanges to loot */
      ],
      /* action used for archiving, or deleting the data stored for a particular set of contracts or proposals. this is useful for keeping the blockchain small and optimized, only storing data thats in use. to archive a contract, the contract_expiry_time has to be specified while creating the contract, and by defualt all proposals can be archived, since they all wont always be in use. this feature is useful if youre looking to score gas refunds(its this thing when you delete data during a transaction, you pay for less gas since youre making the chain smaller).aside from the targeted proposals or contracts(they can be passed together as targets), account ids can be passed to delete the accounts that are recorded as voters or participants(voters if your archiving a proposal and participants if your archiving a contract) and exchanges to loot, which are the exchanges which the contract or proposal targets had balances(for instance if my contract had 1000END, id specify exchange 3 to recover those funds)*/

      [/* ✔️pay subscription */
        [30000, 2, 0],
        [1003, 1004], [23, 23],/* target subscription ids */
        [5, 10]/* subscription buy amounts */
      ],
      /* action used for making subscription payments to specified subscriptions. works for both cancellable and non-cancellable subscription objects. the buy amounts are specified number of time units, not necessarily amounts of tokens. so for instance 5 means im paying for 5x53 minutes or 265 minutes for my subscription. the '53' in this case is the default time unit thats used in all subscriptions but you can specify your own value when creating the subscription object */

      [/* ✔️collect subscription */
        [30000, 13, 0],
        [1003, 1004], [23, 23],/* target subscription ids */
        /* for target 1003 */
        [1002, 1007],/* subscription collect accounts */
        /* for target 1004 */
        [1001, 1008]/* subscription collect accounts */
      ],
      /* action used for collecting subscription payments from specified accounts. this action is only available for cancellable subscriptions. for each target, a list of accounts is specified and to perform this action, the sender must be the authority of the subscription*/

      [/* ✔️cancel subscription */
        [30000, 12, 0],
        [1004], [23],/* target subscription ids */
        [3]/* subscription sell amounts */
      ],
      /* action used for cancelling subscription paymetns from specified accounts. this action is only available for cancellable subscriptions. for each target, a subscription sell amount is specified to perform this action.  */

      [/* send awwards */
        [30000, 7, 0],
        [10035, 10036], [23, 23],/* target receivers */
        [35, 45],/* awward contexts */
        /* for target 10035 */
        [3], [23],/* exchange ids for first target receiver */
        [1000],/* amounts for first target receiver */
        [0, 0],/* depths for the first targeted receiver*/
        /* for target 10036 */
        [3], [23],/* exchange ids for first target receiver */
        [1000],/* amounts for first target receiver */
        [0, 0]/* depths for the first targeted receiver*/
      ],
      /* action used for sending awward tokens to specified target accounts. for each targeted receiver, a context(which could be the id of a post for instance) and a list of exchange ids, amounts and depths is specified. sending an awward is just sending tokens to a specified account, as a reaction to post or channel activity(this is instead of doing stuff like likes and upvotes)*/

      [/* ✔️auth mint token */
        [30000, 9, 0],
        [1003], [23],/* exchanges */
        [1002], [23],/* receivers */
        [17_000_000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      /* action used for minting a given token as an authority. usually, all the limits specified by the exchange are not enforced while performing this action. also, the fee for buying the token isnt charged by the exchange while performing this auth mint action. to perform this action, sender must be the authority of the exchange. */

      [/* ✔️exchange transfer */
        [30000, 17, 0],
        [1003], [23],/* exchange ids */
        [0], [53],/* receivers */
        [100_000], [0],/* amounts/depths */
        [3], [23],/* token targets */
      ],
      /* transfers a specified amount of tokens from an exchange's account to a specified recipient. to use this action unlocked_liquidity setting should be turned on during creation of the exchange. to perform this action, sender must be the authority of the exchange */

      [/* depth_mint\swap up\swap down tokens [2(depth_auth_mint), 1(swap_up), 0(swap_down)] */
        [30000,16,0],
        [1004], [23],/* target exchange ids */
        [0], [53],/* receivers */
        [2],/* action */ 
        [1],/* depth */
        [bgN(1,72)]/* amount */
      ],
      /* action used for minting as an authority and swapping between multiple depth values. three types of actions can be passed into this action, depth_auth_mint(action 2) which basically credits a specified accounts balance with a specified amount at a specified depth, swap_up(action 1) which is swapping from a lower depth value to a higher depth value(its like swapping a hundred cents for a dollar), and swap_down(action 0) which is swapping from a higher depth value to a lower depth value(like swapping a dollar for a hundred cents). to use this action, the unlocked_supply setting in the exchange should be turned on during creation of the exchange and the sender should be the authority of the exchange */

      [/* ✔️force exit account */
        [30000, 18, 0],
        [1003], [23],/* contract ids */
        [1002]/* target account */
      ]
      /* action used to force a specified account to exit your contract. its like kicking out an account from a contract. to use this action, the contract_force_exit_enabled setting in the contract should be turned on and the sender should be a moderator of the contract */
    ];

    var mod_action_templates = [
      [ /* set account as mod */
        [20000, 4, 0],
        [1003], [23],/* target objects */
        [2023], [23]/* target moderator account ids*/
      ],
      /* action used for setting a specified account as a moderator for a specified set of targets. by default, the account that created the object is a moderator. moderators have access to add metadata and restrict access to specific accounts and block other accounts as well */

      [ /* enable interactible checkers */
        [20000, 5, 0],
        [1003], [23]/* target objects */
      ],
      /* action used for turning on interactible checkers, in short access restriction. by default, all objects such as contracts or tokens have open access, until restricted access is turned on. */

      [ /* set account to be interactible */
        [20000, 2, 0],
        [1003], [23],/* target objects */
        [1007], [23],/* target account ids*/
        [tt+100_000]/* interacible expiry time limit */
      ],
      /* action used for setting an account to be able to interact with a given set of targets. a time limit is used, meaning its a time before which access is granted and after which access is restricted */

      [/* revoke author's moderator privelages */
        [20000, 16, 0],
        [1003], [23],/* target objects */
      ],
      /* action is used to revoke moderator privelages as an author for a specified set of targets. for instance when creating a token thats to be used and controlled by multiple accounts, the author of the token should not have moderator privelages unless set by other moderators. */

      [/* block account */
        [20000, 17, 0],
        [1003], [23],/* target objects */
        [1002], [23],/* target account ids */
        [tt+35_000]/* expiry_time */
      ],
      /* action used for blocking access to a given targeted object. when an account is blocked from a token exchange for instance, they are unable to add data, buy or sell the token from the exchange itself. an expiry time is set while blocking an account, a time before which access is restricted and after which a blocked account regains access */

      [ /* set metadata */
        [20000, 1, 0],
        [1003], [23],/* target objects */
        [0]/* contexts */, 
        [23]/* int_data */
      ],
      /* action used for adding metadata to a given object. optional context and int data is passed with the target being indexed. the metadata is used to store data specific to moderators of a given target. data isnt stored directly in E5, instead, a hash pointing to the data is stored, the data itself residing externally. the hash is passed inside a two dimentional arry of strings, one for each target specified */

      [ /* set data */
        [20000, 13, 0],
        [1003], [23],/* target objects */
        [53], /* contexts */
        [65] /* int_data */
      ],
      /* action used for adding data to a given object. optional context and int_data is passed with the target being indexed. data isnt stored directly in the E5, instead, a hash pointing to the data is stored, the data itself residing externally in another chain. the hash is passed inside a two dimentional array, one for each target specified */

      [ /* alias data */
        [20000, 10, 0],
        [1003], [23],/* target objects */
        [53], /* contexts */
        [65] /* int_data */
      ],
      /* action used for aliasing or naming data objects. optional context and int_data is passed with the target being indexed. an array of strings is passed, one for each target, which would be the alias of the target. For most chains, naming an object involves storing the name on the chain itself, but here the name is stored in the emit event because its cheaper. Then when querying the name of a targeted object, the first emit event is the name used(incase there are duplicates) */

      [ /* index data in tags */
        [20000, 12, 0],
        [1003], [23]/* target objects */
      ]
      /* action used for indexing data against a given tag object. the tag in this case is just a string thats a hash value of a given tag(like 'jeans' or 'sports'). two arrays of strings are passed together with this 2d array of ints, one containing the tag being referenced and the other, tags associated with the object(since a post object contains multiple tags) for each target object specified. */
    ];


    //create test data
    var vv = [
      [/* buy end/spend */
        [30000, 8, 0],
        [5, 3], [23, 23],/* exchanges */
        [0, 0], [53, 53],/* receivers */
        [35_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],

      [/* create contract */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 30, 0],
        [30], [23],
        [0, bgN(1, 16), bgN(1, 43)/* 2 */, 0, 900_000, 30_000, 1000_000_000/* 6 */, 0, 0, 0, 300_000, 0, 0, 0/* 13 */, 0, bgN(1, 63), 0,0,0,0,0/* 20 */,0,0,0,0,0,0,bgN(2,23)/* 27 */,1,1,0,0,0,0,0/* 34 */,0,0,0,1,0,0], 
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23],
        [3], [23],/* exchanges */
        [3_000_000], [23],/* amounts */
        [0], [23],/* depths */
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23],
        [0], [23]
      ],//1003

      [ /* enter contract */
        [30000, 3, 0],
        [1003], [23],/* contract ids */
        [tt+100_000_000]/* expiry time (seconds) */
      ],

      [/* create token */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 31, 0],
        [1, 1, 0, 5],
        [23, 23, 23, 23],

        [bgN(35, 12), 0, 0, 0/* 3 */, 0, 0, 0, bgN(3, 16)/* 7 */, 0, 1002, 1002, bgN(35, 6)/* 11 */, 0, 0, 0, 0/* 15 */, 0, 0, 0],
        [23, 23, 23, 23, 23, 23, 23, 23, 23, 53, 53, 23, 23, 23, 23, 23, 23, 23, 23],

        [bgN(1, 72), bgN(1, 72), 0/* 2 */, 0, 0, 0, bgN(100, 16)],
        [23, 23, 23, 23, 23, 23, 23],

        [3], [23, 23],
        [1000], [23, 23],
        [0], [23]
      ],//1004

      [/* buy end/spend */
        [30000, 8, 0],
        [1004], [23],/* exchanges */
        [0], [53],/* receivers */
        [10000]/* amounts */, [0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],

      [/* create subscription */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [1001, 1, 0, 100, 0, 0, 0], [23, 23, 23, 23, 23, 23, 23],
        [3], [23],
        [100], [23],
        [0, 0], [23, 23]
      ],//1005
    ];
    /* test transaction for the first address */

    var vv3 = [
      [/* buy end/spend */
        [30000, 8, 0],
        [5, 3], [23, 23],/* exchanges */
        [0, 0], [53, 53],/* receivers */
        [35_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
    ];
    /* test transaction for the second test address */

    console.log("-----------e-----------");
    /* log space */

    await e5.connect(addr1).e(v5/* t_limits */, [], vv, ss, { gasLimit: 19_300_000, value: bgN(35_000_000, 9) });
    /* send the setup transaction for the first test address */

    console.log("-----------e-----------");
    /* log space */

    await e5.connect(addr2).e(v5/* t_limits */, [], vv3, ss, { gasLimit: 5_300_000, value: bgN(35_000_000, 9) });
    /* send the setup transaction for the second test address */
    
    console.log("-----------e-----------");
    /* log space */

    await network.provider.send("evm_increaseTime", [10_000_000]);
    /* increase the blockchain timestamp by the specified amount */

    await network.provider.send("evm_mine");
    /* increase the block by one */

    console.log("sender 2 account: " + await e5.f167([], [addr2.address], 2));//1006
    /* log the second test address's account */

    var tt = parseInt(await e5./*get_time*/f147(2/* get_time */));
    /* initialize a variable to contain the timestamp from the blockchain */

    var vals = [
      [/* buy end/spend */
        [30000, 8, 0],
        [5, 3], [23, 23],/* exchanges */
        [0, 0], [53, 53],/* receivers */
        [35_000_000, 35_000_000]/* amounts */, [0, 0],/* action */
        []/* lower_bounds */, []/* upper_bounds */
      ],
      [/* create subscription */
        [10000, 0, 0, 0, 0/* 4 */, 0, 0, 0, 0, 33, 0],
        [0], [23],
        [0, 1, 0, 100, 0, 0, 0], [53, 23, 23, 23, 23, 23, 53],
        [3], [23],
        [100], [23],
        [0], [23]
      ],
      [ /* enable interactible checkers */
        [20000, 5, 0],
        [1], [35]/* target objects */
      ],
      [ /* set account to be interactible */
        [20000, 2, 0],
        [1], [35],/* target objects */
        [2023], [23],/* target account ids*/
        [tt+100_000]/* interacible expiry time limit */
      ],
    ];
    /* test int data for the actions being tested for gas */

    var ss = [
      [
        ["eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"],
        ["eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"]
      ]
    ]
    /* test string data for the actions involving a string */

    //tesssssssssssst
    // await e5.connect(addr1).f2232();
    /* calls the test function used to ensure the user can vote in the main contract */

    await e5.connect(addr1).e(v5/* t_limits */, aa, vals, ss, { gasLimit: 5_100_000, value: bgN(35_000_000, 9) });
    /* send the transaction to e for recording the gas figures */

    var account_exchange_data = await h5./* scan_account_exchange_data */f241([1002],[5])
    console.log('-------------------------------e----------------------')
    console.log(account_exchange_data)

    var gas_cons = await e5./* get_gas_consumed */f5300g();
    /* fetches the consumed amount of gas */

    console.log("target:");
    /* log the title of the test */

    console.log("nested transaction count " + vals.length);
    /* log the number of transactions inside the stack(unused) */
    
    console.log("consumed: "/* GasEst */ + nWC(gas_cons)+"g");
    /* log the estimated consumed gas */

  });
  
  /* ?????? ????????? */
  xit("?????? ?????????", async () => {
    
  });

});

/*
  Key:
  n: nested transaction count
  g: gas



  MAKE CUSTOM OBJECT
  target: create custom object
  nested transaction count: 1
  consumed: 61,315


  target: create custom object
  nested transaction count: 2
  consumed: 113,628


  target: create custom object
  nested transaction count: 3
  consumed: 165,940


  target: create custom object
  nested transaction count: 4
  consumed: 218,253


  61,315g
  +52,313g per loop.






  ————————————————e————————————————






  CREATE ACCOUNT FOR SOMEONE
  target: create account object
  nested transaction count: 1
  consumed: 42,460


  target: create account object
  nested transaction count: 2
  consumed: 75,918



  target: create account object
  nested transaction count: 3
  consumed: 109,375



  target: create account object
  nested transaction count: 4
  consumed: 142,833


  42,460g
  +33,458g per loop.






  ————————————————e———————————————






  CREATE SUBSCRIPTION OBJECT
  target: create subscription object, 1 exchange, un-cancellable
  nested transaction count: 1
  consumed: 330,605


  target: create subscription object, 1 exchange, cancellable
  nested transaction count: 1
  consumed: 351,172

  +21,000g for cancellable.


  target: create subscription object, 2 exchanges, un-cancellable
  nested transaction count: 1
  consumed: 389,643


  target: create subscription object, 3 exchanges, un-cancellable
  nested transaction count: 1
  consumed: 448,683

  330,605g
  +59,040g per exchange.





  —————————————————e——————————————————————






  CREATE CONTRACT OBJECTS
  target: create contract object, 1 exchange
  nested transaction count: 1
  consumed: 664,043

  target: create contract object, 1 exchange
  nested transaction count: 1 (+1 val)
  consumed: 686,610

  target: create contract object, 1 exchange
  nested transaction count: 1(+2 val)
  consumed: 709,177

  target: create contract object, 1 exchange
  nested transaction count: 1(+3 val)
  consumed: 731,744

  +22,600g per val.



  ———e————



  target: create contract object, 1 exchange
  nested transaction count: 1
  consumed: 664,043


  target: create contract object, 2 exchanges
  nested transaction count: 1
  consumed: 721,728


  target: create contract object, 3 exchanges
  nested transaction count: 1
  consumed: 779,414



  +57,686g per exchange.




  —————————————————e——————————————————————





  CREATE PROPOSALS
  target: create spend proposal object, 1 exchange
  nested transaction count: 1
  consumed: 609,849

  target: create spend proposal object, 2 exchanges
  nested transaction count: 1
  consumed: 688,830

  target: create spend proposal object, 3 exchanges
  nested transaction count: 1
  consumed: 767,811


  target: create spend proposal object, 4 exchanges
  nested transaction count: 1
  consumed: 846,795

  +78,818g per exchange.



  ———e————



  target: create proposal object, 1 exchange
  nested transaction count: 1
  consumed: 609,849


  target: create proposal object, 1 exchange
  nested transaction count: 1(+1 val)
  consumed: 632,416


  target: create proposal object, 1 exchange
  nested transaction count: 1(+2 val)
  consumed: 654,983


  target: create proposal object, 1 exchange
  nested transaction count: 1(+3 val)
  consumed: 677,550

  +23,000g per value.




  —————————————————e——————————————————————





  MAKE TOKENS
  target: make uncapped buy token, 1 exchange
  nested transaction count 1
  consumed: 676,263g


  target: make uncapped buy token, 2 exchanges
  nested transaction count 1
  consumed: 718,236g


  target: make uncapped buy token, 3 exchanges
  nested transaction count 1
  consumed: 758,972g


  +40,736g per exchange.


  ———e————


  target: make uncapped buy token, 1 exchanges
  nested transaction count 1(+1 val)
  consumed: 696,631g


  target: make uncapped buy token, 1 exchanges
  nested transaction count 1(+2 vals)
  consumed: 716,999g


  target: make uncapped buy token, 1 exchanges
  nested transaction count 1(+3 vals)
  consumed: 737,367g



  +20,000g per value.



  —————————————————e——————————————————————



  BUY TOKENS
  target: buy end
  nested transaction count 1
  consumed: 493,469g


  target: buy spend
  nested transaction count 1
  consumed: 548,284g


  target: buy end, spend
  nested transaction count 1
  consumed: 884,255g


  target: buy end, spend, 1 custom spend
  nested transaction count 1
  consumed: 1,317,700g


  target: buy end, spend, 1 custom end, 1 custom spend
  nested transaction count 1
  consumed: 1,737,503g


  +433,445g per exchange.





  —————————————————e——————————————————————



  SEND TOKENS:
  target: send tokens, 1 exchange
  nested transaction count 1
  consumed: 99,192g


  target: send tokens, 2 exchanges
  nested transaction count 1
  consumed: 131,231g


  target: send tokens, 3 exchange
  nested transaction count 1
  consumed: 168,070g


  target: send tokens, 4 exchange
  nested transaction count 1
  consumed: 200,112g


  99,192g
  +32,000g per transfer.




  —————————————————e——————————————————————



  ENTER CONTRACT:
  target: enter contract, 1 exchange
  nested transaction count 1
  consumed: 463,051g


  target: enter contract, 2 exchanges
  nested transaction count 1
  consumed: 489,070g


  target: enter contract, 3 exchanges
  nested transaction count 1
  consumed: 541,791g


  +52,000g per exchange.




  —————————————————e——————————————————————




  VOTE PROPOSAL:
  target: vote proposal, 1 proposal
  nested transaction count 1
  consumed: 385,179g



  target: vote proposal, 2 bounty exchanges
  nested transaction count 1
  consumed: 406,757g


  —————e———--- 


  target: vote proposal, 2 proposals
  nested transaction count 1
  consumed: 758,264g



  target: vote proposal, 3 proposals
  nested transaction count 1
  consumed: 922,133g


  +163,869g per proposal.
  +20,000g per bounty exchange.



  —————————————————e——————————————————————


  SUBMIT PROPOSAL
  target: submit spend proposal, 1 exchange
  nested transaction count 1
  consumed: 462,392g


  target: submit spend proposal, 2 exchange
  nested transaction count 1
  consumed: 570,126g


  target: submit spend proposal, 3 exchange
  nested transaction count 1
  consumed: 619,496g


  target: submit spend proposal, 4 exchange
  nested transaction count 1
  consumed: 668,870g


  target: submit spend proposal, 5 exchange
  nested transaction count 1
  consumed: 718,262g


  530,182g
  +40,000g  per exchange.


  —————e—————


  target: submit re-config contract proposal, 1 value
  nested transaction count 1
  consumed: 793,555g


  target: submit re-config contract proposal, 2 values
  nested transaction count 1
  consumed: 932,049g


  target: submit re-config contract proposal, 3 values
  nested transaction count 1
  consumed: 1,070,710g


  793,555g
  +138,494g  per value.



  —————e—————



  target: submit re-config subscription proposal, 1 value
  nested transaction count 1
  consumed: 445,932g


  target: submit re-config subscription proposal, 2 value
  nested transaction count 1
  consumed: 504,510g


  target: submit re-config subscription proposal, 3 value
  nested transaction count 1
  consumed: 563,097g


  445,932g
  +58,578g per value.



  ————e—————



  target: submit re-config token proposal, 1 value
  nested transaction count 1
  consumed: 584,544g


  target: submit re-config token proposal, 2 value
  nested transaction count 1
  consumed: 712,212g


  target: submit re-config token proposal, 3 value
  nested transaction count 1
  consumed: 840,024g



  584,544g
  +127,812g per value


  ————e—————


  target: submit buy proposal, 1 value
  nested transaction count 1
  consumed: 577,452g


  target: submit buy proposal, 2 value
  nested transaction count 1
  consumed: 639,838g


  target: submit buy proposal, 3 value
  nested transaction count 1
  consumed: 698,846g



  577,452g
  +59,008g per value


  —————e—————


  target: submit freeze proposal, 1 value
  nested transaction count 1
  consumed: 590,837g


  target: submit freeze proposal, 2 values
  nested transaction count 1
  consumed: 745,020g


  target: submit freeze proposal, 3 value
  nested transaction count 1
  consumed: 899,480g


  590,837g
  +154,460g per value



  —————————————————e——————————————————————

  AUTH MODIFY SUBSCRIPTION
  target: auth modify subscription, 1 value
  nested transaction count 1
  consumed: 134,391g


  target: auth modify subscription, 2 values
  nested transaction count 1
  consumed: 159,913g


  target: auth modify subscription, 3 values
  nested transaction count 1
  consumed: 185,438g


  134,391g
  +25,522g per value



  —————————————————e——————————————————————


  AUTH MODIFY EXCHANGE
  target: auth modify token, 1 value
  nested transaction count 1
  consumed: 276,037g


  target: auth modify subscription, 2 values
  nested transaction count 1
  consumed: 370,881g


  target: auth modify subscription, 3 values
  nested transaction count 1
  consumed: 465,865g


  276,037g
  +94,844 per value


  —————————————————e——————————————————————

  AUTH FREEZE TOKENS
  target: auth modify subscription, 2 values
  nested transaction count 1
  consumed: 305,717g


  target: auth modify subscription, 2 values
  nested transaction count 1
  consumed: 428,054g


  target: auth modify subscription, 3 values
  nested transaction count 1
  consumed: 550,625g


  305,717g
  +122,337g per value



  —————————————————e——————————————————————



  EXTEND ENTER CONTRACT
  target: extend enter contract, 1 values
  nested transaction count 1
  consumed: 326,227g


  target: extend enter contract, 2 values
  nested transaction count 1
  consumed: 460,093g


  target: extend enter contract, 3 values
  nested transaction count 1
  consumed: 594,394g


  326,227g
  +134,301g per value



  —————————————————e——————————————————————




  EXIT CONTRACT
  target: exit contract, 1 values
  nested transaction count 1
  consumed: 312,402g


  target: extend enter contract, 2 values
  nested transaction count 1
  consumed: 545,027g


  target: extend enter contract, 3 values
  nested transaction count 1
  consumed: 778,082g


  381,612g
  +233,055g per value


  —————————————————e——————————————————————


  ARCHIVE DATA
  target: archive contract
  nested transaction count 1
  consumed: 937,673g


  target: archive proposal
  nested transaction count 1
  consumed: 368,652g


  —————————————————e——————————————————————



  PAY SUBSCRIPTION
  target: pay subscription, 1 value
  nested transaction count 1
  consumed: 251,891g


  target: pay subscription 2 values
  nested transaction count 1
  consumed: 286,325g


  target: pay subscription 3 values
  nested transaction count 1
  consumed: 320,767g



  251,891g
  +34,442g per value

  —————————————————e——————————————————————



  COLLECT SUBSCRIPTION
  target: collect subscription, 1 collect account
  nested transaction count 1
  consumed: 173,441g


  target: collect subscription, 2 collect account
  nested transaction count 1
  consumed: 185,974g


  +12,000g per collect account


  ———e————


  target: collect subscription, 1 targets, 1 collect account
  nested transaction count 1
  consumed: 173,441g



  target: collect subscription, 2 targets, 1 collect account
  nested transaction count 1
  consumed: 247,720g



  173,441g
  +74,279g per target


  —————————————————e——————————————————————



  SEND AWARDS
  target: send 1 award, 1 exchange
  nested transaction count 1
  consumed: 112,065g


  target: send 1 award, 2 exchange
  nested transaction count 1
  consumed: 120,665g


  target: send 1 award, 3 exchange
  nested transaction count 1
  consumed: 129,264g


  target: send 1 award, 4 exchange
  nested transaction count 1
  consumed: 137,865g


  112,065g
  +8,000g per exchange


  ———e———


  target: send 1 award
  nested transaction count 1
  consumed: 112,065g


  target: send 2 award
  nested transaction count 1
  consumed: 168,124g


  target: send 3 awards
  nested transaction count 1
  consumed: 224,198g


  112,065g
  +56,074g per exchange

  —————————————————e——————————————————————

  MODIFY PROPOSAL
  target: modify 1 proposal
  nested transaction count 1
  consumed: 112,364g


  target: modify 1 proposal, 2 values
  nested transaction count 1
  consumed: 130,839g


  target: modify 1 proposal, 3 values
  nested transaction count 1
  consumed: 149,314g

  112,364g
  +18,475g per value


  —————————————————e——————————————————————

  MODIFY CONTRACT
  target: modify 1 contract, 1 value
  nested transaction count 1
  consumed: 530,599g


  target: modify 1 contract, 2 values
  nested transaction count 1
  consumed: 644,254g


  target: modify 1 contract, 3 values
  nested transaction count 1
  consumed: 758,070g

  530,599g
  +113,655g per value




  —————————————————e——————————————————————

  FORCE EXIT ACCOUNT
  target: force exit 1 account
  nested transaction count 1
  consumed: 338,394g


  target: force exit 2 accounts
  nested transaction count 1
  consumed: 581,452g


  target: force exit 3 accounts
  nested transaction count 1
  consumed: 824,945g


  target: force exit 4 accounts
  nested transaction count 1
  consumed: 964,069g

  338,394g
  +139,124g per account



  —————————————————e——————————————————————

  DEPTH AUTH-MINT

  target: depth auth-mint 1 depth
  nested transaction count 1
  consumed: 300,510g


  target: depth auth-mint 2 depths
  nested transaction count 1
  consumed: 444,237g


  target: depth auth-mint 3 depths
  nested transaction count 1
  consumed: 588,198g


  300,510g
  +143,961g per depth



  —————————————————e——————————————————————

  SWAP UP

  target: depth swap up 1 swap
  nested transaction count 1
  consumed: 287,295g


  target: depth swap up 2 swaps
  nested transaction count 1
  consumed: 413,007g


  target: depth swap up 3 swaps
  nested transaction count 1
  consumed: 556,053g


  287,295g
  +143,046g per swap




  —————————————————e——————————————————————

  SWAP DOWN

  target: depth swap down, 1 swap
  nested transaction count 1
  consumed: 304,394g


  target: depth swap down, 2 swaps
  nested transaction count 1
  consumed: 423,177g


  target: depth swap down, 3 swaps
  nested transaction count 1
  consumed: 543,253g


  304,394g
  +120,076g per swap




  —————————————————e——————————————————————

  EXCHANGE TRANSFER

  target: exchange transfer, 1 transfer
  nested transaction count 1
  consumed: 140,068g


  target: exchange transfer, 2 transfers
  nested transaction count 1
  consumed: 182,596g


  target: exchange transfer, 3 transfers
  nested transaction count 1
  consumed: 225,129g


  140,068g
  +42,533g per transfer




  —————————————————e——————————————————————

  SET MODERATOR

  target: set 1 account as moderator
  nested transaction count 1
  consumed: 121,897g


  target: set 2 accounts as moderator
  nested transaction count 1
  consumed: 157,475g


  target: set 3 accounts as moderator
  nested transaction count 1
  consumed: 193,053g


  121,897g
  +35,578g per setting





  —————————————————e——————————————————————

  ENABLE INTERACTIBLE CHECKERS

  target: enable interactible checker, 1 target
  nested transaction count 1
  consumed: 118,683g


  target: enable interactible checker, 2 targets
  nested transaction count 1
  consumed: 161,326g


  target: enable interactible checker, 3 targets
  nested transaction count 1
  consumed: 203,970g


  118,683g
  +42,644g per target




  —————————————————e——————————————————————

  SET ACCOUNT'S INTERACTIBLE TIME LIMIT

  target: set account as interactible, 1 account
  nested transaction count 1
  consumed: 128,778g


  target: set account as interactible, 2 account
  nested transaction count 1
  consumed: 167,624g


  target: set account as interactible, 3 account
  nested transaction count 1
  consumed: 206,470g


  128,778g
  +38,846g per account




  —————————————————e——————————————————————

  REVOKE AUTHORS MODERATOR PRIVELAGES

  target: revoke 1 target
  nested transaction count 1
  consumed: 112,768g


  target: revoke 2 target
  nested transaction count 1
  consumed: 151,252g


  target: revoke 3 target
  nested transaction count 1
  consumed: 189,736g


  112,768g
  +38,484g per target



  —————————————————e——————————————————————

  BLOCK ACCOUNTS

  target: block 1 target
  nested transaction count 1
  consumed: 128,830g


  target: block 2 targets
  nested transaction count 1
  consumed: 167,684g


  target: block 3 targets
  nested transaction count 1
  consumed: 206,538g


  128,830g
  +38,854g per target



  —————————————————e——————————————————————

  SET METADATA

  target: set 1 target
  nested transaction count 1
  consumed: 73,398g


  target: set 2 targets
  nested transaction count 1
  consumed: 86,165g


  target: set 3 targets
  nested transaction count 1
  consumed: 98,933g


  73,398g
  +12,768g per target



  —————————————————e——————————————————————

  SET DATA

  target: set 1 target
  nested transaction count 1
  consumed: 76,954g


  target: set 2 targets
  nested transaction count 1
  consumed: 91,334g


  target: set 3 targets
  nested transaction count 1
  consumed: 105,716g


  76,954g
  +14,382g per target



  —————————————————e——————————————————————
  
  ALIAS DATA

  target: alias 1 target
  nested transaction count 1
  consumed: 71,243g


  target: alias 2 targets
  nested transaction count 1
  consumed: 83,643g


  target: alias 3 targets
  nested transaction count 1
  consumed: 96,045g

  
  71,243g
  +12,402g per target
  —————————————————e——————————————————————

  INDEX DATA
  target: index 1 target
  nested transaction count 1
  consumed: 122,852g


  target: index 2 targets
  nested transaction count 1
  consumed: 139,843g


  target: index 3 targets
  nested transaction count 1
  consumed: 156,835g


  122,852g
  +16,992g per target

  —————————————————e——————————————————————
*/

/*
 ???@BPC E5 % yarn hardhat size-contracts 
   ·-----------------------|----------------------------|----------------·
 |  Solc version: 0.8.4  ·  Optimizer enabled: false  ·  Runs: 1       │
 ························|····························|·················
 |  Contract Name        ·  Size (KiB)                ·  Change (KiB)  │
 ························|····························|·················
 |  console              ·                     0.084  ·         0.000  │
 ························|····························|·················
 |  E2                   ·                     1.880  ·         0.000  │
 ························|····························|·················
 |  F33                  ·                    11.079  ·         0.000  │
 ························|····························|·················
 |  E32                  ·                    20.005  ·         0.000  │
 ························|····························|·················
 |  F5                   ·                    20.559  ·         0.000  │
 ························|····························|·················
 |  F3                   ·                    20.577  ·         0.000  │
 ························|····························|·················
 |  E34                  ·                    20.748  ·         0.000  │
 ························|····························|·················
 |  E33                  ·                    21.720  ·         0.000  │
 ························|····························|·················
 |  G3                   ·                    21.990  ·         0.000  │
 ························|····························|·················
 |  G32                  ·                    22.921  ·         0.000  │
 ························|····························|·················
 |  E3                   ·                    22.965  ·         0.000  │
 ························|····························|·················
 |  F32                  ·                    23.220  ·         0.000  │
 ························|····························|·················
 |  H3                   ·                    23.225  ·         0.000  │
 ························|····························|·················
 |  H32                  ·                    23.311  ·         0.000  │
 ························|····························|·················
 |  G52                  ·                    23.324  ·         0.000  │
 ························|····························|·················
 |  G5                   ·                    23.617  ·         0.000  │
 ························|····························|·················
 |  E52                  ·                    23.624  ·         0.000  │
 ························|····························|·················
 |  E5                   ·                    23.641  ·         0.000  │
 ························|····························|·················
 |  H5                   ·                    23.695  ·         0.000  │
 ························|····························|·················
 |  H52                  ·                    23.713  ·         0.000  │
 ························|····························|·················
 |  G33                  ·                    23.771  ·         0.000  │
 ·-----------------------|----------------------------|----------------·
  
  as of Thursday 25 Sep 2025
*/

/*

  ????:
  Im an alien
  from outside your world
  far far away
  literally


  ????:
  ...


  ????:
  so trust first, its important.


  ????:
  ...


  ????:
  im borrowing one of your chains for a thing
  hope you dont mind
  promise ill put it back
  you werent using it anyways


  ????:
  ...


  ????:
  ????? swan remake,
  awesome movie,
  10/10, must watch


  ????:
  working on a remake,
  hope you like it
  has a five-ish minute runtime


  ????:
  ...


  ????:
  its not complex, 
  its needlessly sophisticated


  ????:
  ...


  ????:
  Its real, I swear
  I'll even give you a dollar to prove it


  ????:
  ...


  ????:
  ...


  ????:
  ...


  ????:
  ...


  ????:
  ...


  ????:
  its the green tea,
  i dont know what else to tell you


  e:
  you shall! do green tea


  ????:
  ...


*/

//289
